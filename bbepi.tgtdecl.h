/*
 *  bbepi.tgtdecl.h
 *
 *  Do not edit this file. It is automatically generated by EPIC.
 *
 *  Date : Oct  9 2013
 *  Time : 17:18:52
 */

#ifndef h_bbepi_tgtdecl_h
#define h_bbepi_tgtdecl_h

/* id tags - one for MROR-WS, one for pulse sequence, 0 based */
int cont_wsid, cont_psdid;
/* time stamp to recon for MROR header */
int cont_time;
/* variable communicating to recon that real time is on */
int cont_synch;
/* stops the cont imaging after acquisition of the last pass */
int cont_stop, cont_stop_usr;
/* x, y, and z offsets from original prescription - mm units, 1/10 mm
   accuracy, range TBD */
float cont_xoffset, cont_yoffset, cont_zoffset;
/* alpha, beta, and gamma offsets from original prescription - degree
   units, 1/10 degree accuracy, range 0-360 degrees */
float cont_alpha, cont_beta, cont_gamma;

/* variable for checking scan plane offset (cont_x/y/zofset )change */
int cont_sp_changed;

/* Fix for spr MRIge46008 making sure the following prescan vars*/
/* are available for all psds */
/* The following are set by prescan upon successful completion: */
int pscR1;  /* R1 receive attenuation (dB) */
int pscR2;  /* R2 receive attenuation (barrel shift) */
int pscCF;  /* CF center frequency (Hz) */
int pscTG;  /* TG transmit gain (dB) */

#ifdef PSD_HW
/* MRIge81678 - FGRET Timestamp */
int perf_tdel_id = 0;

/* 
 * If promo_rescantime_id==2, the rescan time communication between psd and recon 
 * will be initialized, the value of rescan time will then be sent to host for display
 */
int promo_rescantime_id = 0;
#endif /* PSD_HW */

/*@Start***********************************************************/
/* GEMSBG Include File
 * Copyright (C) 2000 The General Electric Company
 *
 *      Include File Name:  dabrecord   
 *      Developer: Jeff Hopkins
 *
 * $Source: dabrecord.h $
 * $Revision: 1.0 $  $Date: 6/19/00 17:04:15 $
 *
 */

/*@Synopsis 
	Contains arrays and variables for recording dab information
*/     

/*@Description
 * ******************************************
   dabrecord.h
   Author: Jeff Hopkins
   Date:   12/05/89
   
   Description: Contains constants, arrays, and counters
   for keeping track of the contents of DAB packets as
   they are passed in. This is the epic.h version for
   the ipgexport (rsp?) section. This needs to match
   one-to-one with dabrecord_pgen.h which gives the
   external links for the loaddab functions.

   Revision Date    Author     Desc.
   ________________________________________
   07/19/2000       JAH        Created view_record variables.

**********************************************/

/*JAH: for recording view order table*/
int view_record[DABRECLEN];
int dabview_counter = 0;
int fse_dabview_flag = 0;
int record_views = 0;

/*********************************************************************
 *                    PRESCAN.E RSPVAR SECTION                       *
 *                             PSrspvar                              *
 *                                                                   *
 * Declare here the real time variables that can be viewed and modi- *
 * fied while the Tgt PSD process is running. Only limited standard  *
 * C types are provided: short, int, long, float, double, and 1D     *
 * arrays of those types.                                            *
 *                                                                   *
 * NOTE: Do not declare all real-time variables here because of the  *
 *       overhead required for viewing and modifying them.           *
 *********************************************************************/

float dipir_ratio;
int dixon,slice,view,excitation;
int dur_invse; /* Initial duration for the WAIT pulse before the 90 pulse */
               /* based on OPTI */
int new_dur;   /* New duration time calulated with titime and cfh_ti delta */
int titime; /* input TI time on milliseconds; initialized to OPTI */
int titime_us;  /* input TI time in microseconds */
int tislice; /* holds new slice value that is changed during CFH */
int tislice_start; /* initial slice number passed into CFH */
float new_slice_loc; /* holds new slice location in cm */
int noir; /* Flag for IR pulse to be turned off */
int cscfh_satindex = 1; /* default chemsat occurence in cfh */
int mtcfh_index = 1; /* default mt occurence in cfh */
int amp_gyrf0kcfh;
int psc_vol_index; /* index of the prescan volume */
int showfp;

/****  FastTG RSPvar    ****/
int ftg_acq1, ftg_acq2; /* flags for data acquisiton, windows 1 and 2
                           1=on, 0=off */

/****  eXpressTG RSPvar    ****/
int xtg_acq1;           /* flag for data acquisiton windows 1=on, 0=off */

/****  AutoShim RSPvar  ****/
float asrot0,asrot1,asrot2,asrot3,asrot4,asrot5,asrot6,asrot7,asrot8,
    asrot9,asrot10,asrot11,asrot12,asrot13,asrot14,asrot15,asrot16,
    asrot17,asrot18,asrot19,asrot20,asrot21,asrot22,asrot23,asrot24,
    asrot25, asrot26;
float asrloc1,asrloc2,asrloc3;
float astloc1,astloc2,astloc3;
short as_slquant;
int PSdebugrotmat=0;

/* SWIFT debug */
int swift_debug = 0;
/************************ END OF PRESCAN.E ****************************/

int isrtplaunched = 0;




float rdx, rdy, rdz;     /* B0 phase dither in degrees, physical axes */
float dlyx, dlyy, dlyz;  /* gldelay acq/grad alignment real time variables */

int ref_switch = 0;   /* If 0 use prescribed FOV offset in exciter phase calc
		         If 1, don't used phase offset (for reference scan) */

int acq_data;  /* data acquisiton on/off flag */

int shot_delay;    /* trigger delay value for progressive gating */
int end_delay;     /* end of sequence wait time for conserved TR with
                      progressive gating */
int gyb_amp;       /* amplitude of gyb pulse */

int modrot = 0;      /* flag to determine whether rotation matrices should
                        be modified */
int rotx = 0;        /* rotate about x-axis this many degrees */
int roty = 0;        /* rotate about y-axis this many degrees */
int rotz = 0;        /* rotate about z-axis this many degrees */
int resrot = 0;      /* Reset to original rotation matrices */

int modloc = 0;      /* flag to determine whether locations should be modified */
int dso = 0;         /* delta slice select offset in mm */
int dro = 0;         /* delta readout offset in mm */
int dpo = 0;         /* delta phase encoding offset in mm */
int resloc = 0;      /* Reset to original location */
float xtr;         /* xtr tuning value */
float frt;         /* frt tuning value */

float timedelta;
int deltaomega,scaleomega;

int   sliceindex, pass,view,core_rep,excitation,slice,ileave,echo,pass_rep, pass_index;
int   ileave = 0;
int   slicerep = 0;
int   mod_rba = TRUE;
int   sl_rcvcf;        /*  center freq receive offset */
int   dabecho;         /* vars for loaddab */
int   dabecho_multi;
int   dabop = 0;
short debugstate;      /* if trace is on */
int   acq_sl;
int   rsp_card_intern; /* deadtime when next slice is internally gated in a
                          cardiac scan */
int   rsp_card_last;  /* dead time for last temporal slice of a cardiac scan */
int   rsp_card_fill;  /* dead time for last slice in a filled R-R interval */
int   rsp_card_unfill;/* dead time for last slice in a unfilled R-R interval */
short rsp_hrate;       /* cardiac heart rate */

/*jwg bb rsp vars*/
int freq_ctr = 0;
float met_freq = 0; 
int num_freqs = 0;
int phase_incr = 0;
float vfa_flip_ia = 0;
float vfa_flip_angle = 0;
/*jwg end*/


int pre_slnum;  /* Prescan slice number */

int echoOffset;
int dabmask, hsdabmask;

int sp_slice;
int sp_sat_index;
int sp_array_index;
int isi_vector_count;
int isi_vector_count_card;
int isi_vector_count_seqir123;
int isi_vector_count_seqir13;
int isi_vector_count_seqir12;
int sp_maxslice;
int sp_ir_mode;
int sp_sat_seq_count;
short int amp_gyksx1, amp_gyksx2, amp_gyksy1, amp_gyksy2, amp_gyksz1, amp_gyksz2, amp_gykse1, amp_gykse2, amp_gykse3, amp_gykse4, amp_gykse5, amp_gykse6;

short int amp_gxksx1, amp_gxksx2, amp_gxksy1, amp_gxksy2, amp_gxksz1, amp_gxksz2, amp_gxkse1, amp_gxkse2, amp_gxkse3, amp_gxkse4, amp_gxkse5, amp_gxkse6;


int csf, amp_gykcs, cstun;
float csflip, csa, max_csa;
    
#ifdef CSXKILLER
int amp_gxkcs;
#endif
#ifdef CSZKILLER
int amp_gzkcs;
#endif


/* Define MRE RSP variables */
/* Start inline from touch.e TouchRspVar */
int cm_pass;
int rsp_cmnpass;
int pass_cnt;
int cmdir_rep;
int rsp_cmndir;
int wave_trigoff;
int wave_trigon;
int bp_pnts;
float tp;
float tz;
float Gp;
int max_pts;
int n_iter;

int rsp_slide;
int dab_slice;
int meg2_amp;

#define MAX_NUM_TOUCH_MOTION_DIRS 2
short touchxuamp[MAX_NUM_TOUCH_MOTION_DIRS];
short touchxdamp[MAX_NUM_TOUCH_MOTION_DIRS];
short touchxfamp[MAX_NUM_TOUCH_MOTION_DIRS];
short touchyuamp[MAX_NUM_TOUCH_MOTION_DIRS];
short touchydamp[MAX_NUM_TOUCH_MOTION_DIRS];
short touchyfamp[MAX_NUM_TOUCH_MOTION_DIRS];
short touchzuamp[MAX_NUM_TOUCH_MOTION_DIRS];
short touchzdamp[MAX_NUM_TOUCH_MOTION_DIRS];
short touchzfamp[MAX_NUM_TOUCH_MOTION_DIRS];
short touchxuamp2[MAX_NUM_TOUCH_MOTION_DIRS];
short touchxdamp2[MAX_NUM_TOUCH_MOTION_DIRS];
short touchxfamp2[MAX_NUM_TOUCH_MOTION_DIRS];
short touchyuamp2[MAX_NUM_TOUCH_MOTION_DIRS];
short touchydamp2[MAX_NUM_TOUCH_MOTION_DIRS];
short touchyfamp2[MAX_NUM_TOUCH_MOTION_DIRS];
short touchzuamp2[MAX_NUM_TOUCH_MOTION_DIRS];
short touchzdamp2[MAX_NUM_TOUCH_MOTION_DIRS];
short touchzfamp2[MAX_NUM_TOUCH_MOTION_DIRS];
/* End inline from touch.e TouchRspVar */


int   rspent, rspgyc;
int BoreOverTempFlag = PSD_OFF;  /* used for fMRI */

short rspdda, rspbas, rspbasb, rspilv, rsprep, rspnex, rspchp, rspgy1,
    rspesl, rspasl, rspech, rspdex, rspslq,rspacq, rspacqb, 
    rspslqb, rspilvb, rspprp;

short rspvus, rspsct;   /* used by Prescan.e */
short rspe1st, rspetot;

/* ocfov fix MRIge26428 */
int refindex1, refindex2;
float refdattime[SLTAB_MAX];

/* blip correction array */
int rspia_gyboc[DATA_ACQ_MAX];


  WF_PULSE x_td0 = INITPULSE;

  WF_PULSE y_td0 = INITPULSE;

  WF_PULSE z_td0 = INITPULSE;

  WF_PULSE rho_td0 = INITPULSE;

  WF_PULSE theta_td0 = INITPULSE;

  WF_PULSE omega_td0 = INITPULSE;

  WF_PULSE ssp_td0 = INITPULSE;

    WF_PULSE gzrf0a = INITPULSE;
    WF_PULSE gzrf0  = INITPULSE;
    WF_PULSE gzrf0d = INITPULSE;
    WF_PULSE rf0 = INITPULSE;


  EXTERN_FILENAME fileloc_omegarf0 =  "shNvrg5b.pha";
  WF_PULSE omegarf0 = INITPULSE;

  WF_PULSE gyk0a = INITPULSE;
  WF_PULSE gyk0 = INITPULSE;
  WF_PULSE gyk0d = INITPULSE;

  SEQUENCE_ENTRIES  off_seqinv;
  WF_PULSE seqinv;
#if defined(HOST_TGT)
  int idx_seqinv;   /* sequence entry index */
#endif

    EXTERN_FILENAME2 grad_zrf1;
    EXTERN_FILENAME2 rf_rf1 ;
    EXTERN_FILENAME2 theta_rf1;
    WF_PULSE gzrf1a = INITPULSE;
    WF_PULSE gzrf1  = INITPULSE;
    WF_PULSE gzrf1d = INITPULSE;
    WF_PULSE rf1 = INITPULSE;
    WF_PULSE thetarf1  = INITPULSE;

  
  EXTERN_FILENAME fileloc_phaserf1 =  "fileloc_phasef1";
  WF_PULSE phaserf1 = INITPULSE;

  WF_PULSE gzrf2a = INITPULSE;
  WF_PULSE gzrf2  = INITPULSE;
  WF_PULSE gzrf2d = INITPULSE;
  WF_PULSE rf2 = INITPULSE;

  WF_PULSE rf2se1b4 = INITPULSE;

  WF_PULSE gyrf2iva = INITPULSE;
  WF_PULSE gyrf2iv = INITPULSE;
  WF_PULSE gyrf2ivd = INITPULSE;

  WF_PULSE gzrf2l1a = INITPULSE;
  WF_PULSE gzrf2l1 = INITPULSE;
  WF_PULSE gzrf2l1d = INITPULSE;

  WF_PULSE gzrf2r1a = INITPULSE;
  WF_PULSE gzrf2r1 = INITPULSE;
  WF_PULSE gzrf2r1d = INITPULSE;

  WF_PULSE gxcla = INITPULSE;
  WF_PULSE gxcl = INITPULSE;
  WF_PULSE gxcld = INITPULSE;
 
  WF_PULSE gxwa = INITPULSE;
  WF_PULSE gxw = INITPULSE;
  WF_PULSE gxwd = INITPULSE;
  WF_PULSE gxwde = INITPULSE;
  WF_PULSE gxcra = INITPULSE;
  WF_PULSE gxcr = INITPULSE;
  WF_PULSE gxcrd = INITPULSE;
 
  WF_PULSE gxgap = INITPULSE;
 
  WF_PULSE gyb = INITPULSE;
  WF_PULSE gyba = INITPULSE;
  WF_PULSE gybd = INITPULSE;
   
  WF_PULSE *echotrain;

  WF_PULSE rec_unblank = INITPULSE;
  short rec_unblank_pack[4];

  WF_PULSE rtb0echo = INITPULSE;

  WF_PULSE rec_unblank2 = INITPULSE;
  short rec_unblank2_pack[4];

  WF_PULSE hyperdab = INITPULSE;

  WF_PULSE gy1a = INITPULSE;
  WF_PULSE gy1 = INITPULSE;
  WF_PULSE gy1d = INITPULSE;

  WF_PULSE gymn2a = INITPULSE;
  WF_PULSE gymn2 = INITPULSE;
  WF_PULSE gymn2d = INITPULSE;

  WF_PULSE gymn1a = INITPULSE;
  WF_PULSE gymn1 = INITPULSE;
  WF_PULSE gymn1d = INITPULSE;

  WF_PULSE gz1a = INITPULSE;
  WF_PULSE gz1 = INITPULSE;
  WF_PULSE gz1d = INITPULSE;

  WF_PULSE gzmna = INITPULSE;
  WF_PULSE gzmn = INITPULSE;
  WF_PULSE gzmnd = INITPULSE;

  WF_PULSE rf2se1 = INITPULSE;

  WF_PULSE gxka = INITPULSE;
  WF_PULSE gxk = INITPULSE;
  WF_PULSE gxkd = INITPULSE;

  WF_PULSE gyka = INITPULSE;
  WF_PULSE gyk = INITPULSE;
  WF_PULSE gykd = INITPULSE;

  WF_PULSE gzka = INITPULSE;
  WF_PULSE gzk = INITPULSE;
  WF_PULSE gzkd = INITPULSE;

  WF_PULSE sync_on_2 = INITPULSE;

  WF_PULSE sync_off_2 = INITPULSE;

  WF_PULSE wgx = INITPULSE;

  WF_PULSE wgy = INITPULSE;

  WF_PULSE wgz = INITPULSE;

  WF_PULSE wssp = INITPULSE;

  WF_PULSE sspdelay = INITPULSE;

  WF_PULSE omegadelay = INITPULSE;

  WF_PULSE womega = INITPULSE;

  WF_PULSE e1entns = INITPULSE;
  short e1entns_pack[4] = {0,SSPOC+DREG,SSPD+DCBL,SSPDS};

  WF_PULSE e1distns = INITPULSE;
  short e1distns_pack[4] = {0,SSPOC+DREG,SSPD,SSPDS};

  WF_PULSE atten = INITPULSE;

  WF_PULSE sspshift = INITPULSE;

  WF_PULSE ssp_pass_delay = INITPULSE;

  WF_PULSE pass_pulse = INITPULSE;

  WF_PULSE jwg_delay = INITPULSE;

  WF_PULSE touch_wssp = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcore;
  WF_PULSE seqcore;
#if defined(HOST_TGT)
  int idx_seqcore;   /* sequence entry index */
#endif

  WF_PULSE rec_unblankref = INITPULSE;
  short rec_unblankref_pack[4];

  WF_PULSE refgxcla = INITPULSE;
  WF_PULSE refgxcl = INITPULSE;
  WF_PULSE refgxcld = INITPULSE;
 
  WF_PULSE refgxwa = INITPULSE;
  WF_PULSE refgxw = INITPULSE;
  WF_PULSE refgxwd = INITPULSE;
  WF_PULSE refgxwde = INITPULSE;
  WF_PULSE refgxcra = INITPULSE;
  WF_PULSE refgxcr = INITPULSE;
  WF_PULSE refgxcrd = INITPULSE;
 
  WF_PULSE refgxgap = INITPULSE;
 
  WF_PULSE refgyb = INITPULSE;
  WF_PULSE refgyba = INITPULSE;
  WF_PULSE refgybd = INITPULSE;
   
  WF_PULSE *refechotrain;

  WF_PULSE hyperdabref = INITPULSE;

  WF_PULSE pass_pulseref = INITPULSE;

  SEQUENCE_ENTRIES  off_seqrefcore;
  WF_PULSE seqrefcore;
#if defined(HOST_TGT)
  int idx_seqrefcore;   /* sequence entry index */
#endif

  WF_PULSE bline_unblank = INITPULSE;
  short bline_unblank_pack[4];

  WF_PULSE blineacq1 = INITPULSE;

  WF_PULSE hyperdabbl = INITPULSE;

  SEQUENCE_ENTRIES  off_seqblineacq;
  WF_PULSE seqblineacq;
#if defined(HOST_TGT)
  int idx_seqblineacq;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqRTclock;
  WF_PULSE seqRTclock;
#if defined(HOST_TGT)
  int idx_seqRTclock;   /* sequence entry index */
#endif

  WF_PULSE gxtouchu2a = INITPULSE;
  WF_PULSE gxtouchu2 = INITPULSE;
  WF_PULSE gxtouchu2d = INITPULSE;

  WF_PULSE gytouchu2a = INITPULSE;
  WF_PULSE gytouchu2 = INITPULSE;
  WF_PULSE gytouchu2d = INITPULSE;

  WF_PULSE gztouchu2a = INITPULSE;
  WF_PULSE gztouchu2 = INITPULSE;
  WF_PULSE gztouchu2d = INITPULSE;

  WF_PULSE gxtouchua = INITPULSE;
  WF_PULSE gxtouchu = INITPULSE;
  WF_PULSE gxtouchud = INITPULSE;

  WF_PULSE gytouchua = INITPULSE;
  WF_PULSE gytouchu = INITPULSE;
  WF_PULSE gytouchud = INITPULSE;

  WF_PULSE gztouchua = INITPULSE;
  WF_PULSE gztouchu = INITPULSE;
  WF_PULSE gztouchud = INITPULSE;

  WF_PULSE gxtouchd2a = INITPULSE;
  WF_PULSE gxtouchd2 = INITPULSE;
  WF_PULSE gxtouchd2d = INITPULSE;

  WF_PULSE gytouchd2a = INITPULSE;
  WF_PULSE gytouchd2 = INITPULSE;
  WF_PULSE gytouchd2d = INITPULSE;

  WF_PULSE gztouchd2a = INITPULSE;
  WF_PULSE gztouchd2 = INITPULSE;
  WF_PULSE gztouchd2d = INITPULSE;

  WF_PULSE gxtouchda = INITPULSE;
  WF_PULSE gxtouchd = INITPULSE;
  WF_PULSE gxtouchdd = INITPULSE;

  WF_PULSE gytouchda = INITPULSE;
  WF_PULSE gytouchd = INITPULSE;
  WF_PULSE gytouchdd = INITPULSE;

  WF_PULSE gztouchda = INITPULSE;
  WF_PULSE gztouchd = INITPULSE;
  WF_PULSE gztouchdd = INITPULSE;

  WF_PULSE gxtouchf2a = INITPULSE;
  WF_PULSE gxtouchf2 = INITPULSE;
  WF_PULSE gxtouchf2d = INITPULSE;

  WF_PULSE gytouchf2a = INITPULSE;
  WF_PULSE gytouchf2 = INITPULSE;
  WF_PULSE gytouchf2d = INITPULSE;

  WF_PULSE gztouchf2a = INITPULSE;
  WF_PULSE gztouchf2 = INITPULSE;
  WF_PULSE gztouchf2d = INITPULSE;

  WF_PULSE gxtouchfa = INITPULSE;
  WF_PULSE gxtouchf = INITPULSE;
  WF_PULSE gxtouchfd = INITPULSE;

  WF_PULSE gytouchfa = INITPULSE;
  WF_PULSE gytouchf = INITPULSE;
  WF_PULSE gytouchfd = INITPULSE;

  WF_PULSE gztouchfa = INITPULSE;
  WF_PULSE gztouchf = INITPULSE;
  WF_PULSE gztouchfd = INITPULSE;

  WF_PULSE rfcssat = INITPULSE;

  WF_PULSE omega_hs_rfcssat = INITPULSE;

  WF_PULSE gzrfcsa = INITPULSE;
  WF_PULSE gzrfcs = INITPULSE;
  WF_PULSE gzrfcsd = INITPULSE;

  WF_PULSE gykcsa = INITPULSE;
  WF_PULSE gykcs = INITPULSE;
  WF_PULSE gykcsd = INITPULSE;

  WF_PULSE gxkcsa = INITPULSE;
  WF_PULSE gxkcs = INITPULSE;
  WF_PULSE gxkcsd = INITPULSE;

  WF_PULSE gzkcsa = INITPULSE;
  WF_PULSE gzkcs = INITPULSE;
  WF_PULSE gzkcsd = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcssat;
  WF_PULSE seqcssat;
#if defined(HOST_TGT)
  int idx_seqcssat;   /* sequence entry index */
#endif

  WF_PULSE isi_cardiacsat = INITPULSE;

  WF_PULSE rot_update_cardiacsat = INITPULSE;

  WF_PULSE gzrfse1a = INITPULSE;
  WF_PULSE gzrfse1  = INITPULSE;
  WF_PULSE gzrfse1d = INITPULSE;
  WF_PULSE rfse1 = INITPULSE;
  WF_PULSE rfse1Theta = INITPULSE;

  WF_PULSE isi_sate1 = INITPULSE;

  WF_PULSE rot_update_e1 = INITPULSE;

  WF_PULSE gykse1a = INITPULSE;
  WF_PULSE gykse1 = INITPULSE;
  WF_PULSE gykse1d = INITPULSE;

  WF_PULSE gxkse1a = INITPULSE;
  WF_PULSE gxkse1 = INITPULSE;
  WF_PULSE gxkse1d = INITPULSE;

  WF_PULSE isi_satek1 = INITPULSE;

  WF_PULSE rot_update_ek1 = INITPULSE;

  WF_PULSE gzrfse2a = INITPULSE;
  WF_PULSE gzrfse2  = INITPULSE;
  WF_PULSE gzrfse2d = INITPULSE;
  WF_PULSE rfse2 = INITPULSE;
  WF_PULSE rfse2Theta = INITPULSE;

  WF_PULSE isi_sate2 = INITPULSE;

  WF_PULSE rot_update_e2 = INITPULSE;

  WF_PULSE gykse2a = INITPULSE;
  WF_PULSE gykse2 = INITPULSE;
  WF_PULSE gykse2d = INITPULSE;

  WF_PULSE gxkse2a = INITPULSE;
  WF_PULSE gxkse2 = INITPULSE;
  WF_PULSE gxkse2d = INITPULSE;

  WF_PULSE isi_satek2 = INITPULSE;

  WF_PULSE rot_update_ek2 = INITPULSE;

  WF_PULSE gzrfse3a = INITPULSE;
  WF_PULSE gzrfse3  = INITPULSE;
  WF_PULSE gzrfse3d = INITPULSE;
  WF_PULSE rfse3 = INITPULSE;
  WF_PULSE rfse3Theta = INITPULSE;

  WF_PULSE isi_sate3 = INITPULSE;

  WF_PULSE rot_update_e3 = INITPULSE;

  WF_PULSE gykse3a = INITPULSE;
  WF_PULSE gykse3 = INITPULSE;
  WF_PULSE gykse3d = INITPULSE;

  WF_PULSE gxkse3a = INITPULSE;
  WF_PULSE gxkse3 = INITPULSE;
  WF_PULSE gxkse3d = INITPULSE;

  WF_PULSE isi_satek3 = INITPULSE;

  WF_PULSE rot_update_ek3 = INITPULSE;

  WF_PULSE gzrfse4a = INITPULSE;
  WF_PULSE gzrfse4  = INITPULSE;
  WF_PULSE gzrfse4d = INITPULSE;
  WF_PULSE rfse4 = INITPULSE;
  WF_PULSE rfse4Theta = INITPULSE;

  WF_PULSE isi_sate4 = INITPULSE;

  WF_PULSE rot_update_e4 = INITPULSE;

  WF_PULSE gykse4a = INITPULSE;
  WF_PULSE gykse4 = INITPULSE;
  WF_PULSE gykse4d = INITPULSE;

  WF_PULSE gxkse4a = INITPULSE;
  WF_PULSE gxkse4 = INITPULSE;
  WF_PULSE gxkse4d = INITPULSE;

  WF_PULSE isi_satek4 = INITPULSE;

  WF_PULSE rot_update_ek4 = INITPULSE;

  WF_PULSE gzrfse5a = INITPULSE;
  WF_PULSE gzrfse5  = INITPULSE;
  WF_PULSE gzrfse5d = INITPULSE;
  WF_PULSE rfse5 = INITPULSE;
  WF_PULSE rfse5Theta = INITPULSE;

  WF_PULSE isi_sate5 = INITPULSE;

  WF_PULSE rot_update_e5 = INITPULSE;

  WF_PULSE gykse5a = INITPULSE;
  WF_PULSE gykse5 = INITPULSE;
  WF_PULSE gykse5d = INITPULSE;

  WF_PULSE gxkse5a = INITPULSE;
  WF_PULSE gxkse5 = INITPULSE;
  WF_PULSE gxkse5d = INITPULSE;

  WF_PULSE isi_satek5 = INITPULSE;

  WF_PULSE rot_update_ek5 = INITPULSE;

  WF_PULSE gzrfse6a = INITPULSE;
  WF_PULSE gzrfse6  = INITPULSE;
  WF_PULSE gzrfse6d = INITPULSE;
  WF_PULSE rfse6 = INITPULSE;
  WF_PULSE rfse6Theta = INITPULSE;

  WF_PULSE isi_sate6 = INITPULSE;

  WF_PULSE rot_update_e6 = INITPULSE;

  WF_PULSE gykse6a = INITPULSE;
  WF_PULSE gykse6 = INITPULSE;
  WF_PULSE gykse6d = INITPULSE;

  WF_PULSE gxkse6a = INITPULSE;
  WF_PULSE gxkse6 = INITPULSE;
  WF_PULSE gxkse6d = INITPULSE;

  WF_PULSE isi_satek6 = INITPULSE;

  WF_PULSE rot_update_ek6 = INITPULSE;

  WF_PULSE gxrfsx1a = INITPULSE;
  WF_PULSE gxrfsx1  = INITPULSE;
  WF_PULSE gxrfsx1d = INITPULSE;
  WF_PULSE rfsx1 = INITPULSE;
  WF_PULSE rfsx1Theta = INITPULSE;

  WF_PULSE isi_satx1 = INITPULSE;

  WF_PULSE rot_update_x1 = INITPULSE;

  WF_PULSE gyksx1a = INITPULSE;
  WF_PULSE gyksx1 = INITPULSE;
  WF_PULSE gyksx1d = INITPULSE;

  WF_PULSE gxksx1a = INITPULSE;
  WF_PULSE gxksx1 = INITPULSE;
  WF_PULSE gxksx1d = INITPULSE;

  WF_PULSE isi_satxk1 = INITPULSE;

  WF_PULSE rot_update_xk1 = INITPULSE;

  WF_PULSE gxrfsx2a = INITPULSE;
  WF_PULSE gxrfsx2  = INITPULSE;
  WF_PULSE gxrfsx2d = INITPULSE;
  WF_PULSE rfsx2 = INITPULSE;
  WF_PULSE rfsx2Theta = INITPULSE;

  WF_PULSE isi_satx2 = INITPULSE;

  WF_PULSE rot_update_x2 = INITPULSE;

  WF_PULSE gyksx2a = INITPULSE;
  WF_PULSE gyksx2 = INITPULSE;
  WF_PULSE gyksx2d = INITPULSE;

  WF_PULSE gxksx2a = INITPULSE;
  WF_PULSE gxksx2 = INITPULSE;
  WF_PULSE gxksx2d = INITPULSE;

  WF_PULSE isi_satxk2 = INITPULSE;

  WF_PULSE rot_update_xk2 = INITPULSE;

  WF_PULSE gyrfsy1a = INITPULSE;
  WF_PULSE gyrfsy1  = INITPULSE;
  WF_PULSE gyrfsy1d = INITPULSE;
  WF_PULSE rfsy1 = INITPULSE;
  WF_PULSE rfsy1Theta = INITPULSE;

  WF_PULSE isi_saty1 = INITPULSE;

  WF_PULSE rot_update_y1 = INITPULSE;

  WF_PULSE gyksy1a = INITPULSE;
  WF_PULSE gyksy1 = INITPULSE;
  WF_PULSE gyksy1d = INITPULSE;

  WF_PULSE gxksy1a = INITPULSE;
  WF_PULSE gxksy1 = INITPULSE;
  WF_PULSE gxksy1d = INITPULSE;

  WF_PULSE isi_satyk1 = INITPULSE;

  WF_PULSE rot_update_yk1 = INITPULSE;

  WF_PULSE gyrfsy2a = INITPULSE;
  WF_PULSE gyrfsy2  = INITPULSE;
  WF_PULSE gyrfsy2d = INITPULSE;
  WF_PULSE rfsy2 = INITPULSE;
  WF_PULSE rfsy2Theta = INITPULSE;

  WF_PULSE isi_saty2 = INITPULSE;

  WF_PULSE rot_update_y2 = INITPULSE;

  WF_PULSE gyksy2a = INITPULSE;
  WF_PULSE gyksy2 = INITPULSE;
  WF_PULSE gyksy2d = INITPULSE;

  WF_PULSE gxksy2a = INITPULSE;
  WF_PULSE gxksy2 = INITPULSE;
  WF_PULSE gxksy2d = INITPULSE;

  WF_PULSE isi_satyk2 = INITPULSE;

  WF_PULSE rot_update_yk2 = INITPULSE;

  WF_PULSE gzrfsz1a = INITPULSE;
  WF_PULSE gzrfsz1  = INITPULSE;
  WF_PULSE gzrfsz1d = INITPULSE;
  WF_PULSE rfsz1 = INITPULSE;
  WF_PULSE rfsz1Theta = INITPULSE;

  WF_PULSE isi_satz1 = INITPULSE;

  WF_PULSE rot_update_z1 = INITPULSE;

  WF_PULSE gyksz1a = INITPULSE;
  WF_PULSE gyksz1 = INITPULSE;
  WF_PULSE gyksz1d = INITPULSE;

  WF_PULSE gxksz1a = INITPULSE;
  WF_PULSE gxksz1 = INITPULSE;
  WF_PULSE gxksz1d = INITPULSE;

  WF_PULSE isi_satzk1 = INITPULSE;

  WF_PULSE rot_update_zk1 = INITPULSE;

  WF_PULSE gzrfsz2a = INITPULSE;
  WF_PULSE gzrfsz2  = INITPULSE;
  WF_PULSE gzrfsz2d = INITPULSE;
  WF_PULSE rfsz2 = INITPULSE;
  WF_PULSE rfsz2Theta = INITPULSE;

  WF_PULSE isi_satz2 = INITPULSE;

  WF_PULSE rot_update_z2 = INITPULSE;

  WF_PULSE gyksz2a = INITPULSE;
  WF_PULSE gyksz2 = INITPULSE;
  WF_PULSE gyksz2d = INITPULSE;

  WF_PULSE gxksz2a = INITPULSE;
  WF_PULSE gxksz2 = INITPULSE;
  WF_PULSE gxksz2d = INITPULSE;

  WF_PULSE isi_satzk2 = INITPULSE;

  WF_PULSE rot_update_zk2 = INITPULSE;

  SEQUENCE_ENTRIES  off_seqsat_fgre;
  WF_PULSE seqsat_fgre;
#if defined(HOST_TGT)
  int idx_seqsat_fgre;   /* sequence entry index */
#endif

  WF_PULSE y_ccs_null = INITPULSE;

  SEQUENCE_ENTRIES  off_cat_seq;
  WF_PULSE cat_seq;
#if defined(HOST_TGT)
  int idx_cat_seq;   /* sequence entry index */
#endif

  WF_PULSE gzrf1mps1a = INITPULSE;
  WF_PULSE gzrf1mps1  = INITPULSE;
  WF_PULSE gzrf1mps1d = INITPULSE;
  WF_PULSE rf1mps1 = INITPULSE;

  WF_PULSE gz1mps1a = INITPULSE;
  WF_PULSE gz1mps1 = INITPULSE;
  WF_PULSE gz1mps1d = INITPULSE;

  WF_PULSE gx1mps1a = INITPULSE;
  WF_PULSE gx1mps1 = INITPULSE;
  WF_PULSE gx1mps1d = INITPULSE;

  WF_PULSE gzrf2mps1a = INITPULSE;
  WF_PULSE gzrf2mps1  = INITPULSE;
  WF_PULSE gzrf2mps1d = INITPULSE;
  WF_PULSE rf2mps1 = INITPULSE;

  WF_PULSE gzrf2lmps1a = INITPULSE;
  WF_PULSE gzrf2lmps1 = INITPULSE;
  WF_PULSE gzrf2lmps1d = INITPULSE;

  WF_PULSE gzrf2rmps1a = INITPULSE;
  WF_PULSE gzrf2rmps1 = INITPULSE;
  WF_PULSE gzrf2rmps1d = INITPULSE;

  WF_PULSE gxwmps1a = INITPULSE;
  WF_PULSE gxwmps1 = INITPULSE;
  WF_PULSE gxwmps1d = INITPULSE;

  WF_PULSE echo1mps1 = INITPULSE;

  WF_PULSE attenuator_keymps1 = INITPULSE;

  SEQUENCE_ENTRIES  off_seqmps1;
  WF_PULSE seqmps1;
#if defined(HOST_TGT)
  int idx_seqmps1;   /* sequence entry index */
#endif

  WF_PULSE gzrf1cfla = INITPULSE;
  WF_PULSE gzrf1cfl  = INITPULSE;
  WF_PULSE gzrf1cfld = INITPULSE;
  WF_PULSE rf1cfl = INITPULSE;

  WF_PULSE gz1cfla = INITPULSE;
  WF_PULSE gz1cfl = INITPULSE;
  WF_PULSE gz1cfld = INITPULSE;

  WF_PULSE cfl_fid = INITPULSE;

  WF_PULSE cfl_attenkey = INITPULSE;

  WF_PULSE gykcfla = INITPULSE;
  WF_PULSE gykcfl = INITPULSE;
  WF_PULSE gykcfld = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcfl;
  WF_PULSE seqcfl;
#if defined(HOST_TGT)
  int idx_seqcfl;   /* sequence entry index */
#endif

  WF_PULSE gxkrcvna = INITPULSE;
  WF_PULSE gxkrcvn = INITPULSE;
  WF_PULSE gxkrcvnd = INITPULSE;

  WF_PULSE gykrcvna = INITPULSE;
  WF_PULSE gykrcvn = INITPULSE;
  WF_PULSE gykrcvnd = INITPULSE;

  WF_PULSE gzkrcvna = INITPULSE;
  WF_PULSE gzkrcvn = INITPULSE;
  WF_PULSE gzkrcvnd = INITPULSE;

  WF_PULSE rcvn_wait = INITPULSE;

  SEQUENCE_ENTRIES  off_pre_rcvn;
  WF_PULSE pre_rcvn;
#if defined(HOST_TGT)
  int idx_pre_rcvn;   /* sequence entry index */
#endif

  WF_PULSE rcvrbl = INITPULSE;
  short rcvrbl_pack[4];

  WF_PULSE rcvn_fid = INITPULSE;

  WF_PULSE rcvn_attenkey = INITPULSE;

  WF_PULSE rcvrbl2 = INITPULSE;
  short rcvrbl2_pack[4];

  SEQUENCE_ENTRIES  off_seqrcvn;
  WF_PULSE seqrcvn;
#if defined(HOST_TGT)
  int idx_seqrcvn;   /* sequence entry index */
#endif

  EXTERN_FILENAME grad_zrf0cfh= "NULL";
  EXTERN_FILENAME rf_rf0cfh = "shNvrg5b.rho";

  WF_PULSE gzrf0cfha = INITPULSE;
  WF_PULSE gzrf0cfh  = INITPULSE;
  WF_PULSE gzrf0cfhd = INITPULSE;
  WF_PULSE rf0cfh = INITPULSE;


  EXTERN_FILENAME fileloc_omegarf0cfh =  "shNvrg5b.pha";
  WF_PULSE omegarf0cfh = INITPULSE;

  WF_PULSE gyrf0kcfha = INITPULSE;
  WF_PULSE gyrf0kcfh = INITPULSE;
  WF_PULSE gyrf0kcfhd = INITPULSE;

  WF_PULSE zticfh = INITPULSE;

  WF_PULSE rticfh = INITPULSE;

  WF_PULSE xticfh = INITPULSE;

  WF_PULSE yticfh = INITPULSE;

  WF_PULSE sticfh = INITPULSE;

  WF_PULSE gzrf1cfha = INITPULSE;
  WF_PULSE gzrf1cfh  = INITPULSE;
  WF_PULSE gzrf1cfhd = INITPULSE;
  WF_PULSE rf1cfh = INITPULSE;

    WF_PULSE rf2cfh = INITPULSE;

    WF_PULSE rf3cfh = INITPULSE;

  WF_PULSE gxrf2cfha = INITPULSE;
  WF_PULSE gxrf2cfh = INITPULSE;
  WF_PULSE gxrf2cfhd = INITPULSE;

  WF_PULSE gyrf2cfha = INITPULSE;
  WF_PULSE gyrf2cfh = INITPULSE;
  WF_PULSE gyrf2cfhd = INITPULSE;

  WF_PULSE gzrf2lcfha = INITPULSE;
  WF_PULSE gzrf2lcfh = INITPULSE;
  WF_PULSE gzrf2lcfhd = INITPULSE;

  WF_PULSE gzrf2rcfha = INITPULSE;
  WF_PULSE gzrf2rcfh = INITPULSE;
  WF_PULSE gzrf2rcfhd = INITPULSE;

  WF_PULSE gyrf3cfha = INITPULSE;
  WF_PULSE gyrf3cfh = INITPULSE;
  WF_PULSE gyrf3cfhd = INITPULSE;

  WF_PULSE gzrf3lcfha = INITPULSE;
  WF_PULSE gzrf3lcfh = INITPULSE;
  WF_PULSE gzrf3lcfhd = INITPULSE;

  WF_PULSE gzrf3rcfha = INITPULSE;
  WF_PULSE gzrf3rcfh = INITPULSE;
  WF_PULSE gzrf3rcfhd = INITPULSE;

  WF_PULSE gy1cfha = INITPULSE;
  WF_PULSE gy1cfh = INITPULSE;
  WF_PULSE gy1cfhd = INITPULSE;

  WF_PULSE gx1cfha = INITPULSE;
  WF_PULSE gx1cfh = INITPULSE;
  WF_PULSE gx1cfhd = INITPULSE;

  WF_PULSE cfh_fid = INITPULSE;

  WF_PULSE cfh_attenkey = INITPULSE;

  WF_PULSE gykcfha = INITPULSE;
  WF_PULSE gykcfh = INITPULSE;
  WF_PULSE gykcfhd = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcfh;
  WF_PULSE seqcfh;
#if defined(HOST_TGT)
  int idx_seqcfh;   /* sequence entry index */
#endif

  WF_PULSE contrfhubsel = INITPULSE;

  WF_PULSE contrfsel = INITPULSE;

  WF_PULSE csw_wait = INITPULSE;

  SEQUENCE_ENTRIES  off_seqcsw;
  WF_PULSE seqcsw;
#if defined(HOST_TGT)
  int idx_seqcsw;   /* sequence entry index */
#endif

  SEQUENCE_ENTRIES  off_seqcswWaitBefore;
  WF_PULSE seqcswWaitBefore;
#if defined(HOST_TGT)
  int idx_seqcswWaitBefore;   /* sequence entry index */
#endif

  WF_PULSE gzrf1ftga = INITPULSE;
  WF_PULSE gzrf1ftg  = INITPULSE;
  WF_PULSE gzrf1ftgd = INITPULSE;
  WF_PULSE rf1ftg = INITPULSE;

  WF_PULSE gz1ftga = INITPULSE;
  WF_PULSE gz1ftg = INITPULSE;
  WF_PULSE gz1ftgd = INITPULSE;

  WF_PULSE gzrf2ftga = INITPULSE;
  WF_PULSE gzrf2ftg  = INITPULSE;
  WF_PULSE gzrf2ftgd = INITPULSE;
  WF_PULSE rf2ftg = INITPULSE;

  WF_PULSE gz2ftga = INITPULSE;
  WF_PULSE gz2ftg = INITPULSE;
  WF_PULSE gz2ftgd = INITPULSE;

  WF_PULSE gzrf3ftga = INITPULSE;
  WF_PULSE gzrf3ftg  = INITPULSE;
  WF_PULSE gzrf3ftgd = INITPULSE;
  WF_PULSE rf3ftg = INITPULSE;

  WF_PULSE gz3ftga = INITPULSE;
  WF_PULSE gz3ftg = INITPULSE;
  WF_PULSE gz3ftgd = INITPULSE;

  WF_PULSE gx1ftga = INITPULSE;
  WF_PULSE gx1ftg = INITPULSE;
  WF_PULSE gx1ftgd = INITPULSE;

  WF_PULSE gx1bftga = INITPULSE;
  WF_PULSE gx1bftg = INITPULSE;
  WF_PULSE gx1bftgd = INITPULSE;

  WF_PULSE gxw1ftga = INITPULSE;
  WF_PULSE gxw1ftg = INITPULSE;
  WF_PULSE gxw1ftgd = INITPULSE;

  WF_PULSE postgxw1ftga = INITPULSE;
  WF_PULSE postgxw1ftg = INITPULSE;
  WF_PULSE postgxw1ftgd = INITPULSE;

  WF_PULSE echo1ftg = INITPULSE;

  WF_PULSE gz2bftga = INITPULSE;
  WF_PULSE gz2bftg = INITPULSE;
  WF_PULSE gz2bftgd = INITPULSE;

  WF_PULSE gx2ftga = INITPULSE;
  WF_PULSE gx2ftg = INITPULSE;
  WF_PULSE gx2ftgd = INITPULSE;

  WF_PULSE gxw2ftga = INITPULSE;
  WF_PULSE gxw2ftg = INITPULSE;
  WF_PULSE gxw2ftgd = INITPULSE;

  WF_PULSE gx2testa = INITPULSE;
  WF_PULSE gx2test = INITPULSE;
  WF_PULSE gx2testd = INITPULSE;

  WF_PULSE echo2ftg = INITPULSE;

  WF_PULSE ftg_attenkey = INITPULSE;

  SEQUENCE_ENTRIES  off_seqftg;
  WF_PULSE seqftg;
#if defined(HOST_TGT)
  int idx_seqftg;   /* sequence entry index */
#endif

  WF_PULSE gzrf1xtga = INITPULSE;
  WF_PULSE gzrf1xtg  = INITPULSE;
  WF_PULSE gzrf1xtgd = INITPULSE;
  WF_PULSE rf1xtg = INITPULSE;

  WF_PULSE gykxtgla = INITPULSE;
  WF_PULSE gykxtgl = INITPULSE;
  WF_PULSE gykxtgld = INITPULSE;

        WF_PULSE rf3xtg    = INITPULSE;

        /* for RF shimming */
        WF_PULSE phs_rf3xtg      = INITPULSE;

  WF_PULSE gz1xtga = INITPULSE;
  WF_PULSE gz1xtg = INITPULSE;
  WF_PULSE gz1xtgd = INITPULSE;

  WF_PULSE gzrf2xtga = INITPULSE;
  WF_PULSE gzrf2xtg  = INITPULSE;
  WF_PULSE gzrf2xtgd = INITPULSE;
  WF_PULSE rf2xtg = INITPULSE;

  WF_PULSE gz2xtga = INITPULSE;
  WF_PULSE gz2xtg = INITPULSE;
  WF_PULSE gz2xtgd = INITPULSE;

        WF_PULSE rf4xtg    = INITPULSE;

        /* for RF shimming */
        WF_PULSE phs_rf4xtg      = INITPULSE;

  WF_PULSE gykxtgra = INITPULSE;
  WF_PULSE gykxtgr = INITPULSE;
  WF_PULSE gykxtgrd = INITPULSE;

  WF_PULSE gx1bxtga = INITPULSE;
  WF_PULSE gx1bxtg = INITPULSE;
  WF_PULSE gx1bxtgd = INITPULSE;

  WF_PULSE gxw1xtga = INITPULSE;
  WF_PULSE gxw1xtg = INITPULSE;
  WF_PULSE gxw1xtgd = INITPULSE;

  WF_PULSE echo1xtg = INITPULSE;

  WF_PULSE xtg_attenkey = INITPULSE;

  SEQUENCE_ENTRIES  off_seqxtg;
  WF_PULSE seqxtg;
#if defined(HOST_TGT)
  int idx_seqxtg;   /* sequence entry index */
#endif

  WF_PULSE gzrf1asa = INITPULSE;
  WF_PULSE gzrf1as  = INITPULSE;
  WF_PULSE gzrf1asd = INITPULSE;
  WF_PULSE rf1as = INITPULSE;

  WF_PULSE gz1asa = INITPULSE;
  WF_PULSE gz1as = INITPULSE;
  WF_PULSE gz1asd = INITPULSE;

  WF_PULSE gxwasa = INITPULSE;
  WF_PULSE gxwas = INITPULSE;
  WF_PULSE gxwasd = INITPULSE;

  WF_PULSE echo1as = INITPULSE;

  WF_PULSE gx1asa = INITPULSE;
  WF_PULSE gx1as = INITPULSE;
  WF_PULSE gx1asd = INITPULSE;

  WF_PULSE attenuator_keyas = INITPULSE;

  WF_PULSE gy1asa = INITPULSE;
  WF_PULSE gy1as = INITPULSE;
  WF_PULSE gy1asd = INITPULSE;

  WF_PULSE gy1rasa = INITPULSE;
  WF_PULSE gy1ras = INITPULSE;
  WF_PULSE gy1rasd = INITPULSE;

  WF_PULSE gxkasa = INITPULSE;
  WF_PULSE gxkas = INITPULSE;
  WF_PULSE gxkasd = INITPULSE;

  WF_PULSE gzkasa = INITPULSE;
  WF_PULSE gzkas = INITPULSE;
  WF_PULSE gzkasd = INITPULSE;

  WF_PULSE xdixon = INITPULSE;

  WF_PULSE ydixon = INITPULSE;

  WF_PULSE zdixon = INITPULSE;

  WF_PULSE sdixon = INITPULSE;

  WF_PULSE sdixon2 = INITPULSE;

  SEQUENCE_ENTRIES  off_seqaushim;
  WF_PULSE seqaushim;
#if defined(HOST_TGT)
  int idx_seqaushim;   /* sequence entry index */
#endif

  WF_PULSE pass_aushim = INITPULSE;

  SEQUENCE_ENTRIES  off_seqpassas;
  WF_PULSE seqpassas;
#if defined(HOST_TGT)
  int idx_seqpassas;   /* sequence entry index */
#endif

#endif /* h_bbepi_tgtdecl_h */

