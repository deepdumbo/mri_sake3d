/*
 *  bbepi.global.h
 *
 *  Do not edit this file. It is automatically generated by EPIC.
 *
 *  Date : Oct  9 2013
 *  Time : 17:18:52
 */

#ifndef h_bbepi_global_h
#define h_bbepi_global_h


extern char psd_name[255];

#include <GElimits.h>
#include <slice_factor.h>  
#include <usage_tag.h>

/* ***************************
   TGT-PSD COMMON AREA
   Pulsegen Constants and
   Hardware specific variables
   ************************** */
#include "GEtypes.h"             /* type definitions from GEtypes project*/
#include "ca_filt.h"
#include "CoilParameters.h"
#include "physioHwDefs.h"
#include "config_platform_hw.h"
#include "log_grad_struct.h"
#include "psdexitarg.h"
#include "epic_geometry_types.h"
#include "epic_hw_defs.h"
#include "epic_advisory_panel.h"
#include "epic_entry_points.h"
#include "epic_ifcc_sizes.h"
#include "epic_ui_control.h"
#include "hoec_defines.h"  /* HOEC */
#include "recon_filter_defs.h"

#define EOS_PLAY 0
#define EOS_DEAD 1

/* TGT Trigger Codes */
#define TRIG_LINE   1
#define TRIG_ECG    3
#define TRIG_RESP   4
#define TRIG_AUX    5
#define TRIG_INTERN 7
#define TRIG_NLINE  9 /* TRIG_NLINE is not a real hardware trigger.
			 It is used to bump up optr by TR_SLOP when a 
			 sequence may line gate based on the value
			 of optr.  So if a new #define is needed for
			 the hardware, change the value of TRIG_NLINE */

typedef enum CARDIAC_GATE_TYPE
{
    CARDIAC_GATE_TYPE_MIN = 0,
    CARDIAC_GATE_TYPE_NONE = 0,
    CARDIAC_GATE_TYPE_ECG = 1,
    CARDIAC_GATE_TYPE_PG = 2,
    CARDIAC_GATE_TYPE_MAX = 2
} CARDIAC_GATE_TYPE_E;

/* Enumeration definition for value_system_flag */
typedef enum VALUE_SYSTEM_TYPE
{
  NON_VALUE_SYSTEM = 0,
  VALUE_SYSTEM_HDE,     
  VALUE_SYSTEM_SVEM,    
  VALUE_SYSTEM_SVDM,    
  VALUE_SYSTEM_SVDMP
} VALUE_SYSTEM_TYPE_E;

/* WARP codes */
#define WARP_UPDATE_NOW 0
#define WARP_UPDATE_ON_SSP_INT 1

/* Pause Attributes */
#define MAY_PAUSE 1
#define MUST_PAUSE 2
#define AUTO_PAUSE 3

/* The section below lists the dB/dT coefficients for different
   models including Reilly model and IEC Hyperbolic model. The
   two coefficients are a) Rheobase & b) Chronaxie. Rheobase is
   the dB/dT value at inifinite transition time and Chronaxie is
   the time constant at a dB/dT twice the Rheobase. */

/* Coefficients for Reilly dB/dt Model */
/* Rheobase value for Reilly dBdt model */
#define REILLYDBDTINF 54.0
/* Chronaxie value for Reilly dBdt model */
#define REILLYDBDTFACTOR 132.0
/* Coefficients for Higher Reilly dB/dt Mode (e.g., FIESTA) */
/* Rheobase value for Reilly dBdt model */
#define REILLYDBDTINF_HIGHER 21.8
/* Chronaxie value for Reilly dBdt model */
#define REILLYDBDTFACTOR_HIGHER 369.0

/* Coefficients for the IEC dB/dt Model */
#define IEC_BRM_RHEOBASE        23.7
#define IEC_BRM_CHRONAXIE        370
#define IEC_CRM_RHEOBASE        25.2
#define IEC_CRM_CHRONAXIE        558
#define IEC_TRM_WHOL_RHEOBASE   23.7
#define IEC_TRM_WHOL_CHRONAXIE   370
#define IEC_TRM_ZOOM_RHEOBASE   29.1
#define IEC_TRM_ZOOM_CHRONAXIE   354
#define IEC_XRM_RHEOBASE        25.3  /* XRMB */
#define IEC_XRM_CHRONAXIE        389

/* dB/dt optimization modes */
#define CONVOLUTION_INTEGRAL_MODE 1 
#define RECTANGULAR_MODE 0

/* Generic success return value */
#define EM_PSD_NO_ERROR 0

/* ************************************
   Echo Planar Optimization Structures
   ********************************** */
typedef struct {
    float xfs;       /* x grad full scale (g/cm) */
    float yfs;       /* y grad full scale (g/cm) */
    int   xrt;       /* x grad rise time 0-xfs (usec) */
    int   yrt;       /* y grad rise time 0-yfs (usec) */
    float xbeta;     /* beta for segmented parabolic waveshapes x grad */
    float ybeta;     /* beta for segmented parabolic waveshapes y grad*/
    float xfov;      /* fov in logical x direction (cm) */
    float yfov;      /* fov in logical y direction (cm) */
    int   xres;      /* operator selected x resolution (pixels) */
    int   yres;      /* operator selected y resolution (pixels) */
    int   ileaves;   /* number of interleaved shots */
    float xdis;      /* x distance for dB/dt calculation */
    float ydis;      /* y distance for dB/dt calculation */
    float tsp;       /* sample period */
    int   osamps;    /* Fractional echo oversamps */
    float fbhw;      /* fraction of blip half width excluded from
                        sampling (VRG only) */
    int   vvp;       /* inter-echo base period */
    float pnsf;      /* peripheral nerve stimulation factor */
    float taratio;    /* SXZ::MRIge72411:top area ratio for reducing high freq ghost */
} OPT_GRAD_INPUT;
 
typedef struct {
    float *agxw;     /* epi readout pulse amplitude */
    int   *pwgxw;    /* epi readout pulse width */
    int   *pwgxwa;   /* epi readout attack/decay ramp */
    float *agyb;     /* epi blip pulse amplitude */
    int   *pwgyb;    /* epi blip pulse width */
    int   *pwgyba;   /* epi blip pulse attack/decay ramp */
    int   *frsize;   /* frame size - number of samples */
    int   *pwsamp;   /* sample window width */
    int   *pwxgap;   /* epi readout interecho gap */
} OPT_GRAD_PARAMS;
 
/*********************************/
/* End of new structures for 5.5 */
/*********************************/
 

#define CN_PASSES_EXCEEDED 1
#define CN_FRAMES_EXCEEDED 2
#define CN_NOINIT          3
#define EX_NOINIT          4

/* constants for createramps routine */ /* merged 55 bch. YH */
#define PSD_SLOPE_NONE 0
#define PSD_SLOPE_UP 1
#define PSD_SLOPE_DOWN 2

/* END - PSD - TGT common area */

/* Visibility Constants */
#define VIS MODIFIABLE

#ifdef MCVALL
#define INVIS    MODIFIABLE
#define VISONLY  MODIFIABLE
#else /* !MCVALL */
#define INVIS    INVISIBLE
#define VISONLY  VISIBLE
#endif /* MCVALL */

/* The following macros conflict with the ones in
   /vobs/mgd/include/seq.h */
#ifdef RHO2
#undef RHO2
#endif /* RHO2 */
#ifdef SSP
#undef SSP
#endif /* SSP */

/* Board Names */
#define XGRAD TYPXGRAD
#define YGRAD TYPYGRAD
#define ZGRAD TYPZGRAD
#define RHO   TYPRHO1
#define RHO2  TYPRHO2
#define THETA TYPTHETA
#define OMEGA TYPOMEGA
#define SSP   TYPSSP
#define XGRADB TYPBXGRAD
#define YGRADB TYPBYGRAD
#define ZGRADB TYPBZGRAD
#define XGRD 1   /* merged 55 bch */
#define YGRD 2   /* into vmx.     */
#define ZGRD 3   /* YH 10/14/94   */
 
/* Can't use pulsegen constant for number of processors */
#define PSD_MAX_PROCESSORS 9
/* Misc. constants */
#ifndef PI
#define PI 3.14159265358979323846
#endif /* PI */
/* Positive Full Scale in TGT.  All #'s scaled to this number */
#define FSI 32768

/* integer values for pi and 2pi */
#define FS_PI 32768
#define FS_2PI 65536

/* Positive PI Phase */
#define PI_PHASE_POS 0x8000
/* Negative PI Phase */
#define PI_PHASE_NEG 0xFFFF8000

/* FEC : Field Strength Codes */
/* Valid B0 Strenth values in Gauss units (1 Tesla = 10000 Gauss) */
#define  B0_40000          40000
#define  B0_30000          30000
#define  B0_15000          15000
#define  B0_10000          10000
#define  B0_7000           7000
#define  B0_5000           5000
#define  B0_3500           3500 /* MFO, Hino, Apr 24 2000, MM */
#define  B0_2000           2000

#define  N_FSTRENGTHS      8

#define GFS 1.0 /* gradient full scale G/cm */

/* gradient coil types *//* vmx 12/07/94 YI */
#define GCOIL_NONE 0
#define GCOIL_CRD 1
#define GCOIL_ROEMER 2
#define GCOIL_HGC 101
#define GCOIL_VECTRA 102
#define GCOIL_PERMANENT 103
#define GCOIL_PERMANENTHIGHER 9 /* YMSmr02461. MFO, Hino, May 16 2000, MM */

/* GRAM tuning board types */
#define GRAM_TUNE_ANALOG 0  /* merged 55 bch into vmx */
#define GRAM_TUNE_DIGITAL 1 /*            YH 10/14/94 */

/* Service Mode Types for Exciter */
#define PSD_SERVOFF 0
#define PSD_SERVSYNTH 1
#define PSD_SERVLB 2

/* Power Amplifier Selects */
#define AMP_ERBTEC 1
#define AMP_SPECTRO 2
#define AMP_DUAL 3

/* RF Exciter Selects */
#define EXC_PRIMARY 1
#define EXC_SECONDARY 2
#define EXC_DUAL 3

/* Excitation Mode */
#define SELECTIVE 0
#define NON_SELECTIVE 1
#define FOCUS 2

/* Pre and Post Min RF AMP Unblank Times */
#define PSD_PRERFAMP_UBL 250
#define PSD_POSTRFAMP_UBL 50
#define PSD_PRERFAMP_UBL_VMX 600

/* Broadband Use */
#define PSD_BROADBANDOFF 0
#define PSD_BROADBANDON 1

/* Powermon ports */
#define PMCH_HEAD 0
#define PMCH_BODY 1
#define PMCH_SPECTRO 2

#define NUM_POWERMON_PORT 3

/* Receiver Input Ports */
#define PSD_RP_HEAD 1
#define PSD_RP_BODY 2
#define PSD_RP_SURFACE 3
#define PSD_RP_CERDMC 4
#define PSD_RP_SPECTRO 5
#define PSD_RP_TEST 0

/* Receiver Bias Port */
#define PSD_RB_HEAD 4
#define PSD_RB_BODY 8
#define PSD_RB_SURFACE 16
#define PSD_RB_TEST 32

/* RF Board Type */
#define RF_BOARD_RRF 0
#define RF_BOARD_DCERD 1

/* RF Amp Type */
#define RF_AMP_SRFD2 10

/* Scan Rotation Scaling */
#define SHAREDROTSCALE 32752

/* Pre Defined Timing Constants */
#define TGAP 2

/* Screen Flag values */
#define PSD_OFF 0
#define PSD_ON 1

/* TE Button Control Values */
#define PSD_MINFULLTE -1
#define PSD_MINIMUMTE -2
#define PSD_FWINPHASETE	-3
#define PSD_FWOUTPHASETE -4
#define PSD_MAXIMUMTE -5

/* Automin TR Button Control */
#define PSD_MINIMUMTR -1

/* label control for ti buttons */
#define PSD_AUTO_TI -1
#define PSD_LABEL_TI_IR 0
#define PSD_LABEL_TE_PREP 1

/* label control for pause buttons */
#define PSD_LABEL_PAU_LOC 0
#define PSD_LABEL_PAU_REP 1
#define PSD_LABEL_PAU_ACQ 2

/* screen control for rbw buttons */
#define PSD_BW_SCREEN_SET 0
#define PSD_BW_SCREEN_TIM 1

/* Scan Clock Modes */
#define PSD_CLOCK_NORM 0
#define PSD_CLOCK_CARDIAC 1
#define PSD_CLOCK_PAUSE 2
#define PSD_CLOCK_CARDPAUSE 3

/* Cardiac Inter-Sequence Delay Defines */
#define PSD_CARD_INTER_OTHER 0
#define PSD_CARD_INTER_MIN 1
#define PSD_CARD_INTER_EVEN 2

/* Center Frequency Button Defines */
#define PSD_CFCURRENT 0
#define PSD_CFMID 1
#define PSD_CFH2O 2
#define PSD_CFFAT 3
#define PSD_CFPK 4
#define PSD_CFCENTROID 5

/* Rf pulse Activity bitmasks */
#define PSD_PULSE_OFF 0
#define PSD_CFL_ON 1
#define PSD_CFL_HAD 2
#define PSD_CFH_ON 4
#define PSD_CFH_HAD 8
#define PSD_MPS1_ON 16
#define PSD_MPS1_HAD 32
#define PSD_MPS2_ON 64
#define PSD_MPS2_HAD 128
#define PSD_APS1_ON 256
#define PSD_APS1_HAD 512
#define PSD_APS2_ON 1024
#define PSD_APS2_HAD 2048
#define PSD_SCAN_ON 4096
#define PSD_SCAN_HAD 8192
/*#define PSD_TEST_ON 16384
#define PSD_TEST_HAD 32768*/
#define PSD_FTG_ON  16384   /* merged 55 bch into vmx. YH 10/14/94 */
#define PSD_FTG_HAD 32768
#define PSD_AUS_ON 65536
#define PSD_AUS_HAD 131072
#define PSD_TEST_ON 262144
#define PSD_TEST_HAD 524288 /* merged 55 bch into vmx. YH 10/14/94 */
#define PSD_RCVN_ON  1048576   /* receiver noise */
#define PSD_RCVN_HAD 2097152
#define PSD_APA_ON 4194304
#define PSD_APA_HAD 8388608 /*APA addition */
#define PSD_XTG_ON  268435456
#define PSD_XTG_HAD 536870912

/* Type of phase generation for 
   altfrgen */

#define TYPLINEAR 0
#define TYPMFILE 1

/* Limit checks for advisory panel routines */
#define PSD_MIN3DSLICE 16
#define PSD_MINF3DSLICE 16
#define PSD_MIN3DPCSLICE 12
#define PSD_MINSLQPSLAB 16
#define PSD_MAXSLQPSLAB 256
#define PSD_MAXIMAGTYP 4

#define MAX_PASSES	1024

/* used for slice select external macro */
#define PLAY_GFILE 1
#define PLAY_TRAP 0
#define PLAY_RFFILE 1 /* merged 55 bch into vmx. YH 10/14/94 */
#define PLAY_SINC 0
#define PLAY_THETA 1
#define NO_THETA 0    /* merged 55 bch into vmx. YH 10/14/94 */

/* END - PSD - TGT common area */
/* Bitmask fields for explicit sat locations */
#define PSD_EXPLICIT_Z2 0x01
#define PSD_EXPLICIT_Z1 0x02
#define PSD_EXPLICIT_Y2 0x04
#define PSD_EXPLICIT_Y1 0x08
#define PSD_EXPLICIT_X2 0x10
#define PSD_EXPLICIT_X1 0x20

/* bits for opexsatmask */
#define PSD_EXPLICIT_1 0x01
#define PSD_EXPLICIT_2 0x02
#define PSD_EXPLICIT_3 0x04
#define PSD_EXPLICIT_4 0x08
#define PSD_EXPLICIT_5 0x10
#define PSD_EXPLICIT_6 0x20

/* bits for opexparal */
#define PSD_1_PARALLEL 0x01
#define PSD_2_PARALLEL 0x02
#define PSD_3_PARALLEL 0x04

/* Bitmask fields for rhvtype (vascular) */
#define VASCULAR   1                /* Vascular scan */
#define PHASE_CON  2                /* Phase contrast scan */
/** #define UNUSED    4             * Bit three currently unused */
#define TWO_SET    8                /* Two set processing */
#define ANTI_ALIAS 16               /* Anti alias algorithm */
#define PHASE_1    32               /* Phase correction bit 1 */
#define PHASE_2    64               /* Phase correction bit 2 */
#define NOISE_SUPP 128              /* Apply noise suppression mask */
#define MAGNITUDE  256              /* Display magnitude image */
#define PHYSICAL_X 512              /* Display physical x correction */
#define PHYSICAL_Y 1024             /* Display physical y correction */
#define PHYSICAL_Z 2048             /* Display physical z correction */
#define COLLAPSE_Z 4096             /* Collapse logical z image */
#define COLLAPSE_X 8192             /* Collapse logical x image */
#define COLLAPSE_Y 16384            /* Collapse logical y image */
#define VN_1SL_2ST 32768            /* Vinnie 1 slice, 2 set */
#define VN_1SL_4ST 65536            /* Vinnie 1 slice, 4 set */
#define VN_2SL_2ST 131072           /* Vinnie 2 slice, 2 set */
#define ANG_10_DEG 524288           /* Projections every 10 degrees */
#define ANG_5_DEG  1048576          /* Projections every 5  degrees */
#define NOISE2     2097152          /* Bit for complex difference */
#define LVSHIM     4194304          /* Bit for LVSHIM */
#define B1MAP      8388608          /* Bit for B1MAP */
#define PSMDE      16777216         /* Bit for PSMDE */

/* constants for vascular enhancements */
#define PHASEDIFF 0
#define COMPLEXDIFF 1
#define FLOWANALYS 2

/* Argument types for psdexit */
#define PSD_ARG_INT 1
#define PSD_ARG_FLOAT 2
#define PSD_ARG_STRING 3

/* Control Fields in SSP instruction */
#define PSD_CINE_BIT  0x800000
#define PSD_EXOR_BIT  0x400000
#define PSD_ISI2_BIT  0x080000
#define PSD_ISI1_BIT  0x040000
#define PSD_ISI0_BIT  0x020000
#define PSD_EFB_BIT   0x000080
#define PSD_UBL_RFMOD 0x000040
#define PSD_SCP_TRIG  0x000020
#define PSD_UBL_SPECT 0x000010
#define PSD_UBL_ERB   0x000008
#define PSD_MTX_UPDT  0x000004
#define PSD_WVE_CLR   0x000002
#define PSD_SLC_MARK  0x000001
#define PSD_SPUI_BIT  0x000100

/* System Update Times */
#define GRAD_UPDATE_TIME cfswgut
#define RF_UPDATE_TIME cfswrfut
#define SSP_UPDATE_TIME cfswssput

#define HW_GRAD_UPDATE_TIME cfhwgut
#define HW_RF_UPDATE_TIME cfhwrfut
#define HW_SSP_UPDATE_TIME cfhwssput

/* Minimum width of the middle part of the trapezoid in microseconds */
#define MINPW_MIDDLE 20

/* Macros for rounding up or down to a gradient or RF boundary */
/* These macros are also defined in supp_macros.h. Let's check for
   multiple definitions. - GFN - 21/Sep/1997 */

#ifndef RUP_GRD 
#define RUP_GRD(A)  ( (GRAD_UPDATE_TIME - ((int)(A)%GRAD_UPDATE_TIME))%GRAD_UPDATE_TIME + (int)(A))
#endif /* RUP_GRD */

#ifndef RDN_GRD
#define RDN_GRD(A)  ( (int)(A)-(int)(A)%GRAD_UPDATE_TIME)
#endif /* RDN_GRD */

#ifndef RUP_RF
#define RUP_RF(A)  (((A)%RF_UPDATE_TIME) ? (int)((A) + RF_UPDATE_TIME) & ~(RF_UPDATE_TIME - 1) : (A))
#endif /* RUP_RF */

#ifndef RDN_RF
#define RDN_RF(A)  ((int)(A) & ~(RF_UPDATE_TIME -1))
#endif /* RDN_RF */

/* Intended only for integer arguments : FEC */
#ifndef CEIL_DIV
#define CEIL_DIV(A,B) (((A)+(B)-1)/(B))
#endif /* CEIL_DIV */

/* Intended only for integer arguments : FEC */
#ifndef FLOOR_DIV
#define FLOOR_DIV(A,B) ((A)/(B))
#endif /* FLOOR_DIV */

/* FEC : nMR */
#ifndef RUP_FACTOR
#define RUP_FACTOR(N,FACT) (CEIL_DIV(N,FACT) * (FACT))
#endif /* RUP_FACTOR */

/* FEC : nMR */
#ifndef RDN_FACTOR
#define RDN_FACTOR(N,FACT) (FLOOR_DIV(N,FACT) * (FACT))
#endif /* RDN_FACTOR */

/* FEC : nMR */
#ifndef FS_SCALEUP
#define FS_SCALEUP(fs)     ((float ) 15000/(float ) (fs)) 
#endif  /* FS_SCALEUP */

/* FEC : nMR */
#ifndef FS_SCALEDOWN
#define FS_SCALEDOWN(fs)   ((float ) (fs)/(float ) 15000) 
#endif  /* FS_SCALEDOWN */

#define MIN_PLATEAU_TIME (2*GRAD_UPDATE_TIME)

/* Theta path frequency path multiplier */
#define PSD_THETAFREQ_SHIFT 4

/* TGT Instruction Size Allocations */
#define PSD_GRADX_INSTR_SIZE  4096 
#define PSD_GRADY_INSTR_SIZE  4096 
#define PSD_GRADZ_INSTR_SIZE  4096 
#define PSD_RHO1_INSTR_SIZE   4096 
#define PSD_RHO2_INSTR_SIZE   4096 
#define PSD_THETA_INSTR_SIZE  4096 
#define PSD_OMEGA_INSTR_SIZE  4096 
#define PSD_SSP_INSTR_SIZE    8192 
#define PSD_AUX_INSTR_SIZE     64

/* TGT Exit Codes */
#define ERRNONE 0 /* Normal error */

/* VRG pulse Resolutions */
#define RES_VRG_GRD 256
#define RES_VRG_RF1 512
#define RES_VRG_RF2 512
#define RES_NVRG_RF1 800
#define RES_NVRG_RF2 400
#define PSD_TRMIN 18000


/* CV limit constants */
#define FOV_MIN_LX 1/*MFO2 10/31/01 AY*/
#define FOV_MIN 1
#define FOV_MIN_VMX 30
#define FOV_MIN_PROFILE 80        /* profile 09/11/95 NM */
#define FOV_MAX 500
#define FOV_MAX_VMX 450
#define FOV_MAX_PROFILE 400       /* profile 09/11/95 NM */
/* maximal FOV for axial scan with the zoom gradient is 44 cm (May 17, 2001)*/
#define FOV_MAX_ZOOM 440    /* for zoom coil of twin gradients (GT)*/
#define PSD_GRXROI_LEN 640.0
#define PSD_SEQMODE_OFF 0
#define ILIRMODE PSD_SEQMODE_OFF
#define MIN_TDEL1 10
#define MIN_SEQ_SYS 100 
#define MAX_TDEL1 1600000
#define MIN_RESP_POINT 10
#define MAX_RESP_POINT 90
#define MIN_RESP_WINDOW 10
#define MAX_RESP_WINDOW 90
#define MAX_CINE_PHASES 32
#define MAX_CINE_SLICES 4
#define MAX_STHICK 200.0
#define MAX_SLICE3D 256
#define MAXTHICK 20
#define MAXVTHICK 1280
#define MAXVQUANT 64
#define MIN_OFFSET -255
#define MIN_SLOC -12000
#define MIN_STHICK 10.0
#define MINTHICK 0.1
#define MINTHICK_VMX 2.7
#define NEX_MAX 200
#define NECHO_MIN 1
#define NECHO_MAX 4
#define NOIRMODE 0
#define PSD_NECHO_MAX 1024
#define PSD_SEQMODE_ON 1
#define SIRMODE PSD_SEQMODE_ON
#define SHORT_TE 22000
#define TE_MIN 8 
#define TE_MAX 2000000
#define TE2_MIN 20000
#define TI_MIN 50000
#define TI_MAX 4000000
#define TRECOVERY_MIN 0
#define TRECOVERY_MAX 10000000
#define TLABEL_MIN 1000000
#define TLABEL_MAX 3000000
#define TLABEL_DEF 2000000
#define TR_MIN 100
#define TR_MAX 15000000
#define XRES_MAX 2048 
#define YRES_MAX 2048 
#define MAXSLQUANT3D 256
#define MAXSLQUANT2D GEMRI_MAXNOSLICES
#define PSD_HNOVER 8
#define PHASES_MIN 1
#define PHASES_MAX 512
#define PSD_MINTEFULL 1
#define PSD_MINTE 2
#define PSD_FWINPHS 3
#define PSD_FWOUTPHS 4
#define PSD_MAXTE 5
#define PSD_TDEL1_MINIMUM 1
#define PSD_TDEL1_RECOMMENDED 2
#define PSD_TDEL1_SYSTOLIC 3
#define PSD_TDEL1_DIASTOLIC 4

/* Fat/Water in Phase Range Limits */
#define PSD_LLIMTEIN1  4200 
#define PSD_ULIMTEIN1  6000 
#define PSD_LLIMTEIN2  8500 
#define PSD_ULIMTEIN2  10000 
#define PSD_LLIMTEIN3  13000 
#define PSD_ULIMTEIN3  TE_MAX

/* Fat/Water out of Phase Range Limits */
#define PSD_LLIMTEOUT1  1800 
#define PSD_ULIMTEOUT1  2800 
#define PSD_LLIMTEOUT2  6300 
#define PSD_ULIMTEOUT2  7300 
#define PSD_LLIMTEOUT3  10800 
#define PSD_ULIMTEOUT3  12000 

/* Tensor related Limits */
/* moved tensor related limits from epic.h to /vobs/lx/slice_factor.h
 * since they are shared by PSD and recon  MRIhc08446
 * */

/* Fat/Water out of Phase Range Limits. Feb 98 MM *//* MFO Hino 06/28/00 YI */
#define PSD_LLIMTEOUT1_VMX  6710   /* 3.5ppm chemical shift. 0.5 T system */
#define PSD_ULIMTEOUT1_VMX  7110   /* 3.3ppm chemical shift. 0.5 T system */
#define PSD_LLIMTEOUT2_VMX  PSD_LLIMTEOUT1_VMX * 3
#define PSD_ULIMTEOUT2_VMX  PSD_ULIMTEOUT1_VMX * 3
#define PSD_LLIMTEOUT3_VMX  PSD_LLIMTEOUT1_VMX * 5
#define PSD_ULIMTEOUT3_VMX  PSD_ULIMTEOUT1_VMX * 5
/* Fat/Water in Phase Range Limits */
#define PSD_LLIMTEIN1_VMX   PSD_LLIMTEOUT1_VMX * 2
#define PSD_ULIMTEIN1_VMX   PSD_ULIMTEOUT1_VMX * 2
#define PSD_LLIMTEIN2_VMX   PSD_LLIMTEOUT1_VMX * 4
#define PSD_ULIMTEIN2_VMX   PSD_ULIMTEOUT1_VMX * 4
#define PSD_LLIMTEIN3_VMX   PSD_LLIMTEOUT1_VMX * 6
#define PSD_ULIMTEIN3_VMX   PSD_ULIMTEOUT1_VMX * 6
/* end MFO */

/* fat water recon cv(rhfatwater) control flag *//* MFO 03/28/2001 MM */
#define FATWATER_OFF          0
#define WATER_IMAGE           0x0001
#define FAT_IMAGE             0x0002
#define ORIGINAL_IMAGE        0x0004
#define FW_FAT_WATER_SWAP     0x0008  /* swap real and imag */
/* MRIhc06477 */
#ifndef FW_1_4_PI_PHASE_DIFF
#define FW_1_4_PI_PHASE_DIFF  0x0010  /* 2*PI/8 phase difference */
#endif
#ifndef FW_2_3_PI_PHASE_DIFF
#define FW_2_3_PI_PHASE_DIFF  0x0020  /* 2*PI/3 phase difference */
#endif
#ifndef FW_1_3_PI_PHASE_DIFF
#define FW_1_3_PI_PHASE_DIFF  0x0040  /* 2*PI/6 phase difference */
#endif
/* MRIhc06477 */

#define FATWATER_SHIFT_1_4_PI_MFO   2880 /* theoretical value is 2500 */
#define FATWATER_SHIFT_1_3_PI_MFO   3700 /* theoretical value is 3333 */
#define FATWATER_SHIFT_1_2_PI_MFO   5376 /* theoretical value is 5000 */
#define FATWATER_SHIFT_2_3_PI_MFO   7040 /* theoretical value is 6666 */

/* HFO fatwater defines. YMSmr05141. Dec 05 2003. MM */
#define FATWATER_SHIFT_2_PI_HFO     9900 /* 2PI phase shift time */
#define FATWATER_SHIFT_1_4_PI_HFO   1344 /* theoretical value is 1238 */
#define FATWATER_SHIFT_1_3_PI_HFO   1752 /* theoretical value is 1667 */
#define FATWATER_SHIFT_1_2_PI_HFO   2576 /* theoretical value is 2475 */
#define FATWATER_SHIFT_2_3_PI_HFO   3408 /* theoretical value is 3300 */

/* Profile 5 fatwater defines. YMSmr*** Apr 22 2004. MM */
#define FATWATER_SHIFT_1_4_PI_LFO   4932 /* theoretical value is  4375 */
#define FATWATER_SHIFT_1_3_PI_LFO   6376 /* theoretical value is  5833 */
#define FATWATER_SHIFT_1_2_PI_LFO   9264 /* theoretical value is  8750 */
#define FATWATER_SHIFT_2_3_PI_LFO  12152 /* theoretical value is 11667 */

/* RV: Dixon frequency shift definition for 1.5T */
#define FATWATER_DIXFREQ_1_5T       210 /* value in Hz */
#define SILICONEWATER_DIXFREQ_1_5T  310 /* value in Hz */

/* for coil option check *//* MFO 10/02/01 YI */
#define SEC_CODE_INIT -1

/* ************************************************
   CV Processing, Predownload, and RSP
   Initialization Routines

   Structures and Constants 
   
* ************************************************ */
/* Number of entries in data acq table */
#define DATA_ACQ_MAX GEMRI_MAXNOSLICES
#define TRIG_ROT_MAX 2*DATA_ACQ_MAX /* double to accomodate graphic sat */
#define PRESCAN_ROT_MAX 1           /* MRIge43968: only one for Prescan */ 
#define RHF_MAX_IMAGES_MULTIPHASE 10000 /* Max images for a multiphase scan*/

/* Misc. constants */
#define TARDIS_FREQ_RES 0.59604648

/* Acquisition Types */
#define TYPSPIN 0   /* Spin Echo */
#define TYPGRAD 1   /* Gradient Recalled */

/* Define Types */
#define TYPNDEF 0   /* Don't caculate */
#define TYPDEF 1    /* Calculate */

/* Sequence  Types */
#define TYPNCAT      0   /* Normal, Non CATSAT */
#define TYPCAT       1   /* CATSAT */
#define TYPXRR       2   /* Cross R-R Imaging */
#define TYPMPMP      3   /* Multiphase multiplanar cardiac */
#define TYPSSMP      4   /* Single Slice Multiphase */
#define TYP3D        5   /* Volume scanning */
#define TYPNORMORDER 6   /* Straight physical order for slices */
#define TYPFASTMPH   7   /* for FGRE MPH slice ordering */
#define TYPF3D       8   /* Fast Volume Scanning */
#define TYP3DMSNCAT  9   /* 3D Multislab non-concat */
#define TYP3DMSCAT  10   /* 3D Multislab concat */
#define TYP3DFSENCAT 11   /* 3D Fast Spin Echo non-concat */
#define TYP3DFSECAT  12   /* 3D Fast Spin Echo concat */
#define TYPRTG       13   /* Respiratory Trigger */
#define TYPF3DMPH    14   /* Fast, Multi-phase 3D */
#define TYPSSFSEINT  15   /* Interleaved slice acq. in ssfse */
#define TYPSSFSESEQ  16   /* Sequential slice acq. in ssfse */
#define TYPSSFSEXRR  17   /* XRR for ssfse */
#define TYPSSFSERTG  18   /* RTG for ssfse */
#define TYPSEQSLIC   19   /* Sequential Slice Ordering */
#define TYPF3DMSMPH  20   /* 3D Multislab Multiphase - added for 3d oblique */
#define TYPSSFSEFLAIR 21  /*Does 2-acq TYPNCAT ordering in a single acq.*/
#define TYPMAVRIC     22  /* Add for MAVRIC*/
#define TYPNCATFLAIR 23  /* Sequential Slice Ordering for Optimized 2D T2FLAIR */

/* Echo Type */
#define TYPNVEMP 0     /* Normal */
#define TYPVEMP  1     /* VEMP sequence */

/* Resp Comp Type */
#define TYPNORM   0  /* Normal phase ordering */
#define TYPLSORT  1  /* Low Sort Exorcist */
#define TYPHSORT  2  /* High Sort Exorcist */
#define TYPAHSORT 3  /* Average High Sort */

/* Frequency generation type */
#define TYPTRANSMIT   0  /* Generate Transmit frequencies */
#define TYPREC        1  /* Receive frequency */
#define TYPRECGRDEVEN 2  /* Gradient Recall Even echo freq */
/*  following sentences are 5.5 changes. YH 10/14/94 */
#define TYPFASTREC        3 /* Receive frequency - research
                               fast recvr */
#define TYPFASTRECGRDEVEN 4 /* Gradient Recall Even echo freq - research
                                                          fast recvr */

/* Crusher Generation types */
#define PSD_TYPCMEMP 0
#define PSD_TYPCCSMEMP 1
#define PSD_TYPCFCMEMP 2
#define PSD_TYPCPOMP 3
#define PSD_TYPCFCPOMP 4


/* Chopping Codes */
#define CHOP_BL 0    /* Chopper state: chop only baselines (<1NEX) */
#define CHOP_ALL 1   /* Chopper state: chop all views (>1NEX) */
#define CHOP_NONE 2  /* Chopper state: chop nothing */

/* Autoshim constants */

/* Dab Operations */
#define DABSTORE 0    /* DAB operation to store xcvr data */
#define DABADD 1     /* DAB operation to accumulate data */
#define DABSUBCNTS 2  /* DAB operation to subtract contents from xcvr data */
#define DABSUBXCVR 3   /* DAB operation to subtract xcvr data from contents */
#define DABRECLEN 2048

/* Recon Types */
#define RHTYPCHP 1       /* For setting Chop bit in rhtyp */
#define RHTYPCINE  2
#define RHTYPSHIM  4
#define RHTYPGR    8
#define RHTYPFRACTNEX  16
#define RHTYPSTRIP    32
#define RHTYP3D    64
#define RHTYPXOR  128
#define RHTYPNPW   256
#define RHTYPNFW  512
#define RHTYPXSTRIP 1024 /* For strip scan in X direction */
#define RHTYPFRACTECHO 2048
#define RHTYP75NEX  8192
#define RHTYPPOMP  16384   /* For setting POMP bit in rhtype */
#define RHTYPTURBO  32768	/* For setting turbo bit in rhtype */

/* More recon types, used in rhtype1 */
#define RHTYP1HOMODYNE 1  /* indicates homodyne processing */
#define RHTYP1NEXA 2 /* indicated that the nex abort table will be
                       used to store the nex values during the collection
                       of the 2nd echo.
                       Normally used for Odd Nex Fast Spin Echo scans
                       with two echoes. */
#define RHTYP1CINEODDNEX 4
#define RHTYP1SFRAME 8  /*  for 64kHz bandwidth multi-coil norec
                           superframe processing */
#define RHTYP3DM 16    /* 3D multi-slab */
#define RHTYP13DM 16    /* 3D multi-slab */
#define RHTYPMAXOVL 32 /* maximum intensity pixel collapse overlap processing */
#define RHTYP1MAXOVL 32 /* maximum intensity pixel collapse overlap processing */
#define RHTYPMINOVL 64 /* minimum intensity pixel collapse overlap processing */
#define RHTYP1MINOVL 64 /* minimum intensity pixel collapse overlap processing */
#define RHTYPAVEOVL 96  /* average intensity pixel collapse overlap processing */
#define RHTYP1AVEOVL 96  /* average intensity pixel collapse overlap processing */
#define RHTYP1FPHASEOFF 128
#define RHTYP1AUTOPASS 256
#define RHTYP1IMGNEX 512
#define RHTYPSPIRAL 1024
#define RHTYP1SPIRAL 1024
#define RHTYP1FVRGF 2048
#define RHTYP1RCALLPASS 4096 /* do not skip any passes */
#define RHTYPLINE   8192    /* MFO2. For Line scan diffusion */
#define RHTYP1LINE   8192    /* MFO2. For Line scan diffusion */
#define RHTYPLSDI   8192 /* LSDI */ /* HFO3 merge 02/18/2003 YI */
#define RHTYP1LSDI   8192 /* LSDI */ /* HFO3 merge 02/18/2003 YI */
#define RHTYPECTRICKS 16384 /* rhtype1 upto 8192 is used in rdbm.h  KVA */
#define RHTYP1PCORVRGF 32768 /* VRGF processing after phase correction */
#define RHTYP10ROWENDS 65536 /* zero out row ends */
#define RHTYPRETRO_PC  131072 /* HFO4 merge RETRO PC for FSE. MM */
#define RHTY1PRETRO_PC  131072 /* HFO4 merge RETRO PC for FSE. MM */
#define RHTYP1BAM0FILL  262144 /* zero fill bam before start of acq */
#define RHTYP1SUPPORT  524288 /* Support raw data server */
#define RHTYP1INITPATH  1048576 /* Set if initial data path is raw data server */
#define RHTYP1DIFFUSIONEPI  2097152 /* Difusion EPI */
#define RHTYP13DGRADWARP 4194304 /* 3D gradwarp */
#define RHTYP13DASL 8388608 /* 3D ASL */
#define RHTYP1RADIAL3D  16777216    /* RADIAL 3D */
#define RHTYP1CMPLXIMGNEX 33554432 /* Complex average (as opposed to magnitude
			              averaging with RHTYP1IMGNEX) */

/* *****************************
   Defines for rhrcctrl
   ***************************** */
#define RHRCMAG                  1   /* 0x0001 magnitude images   */
#define RHRCPHS                  2   /* 0x0002 phase images       */
#define RHRCIMAG                 4   /* 0x0004 I magnitude images */
#define RHRCQMAG                 8   /* 0x0008 Q magnitude images */
#define RHRCCOMP                16   /* 0x0010 compressed images  */
#define RHRCGRID_ON             32   /* 0x0020 */
#define RHRCRAW                128   /* 0x0080 raw image recon */
#define RHRCSKIP_ROW_FFT       256   /* 0x0100 */
#define RHRCSKIP_COL_FFT       512   /* 0x0200 */
#define RHRCSKIP_HALF_FOURIER 1024   /* 0x0400 */
#define RHRCSKIP_FERMI        2048   /* 0x0800 */
#define RHRCSKIP_NEX_SCALE    4096   /* 0x1000 */
#define RHRCSKIP_IMAGE_SCALE  8192   /* 0x2000 */
#define RHRCSKIP_3DJOB_FFT   16384   /* 0x4000 */

/* *****************************
   Defines for rhdacqctrl
   ***************************** */
#define RHDC_RAWDATA                 1   /* 0x0001 true raw data */
#define RHDC_EEPF                    2   /* 0x0002 even echo phase flip */
#define RHDC_OEPF                    4   /* 0x0004 odd echo phase flip */
#define RHDC_EEFF                    8   /* 0x0008 even echo freq flip */
#define RHDC_OEFF                   16   /* 0x0010 odd echo freq flip */
#define RHDC_RAW_EXCLUDE_SSP        32   /* 0x0020 drop SSP info from raw */
#define RHDC_RAW_BUFFER_WRAP        64   /* 0x0040 circular raw data buffer */
#define RHDC_CARDIAC_MMODE         256   /* 0x0100 cardiac monitor mode */
#define RHDC_FAST_CINE             512   /* 0x0200 fast CINE mode */
#define RHDC_FCINE_ET             1024   /* 0x0400 fast CINE echotrain mode */
#define RH_FCINE_ET               1024   /* fcine Echotrain data acq. */
#define RHDC_CERD_PASS_THROUGH    2048   /* 0x0800 pass through filter */
#define RH_PASS_THROUGH_CERD_FLAG 2048   /* passthrough data acq. */
#define RHDC_CERD_CONST_FILTER    4096   /* 0x1000 no filter switching */
/* MRIhc06477 */
#ifndef RDB_CERD_CONSTANT_FILTER
#define RDB_CERD_CONSTANT_FILTER  4096   /* MRIge61411  */
#endif

/* *****************************
   Defines for rhdiskacqctrl
   ***************************** */
#define RDB_DISK_ACQ_OVERFLOW     0x00000001 /* 1 enable acq to disk overflow */
#define RDB_DISK_ACQ_RAW_CAPTURE  0x00000002 /* 2 enable raw frame and control capture */

/* ************************************
   Defines for rhchannel_combine_method
   ************************************ */
#define RHCCM_SUM_OF_SQUARES 0
#define RHCCM_COMPLEX_COMBINE 1

#define PMFULL 255       /* Full scale power monitor.
                          * Power monitor values are scaled to this */
#define PMTYP_2CHANNEL 0     /* Old, 2-channel power monitor */
#define PMTYP_3CHANNEL 1     /* 3-channel ERBTEC power monitor */
#define PMTYP_VMX 2          /* VMX Power Monitor */
#define PMTYP_UPM 3          /* Universal Power Monitor Hardware */
#define PMTYP_UPMLEGACY 3    /* Universal Power Monitor in Legacy mode */
#define PMTYP_UPMAVERAGE 4   /* Universal Power Monitor in Average mode */

/* Number of Exciters in the system */
#define MAX_NUM_EXCITERS 2
#define EXCITER_INDEX_RHO1 0
#define EXCITER_INDEX_RHO2 1

/* 
   GRAD_PULSE structure is used by a variety of support routines, as
   a convenient method of passing pulse object parameters.  The PSD
   must keep track of the type and quantity of grad pulses used.
  */  /* merged 55 bch into vmx. YH 10/14/94 */
/* 3/13/95 YI changed for new system safety */

typedef struct {
  int ptype;      /* gradient Type (e.g. ramp, constant, trapezoid, etc.) */
  int *attack;    /* pulse width of attack for trapezoidal pulses */
  int *decay;     /* pulse width of decay for trapezoidal pulses */
  int *pw;        /* pulse width (if trapezoidal, pulse width of center
                                         section) */
  float *amps;    /* starting amplitude of a trapezoidal pulse */
  float *amp;     /* amplitude (if trapezoidal, amplitude of ramp and left
                                         side of flat top) */
  float *ampd;    /* starting amplitude of decay ramp and right side amplitude
                                         of flat top for trapezoidal pulse */
  float *ampe;    /* ending amplitude of a trapezoidal pulse */
  /* old location of "float power" field  */
  char *gradfile; /* external grad filename */
  int num;        /* quantity of this gradpulse used */
  float scale;    /* gradient heating scale factor (e.g. phase encoding) */
  /* time and tdelta are for future use: */
  int *time;      /* location of pulse in time */
  int tdelta;     /* Time delta in microseconds in between multiple occurances
                                         of the pulse */
  float powscale; /* gradient driver current scale factor
                                     (<x,y,z>fs/target)      */
  /* For internal pulses, the function minseqgrddrv computes and fills in the
         following fields. They are NOT scaled by the powscale field.
         For external pulses, the programmer must fill these in with the 
         appropriate pulse properties. Note: for external pulses, the values
         must be normalized by the pulse width and the square of the 
         amplitude.                                          */
  float power;    /* total power in units of Ampere^2 usec   */
  float powpos;   /* positive power in units of Ampere^2 usec  */
  float powneg;   /* negative power in units of Ampere^2 usec  */
  float powabs;   /* absolute power in units of Ampere usec    */
  float amptran;  /* ampere transitions in units of Ampere     */
  int pwm;      /* pulse width modulation time               */
  int bridge;     /* bridge flag: 1 -- left or right crusher; 
                                  2 -- 180 slice select; 
                                  0 -- no bridge.   */ 
  float intabspwmcurr; /* Integral of the absolute value of the
                          current during the ramps. This is used for
                          gradient heating with SGD */
} GRAD_PULSE;   /* merged 55 bch into vmx. YH 10/14/94 */

typedef char EXTERN_FILENAME[80];
typedef char *EXTERN_FILENAME2;
/*
  Constants below are used above for the field ptype
*/

#define G_RAMP 1
#define G_TRAP 2
#define G_SIN  3      /* Half sin , 0 offset */
#define G_CONSTANT 4
/*#define G_SINPHASE 5 */ /* Phase encoding sin wave 
		        (varying amplitude ) */
#define G_ARBTRAP 5 /* Trapezoid with arbitrary start and
                       ending amplitudes and a possible
                       slope to the middle portion of the waveform */
#define G_USER 6     /* User defined.  Use power field. */
#define G_EMPTY -1   /* instructs CV routine to ignore this struct */

/* merged 55 bch into vmx. changed from 25 to 50. YH 10/14/94 */
#define MAX_GRADX_NUM 50 
#define MAX_GRADY_NUM 50
#define MAX_GRADZ_NUM 50
#define MAX_RFPULSE_NUM 50

/* 
  Structure RF_PULSE is used by the rf amplifier heating calcs
  and SAR calcs.  PSD keeps track of the type and quantity of 
  RF pulses used.

  isodelay structure tag is now provided and is intended to
  replace usage of the off90 CV.  It is the time from the zero
  phase reference of the pulse (where gradient phase bookkeeping begins)
  to its end.
  */

/* 3/13/95 YI  changed for new system safety */

typedef struct {
  int *pw;        /* pulse width */
  float *amp;     /* amplitude */
  float abswidth; /* calculated RF absolute width */
  float effwidth; /* calculated RF effective width */
  float area;     /* zero momemt of pulse */ 
  float dtycyc;   /* max % of pulse width above 23% and in any 1  lobe */
  float maxpw;    /* max % of time rf pulse is above 0 amp */
  int num;        /* quantity of this type of RF pulse */
  float max_b1;   /* peak B1 in G under standard conditions */
  float max_int_b1_sq;   /* peak integral B1^2 in GG-msec under standard conditions */
  float max_rms_b1;      /* peak RMS B1 in G under standard conditions */ 
  float nom_fa;   /* flip angle on resonance under standard conditions. */
  float *act_fa;  /* desired flip angle */
  float nom_pw;   /* pulse duration under standard conditions */
  float nom_bw;   /* pulse bandwidth under standard conditions */
  unsigned int activity; /* bitmask showing when pulse is used */
  unsigned char reference; /* flag for pulse used in TG setting */
  int   isodelay; /* time in usec from the zero phase reference of pulse
				     to its end*/
  float scale;    /* duty cycle scale factor */
  int *res; /* pulse resolution *//* vmx 3/13/95 YI changed from short to int */
  int extgradfile; /* TRUE = rfpulse uses external gradient waveform file */
  int *exciter; /* waveform generator (e.g., TYPRHO1 or TYPRHO2) */
} RF_PULSE;

/* 3/13/95 YI  added for new system safety */

/*********************************************************************
 * Structure RF_PULSE_INFO is used by HOST and TGT to track rf pulse
 * scaling and resolution when large patients cause system safety
 * violations. See 5.5 PSD SYSTEM SAFETY SDD for more specific explanation.
 * The structure is defined in @ipgexports, initialized in HOST by
 * scalerfpulses(), and used by TGT in pulsegen to scale rfpulses using
 * linear interpolation in stretchpulse() routine.
 *********************************************************************/
typedef struct {
  int  change;  /* PSD_ON: rfpulse scaling required, PSD_OFF: no scaling required */
  int  newres;  /* scaled resolution of rfpulse if maxB1 of rf amplifier violated */
} RF_PULSE_INFO;


/* Pulse activity masks */
#define PULSE_OFF 0
#define CFL_ON 1
#define CFL_HAD 2
#define CFH_ON 4
#define CFH_HAD 8
#define MPS1_ON 16
#define MPS1_HAD 32
#define MPS2_ON 64
#define MPS2_HAD 128
#define APS1_ON 256
#define APS1_HAD 512
#define APS2_ON 1024
#define APS2_HAD 2048
#define SCAN_ON 4096
#define SCAN_HAD 8192
/*#define TEST_ON 16384
#define TEST_HAD 32768*/
#define FTG_ON  16384  /* merged 55 bch into vmx. YH 10/14/94 */
#define FTG_HAD 32768
#define AUS_ON 65536
#define AUS_HAD 131072
#define TEST_ON 262144
#define TEST_HAD 524288 /* end of 5.5 changes. */
#define RCVN_ON  1048576   /* receiver noise */
#define RCVN_HAD 2097152
#define APA_ON 4194304
#define APA_HAD 8388608 /* APA addition  */
#define XTG_ON  268435456
#define XTG_HAD 536870912

/* Ramp pulse directions */
#define PSD_POSRAMP 1
#define PSD_NORAMP 0
#define PSD_NEGRAMP -1

/* constants for TRAPEZOID2 macro */
#define TRAP_RAMPA 1
#define TRAP_CONST 2
#define TRAP_RAMPD 4
#define TRAP_SLOPED 8
#define TRAP_ALL 7
#define TRAP_ALL_SLOPED 15
/* Ratio of trapezoidal phase encoding flattop amplitudes.
   Equalt to 1.0 - 64.0/max_pg_wamp */
#define PSDRAMPEDTRAP 0.998047

#define PHASESTEP32 32

/* constants for slice quantity */
#define PSD_SLQUANT8 8
#define PSD_SLQUANT16 16
#define PSD_SLQUANT32 32
#define PSD_SLQUANT64 64
 
/* Default number of filter prefills */
#define DEFPREFILLS 129
 
/* opbloptimize defines */
#define PSD_OBL_RESTRICT 0
#define PSD_OBL_OPTIMAL 1

/* echo planar constants ***************************//* 3/13/95 YI */

/* k-space trajectory constants */
/* These indicate sense (or direction) only */
#define PSD_TOP_DOWN 0    /* top-to-bottom */
#define PSD_CENTER_OUT 1  /* center-to-top/center-to-bottom */
#define PSD_BOTTOM_UP 2   /* bottom-to-top */

/* ky fraction constants */
#define PSD_FULL_KY 0
#define PSD_FRACT_KY 1

/*fMRI paradigm type*/
#define SIMPLE_BLOCK 0
#define INTERLEAVE_BLOCK 1 
#define COMPLEX_BLOCK 2 
#define EVENT_RELATED 3 

/* alternation factor constants */
#define PSD_ALT_NONE 0
#define PSD_ALT_ODD_EVEN 1
#define PSD_ALT_HALVES 2
#define PSD_ALT_SUBGROUPS 3
/* end echo planar constants ***************************/

#define PSD_FRONT_LOADED_SLICE_SORT 0
#define PSD_DISTRIBUTED_SLICE_SORT  1
 
/* GRAM IDENTIFIERS */
#define PSD_NOGRAM      0
#define PSD_GRAM1       1
#define PSD_GRAM2       2
 
/* SR modes */
#define PSD_SR17     17
#define PSD_SR20     20
#define PSD_SR25     25
#define PSD_SR33     33
#define PSD_SR40     40
#define PSD_SR50     50
#define PSD_SR77     77
#define PSD_SR100   100   /* XFD */
#define PSD_SR120   120
#define PSD_SR150   150
#define PSD_SR200   200   /* XRMB */
#define PSD_SR230   230

/* SR amplitude factors  - used to scale loggrd structure */
#define SR17_FACTOR     0.95
#define SR20_FACTOR     1.0
#define SR50_FACTOR     1.0
#define SR77_FACTOR     1.0
#define SR120_FACTOR    1.0
#define SR230_FACTOR    1.0

/* For TRM type (Twin gradient coils)- define which coil is used */
#define TRM_BODY_COIL 1  
#define TRM_ZOOM_COIL 2  

 /* bit map of GRAM axis for sigrammode  *//* 3/13/95 YI */
#define XGRAM 1  /* X GRAM */
#define YGRAM 2  /* Y GRAM */
#define ZGRAM 4  /* Z GRAM */

/*
  Structure to record each slice's loacation,  receive offset 
  location, and rotation matrix.
  */

typedef struct {
  float rsptloc;   /* location in mm from isocenter */
  float rsprloc;   /* receive location in mm */
  float rspphasoff; /*distance in mm from isocenter in the phase direction*/
  int slloc;       /* prescribed location */
 } RSP_INFO;

/*
  Structure to record entry point specific enformation for the power
  monitor and receiver/exciter setup. Found in lx/include. Has the
  type definition for ENTRY_POINT_TABLE (entry_point_table_t).
  */

#include <entrypttab.h>

/* Definitions for disabling the cross term factors coming
   FROM a particular port in the universal power monitor. */
#define UPM_DISABLE_BODY_CROSS_TERM 1
#define UPM_DISABLE_TR_CROSS_TERM 2
#define UPM_DISABLE_SPECTRO_CROSS_TERM 4
#define UPM_DISABLE_CW_CROSS_TERM 8
#define UPM_DISABLE_OTHER_METER 16
#define UPM_DISABLE_EXTREMITY_METER 32
#define UPM_DISABLE_HEAD_METER 64
#define UPM_DISABLE_BODY_METER 128


/*
  Structure below is used for filters
*/

typedef struct { 
  float decimation;    /* Filter decimation */
  int tdaq;            /* time for data acquisition in microseconds */
  float bw;            /* bandwidth in KHz */
  float tsp;           /* output sample period (us) */
  int fslot;           /* slot for  real-time filters*/
  int outputs;         /* Number of output points */
  int prefills;        /* Number of prefills to use */
  int taps;            /* Number of taps to use */
  } FILTER_INFO;

/* phase offset structure and vars.  Prior to release 5.5, this
   was declared in each individual psd */
/*  array to store calculated phase offset and sign */
typedef struct {
    int ysign;  /* sign of the phase offset */
    int yoffs;  /* calculated phase offset from rsp_info structure */
} PHASE_OFF;

/* MRIge91352 - SAR/dbdt changes for E3 */

/* Macro to get the Reilly mode */
#define GET_REILLY_MODE ((MHW2_BODY == cfgovbody) ? RECTANGULAR_MODE : CONVOLUTION_INTEGRAL_MODE )

/*---------------------------------------------------------------------
 | rhformat
 | Define bits for the FORMAT offset in the RDBM hdr. These define 
 | various non-data related processes which may be turned on or off 
 | just for fun. These bits may be added together to form a 16-bit    
 | bitmask.  Please note that these must match the RDB_ prefix
 | definitions in rdbm.h.
 ---------------------------------------------------------------------*/
#define RHF_NO_GRADWARP                0x0001	/* 1     */
#define RHF_NO_FERMI                   0x0002	/* 2     */
#define RHF_ZCHOP                      0x0004	/* 4     */
#define RHF_YCHOP                      0x0008	/* 8     */
#define RHF_IIC                        0x0010	/* 16    */
#define RHF_CSI                        0x0020	/* 32    */
#define RHF_HS                         0x0040	/* 64    */
#define RHF_SPECTRO                    0x0080   /* 128   */
#define RHF_IMAGE_CHECKSUM             0x0100   /* 256   */
#define RHF_NOREC_CHECKSUM             0x0200   /* 512   */
#define RHF_GRADWARP_USE_FILE          0x0400   /* 1024  */
#define RHF_USE_FLIPTABLE              0x0800   /* 2048  */
#define RHF_CERD_USE_FLIP_SSP          0x1000   /* 4096  */
#define RHF_PSIR_CORRECTION            0x2000   /* 8192  */  /* AF 03/22/01 MRIge65182 */
#define RHF_SINGLE_PHASE_INFO          0x4000   /* 16384 */ /* For > 1024 im/ser */

/*---------------------------------------------------------------------
 | rhexecctrl
 | Control bit definitions for what results the tps will transfer to the host.
 ---------------------------------------------------------------------*/
#define RHXC_AUTO_DISPLAY               0x0001	/* 1 */
#define RHXC_AUTO_LOCK                  0x0002	/* 2 */
#define RHXC_AUTO_PERM                  0x0004	/* 4 */
#define RHXC_XFER_IM                    0x0008	/* 8 */
#define RHXC_SAVE_IM                    0x0010	/* 16 */
#define RHXC_TAPE_LOCK                  0x0020	/* 32 */
#define RHXC_INTERMEDIATE               0x0040	/* 64 */
#define RHXC_OVERRIDE_BROADCAST         0x0080	/* 128 */
#define RHXC_OVERRIDE_IMG_INSTALL       0x0100	/* 256 */
#define RHXC_OVERRIDE_AUTODISPLAY       0x0200	/* 512 */
#define RHXC_RTD_XFER_IM_REMOTE         0x0400   /* 1024 */
#define RHXC_RTD_SCAN                   0x0800   /* 2048 */
#define RHXC_REF_SCAN                   0x1000   /* 4096 */
#define RHXC_DONT_WRITE_OR_INSTALL      0x2000   /* 8192 */
#define RHXC_RTD_XFER_ALL_IM_PER_PASS   0x4000   /* 16384 */
#define RHXC_XFER_IMG_RIR               0x8000   /* 32768 */

/* AF 03/22/01 MRIge65182 Bitmask for opflair */

#define OPFLAIR_SINGLE      0
#define OPFLAIR_GROUP       1
#define OPFLAIR_INTERLEAVED 2

#define WHOLE_SUFFIX ".WHOLE"
#define ZOOM_SUFFIX ".ZOOM"

/* Spectroscopy definitions */
/* Supported Nuclei */
#define PSD_PROTON PROTON_NUCLEUS
#define PSD_DEUTERIUM DEUTERIUM_NUCLEUS
#define PSD_HELIUM HELIUM_NUCLEUS
#define PSD_LITHIUM LITHIUM_NUCLEUS
#define PSD_BORON BORON_NUCLEUS
#define PSD_CARBON CARBON_NUCLEUS
#define PSD_NITROGEN NITROGEN_NUCLEUS
#define PSD_OXYGEN OXYGEN_NUCLEUS
#define PSD_FLUORINE FLUORINE_NUCLEUS
#define PSD_SODIUM SODIUM_NUCLEUS
#define PSD_SILICON SILICON_NUCLEUS
#define PSD_PHOSPHORUS PHOSPHORUS_NUCLEUS
#define PSD_XENON XENON_NUCLEUS

/* Supported nuclei by gamma values (Hz/G) */
#define GAMMA_PROTON 4257.59
#define GAMMA_FLUORINE 4006.04
#define GAMMA_HELIUM 3243.38      /* negative */
#define GAMMA_PHOSPHORUS 1723.51
#define GAMMA_LITHIUM 1654.76
#define GAMMA_BORON 1365.98
#define GAMMA_XENON 1177.60       /* negative */
#define GAMMA_SODIUM 1126.09
#define GAMMA_CARBON 1070.63
#define GAMMA_SILICON 845.908     /* negative */
#define GAMMA_DEUTERIUM 653.616
#define GAMMA_OXYGEN 577.357      /* negative */
#define GAMMA_NITROGEN 431.576    /* negative */

/* Acquisition types */
#define SPECPSD_MASTER_H1 0
#define SPECPSD_SLAVE_H1 1
#define SPECPSD_SLAVE_MNS 2
#define SPECPSD_MASTER_MNS 3

/* OLD DEFINES: NOTE DIFFERENCE WITH MASTER/SLAVE DEFINITIONS!
   MNS CERD1/MASTER and MNS CERD2/SLAVE HAVE CHANGED POSITIONS */
#define SPECPSD_CERD1_H1 0
#define SPECPSD_CERD2_H1 1
#define SPECPSD_CERD1_MNS 3
#define SPECPSD_CERD2_MNS 2

/* rhexciterusage definitions */
#define USE_EX1  (1 << 0)
#define USE_EX2  (1 << 1)
#define USE_EX3  (1 << 2)
#define USE_EX4  (1 << 3)
#define USE_EX5  (1 << 4)
#define USE_EX6  (1 << 5)
#define USE_EX7  (1 << 6)
#define USE_EX8  (1 << 7)
#define USE_EX9  (1 << 8)
#define USE_EX10 (1 << 9)
#define USE_EX11 (1 << 10)
#define USE_EX12 (1 << 11)
#define USE_EX13 (1 << 12)
#define USE_EX14 (1 << 13)
#define USE_EX15 (1 << 14)
#define USE_EX16 (1 << 15)

/* rhexciterfreqs definitions */
#define USE_H1_FRQ   (0)
#define USE_GAM_EX1  (1 << 0)
#define USE_GAM_EX2  (1 << 1)
#define USE_GAM_EX3  (1 << 2)
#define USE_GAM_EX4  (1 << 3)
#define USE_GAM_EX5  (1 << 4)
#define USE_GAM_EX6  (1 << 5)
#define USE_GAM_EX7  (1 << 6)
#define USE_GAM_EX8  (1 << 7)
#define USE_GAM_EX9  (1 << 8)
#define USE_GAM_EX10 (1 << 9)
#define USE_GAM_EX11 (1 << 10)
#define USE_GAM_EX12 (1 << 11)
#define USE_GAM_EX13 (1 << 12)
#define USE_GAM_EX14 (1 << 13)
#define USE_GAM_EX15 (1 << 14)
#define USE_GAM_EX16 (1 << 15)

/* Definitions for picsimode */
#define PICSI_CALC_MASK 0x0003
#define PICSI_CALC_3D 0
#define PICSI_CALC_1SLICE 1
#define PICSI_CALC_RXEXACT 2
#define PICSI_CALC_3D1SLICE 3

#define PICSI_FREEFORM_GRX_MASK 0x0004
#define PICSI_FREEFORM_GRX 4

#define PICSI_CALDATA_REQ_MASK 0x0008
#define PICSI_CALDATA_REQ 8

/* Defines for Accel calibration (opassetcal) */
#define ASSET_CAL_MASK 1
#define ASSET_CAL_REG 2

/* Definitions for RHASSET ASSET scan types */
#define ASSET_OFF 0
#define ASSET_CAL 1
#define ASSET_SCAN 2
#define ASSET_SCAN_PHASE ASSET_SCAN
#define ASSET_SCAN_SLICE 3
#define ASSET_REG_CAL 6

/* Definitions for RHASSET ARC scans */
#define ACCEL_ARC 11
#define ACCEL_DVCARC 12

/* Definition of Max Accel (arbitrary) */
#define MAX_ACCEL 20

/* Definitions for BBA scan types */
#define BBA_OFF 0
#define BBA_ONEVOL 1
#define BBA_TWOVOL 2

/* Definitions for Recon board types */
#define AP_NONE 0
#define AP_PPC 1

/* Definitions for FSE retro PC types. HFO4. MM */
#define RETRO_AHN_CHO_METHOD   1 
#define RETRO_LSQ_METHOD       2 
#define RETRO_ZEROTH_ORDER     4 
#define RETRO_FIRST_ORDER      8 
#define RETRO_ONE_EXTRA_ETL    16 
#define RETRO_TWO_EXTRA_ETL    32 
#define RETRO_SKIP_PROCESSING  64
#define RETRO_FITTING_CHECK    128

/* Definitions for Debugging Support of AutominTR
 * DEBUG_PROD will have minimal debug support for
 * critical errors. DEBUG_DEV is for Debug Messages
 * in Development Mode - Rel 14.0
 * */

#define DEBUG_NONE 0
#define DEBUG_PROD 1
#define DEBUG_DEV  2

/* For HDMR2 Localized CFH-Non Selective IR PRESS */
#define PRESSCFH_SLICE 1      
#define PRESSCFH_SLAB 2                                              
#define PRESSCFH_SHIMVOL 3
#define PRESSCFH_NONE 4


/* MULTI VOLUME PRESCAN */
#define MAX_PSC_VQUANT 5

typedef struct {
  float rsppsctloc;  /* location in mm isocenter slab */
  float rsppscrloc; /* receive location in mm */
  float rsppscphasoff;  /* distance in mm from isocenter in the phase direction */
  long rsppscrot[10];  /* rotation matrix */
  int rsppsclenx;  /* length of the prescan slab in x direction */
  int rsppscleny;  /* length of the prescan slab in y direction */
  int rsppsclenz;  /* length of the prescan slab in z direction */
 } RSP_PSC_INFO;

/* Graphic IR Bands */
#define PSD_GIRMANUAL   0       /* Manual Graphic IR Bands mode */
#define PSD_GIRAUTO     1       /* Auto Graphic IR Bands mode */
#define MIN_GIR_THICK   MIN_STHICK  /* Minimum Graphic IR Band Thickness in mm */
#define MAX_GIR_THICK   400.0       /* Maximum Graphic IR Band Thickness in mm */
#define MAX_NUM_GIR     2       /* Maximum number of Graphic IR Bands */

typedef struct {
    float   opgirthick;     /* User specified thickness in mm */
    float   opgirtloc;      /* Distance in mm of Graphic IR center from the isocenter along the Normal direction */
    float   opgirrot[9];    /* Rotation matrix for Graphic IR */
} GIR_INFO;

#define CONFIG_UPDATE_TYPE_SKIP -1
#define CONFIG_UPDATE_TYPE_ACGD_PLUS 0
#define CONFIG_UPDATE_TYPE_TENSOR 1
#define CONFIG_UPDATE_TYPE_SPINECHOCSI 2
#define CONFIG_UPDATE_TYPE_DVW_AMP20SR150 3
#define CONFIG_UPDATE_TYPE_DVW_AMP34SR120 4
#define CONFIG_UPDATE_TYPE_DVW_AMP321SR120 5
#define CONFIG_UPDATE_TYPE_DVW_DEFAULT 6
#define CONFIG_UPDATE_TYPE_FSE_EXTREME_HIGH_RES 7
#define CONFIG_UPDATE_TYPE_VSTRTE_DEFAULT 8
#define CONFIG_UPDATE_TYPE_VSTRTE_AMP20SR150 9

/* Gradient Spec Control and Silent Mode */
#define CONFIG_SAVE -1
#define NOGRAD_CHANGE 0
#define GMAX_CHANGE   1
#define SRATE_CHANGE  2

#define DERATE_B1_BY_COIL 1
#define DERATE_B1_MIN_SAR_COIL 2

/*---------------------------------------------------------------------
 | rhrcideal
 ---------------------------------------------------------------------*/
#define IDEAL_ON_OFF_FLAG                   0x0001 /* 1 */
#define IDEAL_PERFORM_HALF_NEX_PROCESSING   0x0002 /* 2 */
#define IDEAL_PERFORM_HALF_ECHO_PROCESSING  0x0004 /* 4 */
#define IDEAL_ORDER                         0x0008 /* 8 */
#define IDEAL_CENTER_KSPACE_HALF_ECHO       0x0010 /* 16 */
#define IDEAL_T2STAR_CORRECT                0x0020 /* 32 */
#define IDEAL_MP_CORRECT                    0x0040 /* 64 */
#define IDEAL_MAG_FITTING                   0x0080 /* 128 */

/*---------------------------------------------------------------------
 | rhrcdixproc
 ---------------------------------------------------------------------*/
#define DIXON_WATER                 0x0001  /* 1 */
#define DIXON_FAT                   0x0002  /* 2 */
#define DIXON_INPHASE               0x0004  /* 4 */
#define DIXON_OUTPHASE              0x0008  /* 8 */
#define DIXON_FIELD                 0x0010  /* 16 */
#define DIXON_ORIGINAL              0x0020  /* 32 */
#define DIXON_FF                    0x0040  /* 64 */
#define DIXON_R2STAR                0x0080  /* 128 */
#define DIXON_WF                    0x0100  /* 256 */
#define DIXON_WATER_BEFORE_PROC     0x0200  /* 512 */
#define DIXON_FAT_BEFORE_PROC       0x0400  /* 1024 */
#define DIXON_INPHASE_BEFORE_PROC   0x0800  /* 2048 */
#define DIXON_OUTPHASE_BEFORE_PROC  0x1000  /* 4096 */
#define DIXON_FIELD_BEFORE_PROC     0x2000  /* 8192 */
#define DIXON_FF_BEFORE_PROC        0x4000  /* 16384 */
#define DIXON_WF_BEFORE_PROC        0x8000  /* 32768 */
#define DIXON_RC                    0x10000 /* 65536 */

/*---------------------------------------------------------------------
 | rhrcidealctrl
 ---------------------------------------------------------------------*/
#define IDEAL_DUMP_FLDATA                  0x0001  /* 1 */
#define IDEAL_LOAD_FLDATA                  0x0002  /* 2 */
#define IDEAL_OUTPUT_BEFORE_POSTCHECKER    0x0004  /* 4 */
#define IDEAL_OUTPUT_AFTER_POSTCHECKER     0x0008  /* 8 */
#define IDEAL_PERFORM_GRADWARP             0x0010  /* 16 */
#define IDEAL_PERFORM_FLOAT2FIX            0x0020  /* 32 */
#define IDEAL_IDEAL_RECV_COMBINE           0x0040  /* 64 */
#define IDEAL_PERFORM_CLIP                 0x0080  /* 128 */
#define IDEAL_GRADWARP_AFTER_RCVCMB        0x0100  /* 256 */
#define IDEAL_USE_CALC_IMAGE               0x0200  /* 512 */
#define IDEAL_POST_PROCESSING_ON_OFF_FLAG  0x0400  /* 1024 */
#define IDEAL_DISABLE_CHEMICAL_SHIFT       0x0800  /* 2048 */
#define IDEAL_DEBUG_IDEAL_IMAGE_NUMBERING  0x1000  /* 4096 */
#define IDEAL_DISABLE_NEW_FINDING_CF       0x2000  /* 8192 */
#define IDEAL_REVERSE_FREQ_AXIS_DIR        0x4000  /* 16384 */
#define IDEAL_REVERSE_PHASE_AXIS_DIR       0x8000  /* 32768 */
#define IDEAL_REVERSE_HOMODYNE_FLAG        0x10000 /* 65536 */
#define IDEAL_REVERSE_FREQ_DIR             0x20000  /* 131072 */
#define IDEAL_IDEAL_GENERIC_DEBUG          0x40000  /* 262144 */
#define IDEAL_IDEAL_MP_TYPE_SELFCAL        0x80000  /* 524288 */

/*---------------------------------------------------------------------
 | rhechopc_yxfitorder
 ---------------------------------------------------------------------*/
#define ECHO_PC_FIRST_ORDER  0x0001  /* 1 */
#define ECHO_PC_SECOND_ORDER 0x0002  /* 2 */
#define ECHO_PC_THIRD_ORDER  0x0004  /* 4 */

/*---------------------------------------------------------------------
 | rhechopc_ctrl
 ---------------------------------------------------------------------*/
#define ECHO_PC_ACQUIRED             0x0001  /* 1 */
#define ECHO_PC_APPLY                0x0002  /* 2 */
#define ECHO_PC_SLICE_BY_SLICE       0x0004  /* 4 */
#define ECHO_PC_RCVR_BY_RCVR         0x0008  /* 8 */
#define ECHO_PC_SKIP_FERMI           0x0010  /* 16 */
#define ECHO_PC_SKIP_ZEROFILL        0x0020  /* 32 */
#define ECHO_PC_AHN_ADPT_STEP        0x0040  /* 64 */
#define ECHO_PC_AHN_CLIP_WEIGHT      0x0080  /* 128 */
#define ECHO_PC_DEBUG_IMAGE_DUMP     0x08000000  /* 134217728 */
#define ECHO_PC_DEBUG_SKIP_HDRCHK    0x10000000  /* 268435456 */
#define ECHO_PC_DEBUG_TRACE          0x20200000  /* 536870912 */
#define ECHO_PC_DEBUG_DATA_DUMP      0x40000000  /* 1073741824 */


/*---------------------------------------------------------------------
 *  | rhrcmavric_control
 *   ---------------------------------------------------------------------*/
#define MAVRIC_RECON                        0x0001  /* 1 */
#define MAVRIC_RECON_DEBLUR                 0x0002  /* 2 */
#define MAVRIC_RECON_JACOBIAN               0x0004  /* 4 */

/*---------------------------------------------------------------------
 *  | rhrcmavric_image
 *   ---------------------------------------------------------------------*/
#define MAVRIC_ECHO_IMAGES                  0x0001  /* 1 */
#define MAVRIC_SOS_CORR_IMAGES              0x0002  /* 2 */
#define MAVRIC_INIT_SOS_IMAGES              0x0004  /* 4 */
#define MAVRIC_FIELD_MAP                    0x0008  /* 8 */
#define MAVRIC_THRESHOLD_FIELD_MAP          0x0010  /* 16 */
#define MAVRIC_FIELD_MAP_BLURRED            0x0020  /* 32 */
#define MAVRIC_GRADIENT_RATIO               0x0040  /* 64 */
#define MAVRIC_BLURRED_GRADIENT_RATIO       0x0080  /* 128 */
#define MAVRIC_CAPPED_NORM_BLURRED_GRMAP    0x0100  /* 256 */


/*--------------------------------------------------------------------
 | ihnew_series 
 ---------------------------------------------------------------------*/
#define PSD_IHNEWSERIES_UNUSED      0x0001 /* This bit is not used */
#define PSD_IHNEWSERIES_PHASE       0x0002
#define PSD_IHNEWSERIES_I_REAL      0x0004
#define PSD_IHNEWSERIES_Q_IMAG      0x0008

/*--------------------------------------------------------------------
 | rhfiesta : From rdbm.h, re-named for PSD usage
 ---------------------------------------------------------------------*/
#define RHFIESTA_ECHO_DFT 0x0100 /* 9th bit:256 */
#define RHFIESTA_FASTCINE 0x0200 /* 10th bit:512 */
#define RHFIESTA_AVE 1 /* combine by averaging */
#define RHFIESTA_RMS 2 /* combine by root mean square */
#define RHFIESTA_MIP 3 /* combine by MIP */
#define RHFIESTA_1ST_LAST 4 /* YMSmr04091. combine 1st and last echo */
#define RHFIESTA_1ST_ONLY 5 /* YMSmr05612. combine 1st echo only*/
#define RHFIESTA_RMS_AVE 6  /* Echo combine using RMS for Magintude 
                               and Echo combine using Averaging for phase*/
/* For Phase Image UI element */
#define PSD_PHASEIMAGE_ON  -1
#define PSD_PHASEIMAGE_OFF -2


/*********************************************************************
 *                       EPI.E GLOBAL SECTION                        *
 *                                                                   *
 * Common code shared between the Host and Tgt PSD processes.  This  *
 * section contains all the #define's, global variables and function *
 * declarations (prototypes).                                        *
 *********************************************************************/
/*
 * System header files
 */
/* MRIge42854 BJM */
#include <math.h>
#include <string.h>
#include <stdio.h>

/*
 * EPIC header files
 */
#include <em_psd_ermes.in>
#include <stddef_ep.h>
#include <epicconf.h>
#include <pulsegen.h>
#include <support_func.h>
#include <epic_error.h>
#include <epicfuns.h>

#ifdef PSD_HW   /* Auto Voice */
#include "broadcast_autovoice_timing.h"
#endif

#include "ChemSat.h"

#include "psd_proto.h"
#include "bbepi.h"
#include "grad_rf_bbepi.globals.h"
#include "epic_checkcvs.h"
#include "touch.h"

/* BJM - for RT support */

#define MAXFRAMESIZE_DPC 512 /* max frame size limited by recon when dynamic phace correction is needed */

#ifndef PSD_CFH_CHEMSAT
#define PSD_CFH_CHEMSAT
#endif


#define MAX_ENTRY_POINTS 15

/* Some Non-SpSP RF1 definitions */
#define PSD_SE_RF1_PW   5000      /* Pulse width */
#define PSD_SE_RF1_fPW  5000 
#define PSD_SE_RF1_LEFT  3100  
#define PSD_SE_RF1_RIGHT 1900  
#define PSD_SE_RF1_R     250     /* Resolution of FL90mc pulse */
#define PSD_GR_RF1_PW   3200     /* Pulse width */
#define PSD_GR_RF1_fPW  3200.0  
#define PSD_GR_RF1_LEFT  1600  
#define PSD_GR_RF1_RIGHT 1600  
#define PSD_GR_RF1_R     400     /* Resolution of GR30l pulse */

/* needed for Inversion.e inline */
#define PSD_FSE_RF2_fPW   4000 
#define PSD_FSE_RF2_R     400

#ifndef RUP_HRD
#define RUP_HRD(A)  (((A)%hrdwr_period) ? (int)((A) + hrdwr_period) & ~(hrdwr_period - 1) : (A))
#endif

/* L_CFL through L_AUTOSHIM occupy 0 - 9 */
#define L_REF  10

#undef TR_MAX
#define TR_MAX 15000000

/* MRIge55604 */
#undef FOV_MIN
#define FOV_MIN 40
#define FOV_MAX_EPI 990
#undef RBW_MIN
#define RBW_MIN 15.625
#undef RBW_MAX
#define RBW_MAX 250.0

#undef MAX_RFPULSE_NUM

/* minimum number of additional ky lines to acquire beyond opyres/2: */
#define MIN_HNOVER_DEF 8
#define MIN_HNOVER_GRE 20

/* dephaser pulse position definitions */
#define PSD_PRE_180 0
#define PSD_POST_180 1

/* Flow Comp */
#define NO_GMN 0
#define CALC_GMN1 1
#define CALC_GMN2 2

/* YMSmr06515: # of slice locations expansion  
#undef DATA_ACQ_MAX
#define DATA_ACQ_MAX 512
*/

#define MAXSLQUANT_EPI 512

#ifdef LOG_CVS
#define DEFV 3
#endif

/* ASPIR for DWI */
#define ASPIR_DWI_MIN_15T_TI  30000
#define ASPIR_DWI_MAX_15T_TI  250000
#define ASPIR_DWI_15T_TI      60000
#define ASPIR_DWI_MIN_3T_TI   50000
#define ASPIR_DWI_MAX_3T_TI   290000
#define ASPIR_DWI_3T_TI       110000

#include "ChemSat.h"
#include "chemsat_defs.h"

#include "SpSat.h"

#define RES_VRGSAT 256
#define RES_NVRGSAT 320
#define PSD_SATOFF 0
#define PSD_SATNEG 1
#define PSD_SATPOS 2
#define PSD_SATHAD 3
#define PSD_SATPARA 4

#define SAT_DEFAULT 1
#define SAT_EXPLICIT 2


#define SAR_PSLR 0.1468
#define SAR_ASLR 0.1641
#define SAR_ABS_SLR 0.3553
#define SAR_MAXPW_SLR 0.5723
#define SAR_DTYCYC_SLR 0.5723
#define RES_SLRSAT 400 

#define REAL_RF 0
#define COMPLEX_RF 1
#define RES_SLRCSAT 1000

#define SINC_SAT 0
#define VRG_SAT 1
#define SLR_SAT 2
#define SLR_CSAT 3 

#define SAT_COAX 0
#define SAT_OBL_METHOD 0

#define SPSAT_LOCAL_LOG_DIR "./"
#define SPSAT_SCANNER_LOG_DIR "/usr/g/service/log/"

#ifndef FALSE
#define FALSE 0
#endif

/***********************************************************************/

#include <stddef_ep.h>
#include "Inversion.h"
#include "epic_error.h"

#undef NEWERMES			/* Define this when the new ermes */
				/* message is defined  */

#define PSD_INV_RF0_SH_PW    8640  
#define RES_SILVER  432

#define PSD_INV_RF0_PW    5000
#define PSD_INV_RF0_R     250

/* flip_rf0: adding 3T cases (GE) - used to be 250, set it back
   to 250 MRIhc15118, 12447 */
#define FA_RF0_3T 250
#define FA_RF0_3T_BODY_LARGE_WEIGHT 200

EXTERN_FILENAME pulse_rho; /* name of the external IR pulse (rho) */
EXTERN_FILENAME pulse_pha; /* name of the external IR pulse (phase) */
EXTERN_FILENAME pulse_grd; /* name of the external IR pulse (grd)*/

/*********************************************************************
 *                    PRESCAN.E GLOBAL SECTION                       *
 *                            PSglobal                               *
 *                                                                   *
 * Common code shared between the Host and Tgt PSD processes.  This  *
 * section contains all the #define's, global variables and function *
 * declarations (prototypes).                                        *
 *********************************************************************/
#include "Prescan.h"

#include <stdio.h>
#include <sysDep.h>
#include <sysDepSupport.h>

#define amp_killer 0.4
#define pw_killer 3600 
#define FA_FERMI_BLS 630

/* defines for pimrsaps CVs from op_prescan.h */
#define MRSAPS_OFF 0
#define MRSAPS_CFL 1
#define MRSAPS_TG 2
#define MRSAPS_VTG 2
#define MRSAPS_CFH 3
#define MRSAPS_TR 4
#define MRSAPS_FSEPS 9
#define MRSAPS_APA 10
#define MRSAPS_RCVN 12
#define MRSAPS_AWS 101
#define MRSAPS_AVS 102
#define MRSAPS_AS  103
#define MRSAPS_FTG 104
#define MRSAPS_XTG 116

/* defines for cfh_ti */
#define CFHTI_1HT 120000
#define CFHTI_3T  190000
#define CFHTE_1HT 50000
#define CFHTE_3T  30000

/* defines for rcvn_filter */
#define RCVN_MIN_BW  4.0
#define RCVN_MAX_BW  62.5
#define RCVN_MIN_TR  250000


#define ENTRY_POINT_ALL -1
#ifndef BOOLEAN
#define BOOLEAN short
#endif
#ifndef TRUE
#define TRUE 1
#endif
#ifndef FALSE
#define FALSE 0
#endif

BOOLEAN isValidNucleus( const int nuclide, const int field );
STATUS BBcveval( int nucleus );
STATUS BBpredownload( ENTRY_POINT_TABLE *ep_table, int entry, int nucleus );
STATUS BBExciterUsage( int acqtype );
STATUS BBboards( INT bdtype );
void BBboardsRho( INT bdtype, INT *rfrho_board );
void BBboardsPhase( INT bdtype, INT *rfphase_board );
void BBboardsFreq( INT bdtype, INT *rffreq_board );

/**JAH:put in a variable to allow changing rho boards depending
       on which cerd is being used? */
WF_PROCESSOR rfrho_bd;
WF_PROCESSOR rfphase_bd;
WF_PROCESSOR rffreq_bd;

STATUS BBboards(INT bdtype)
{
    if ((bdtype == SPECPSD_MASTER_H1)
        || (bdtype == SPECPSD_MASTER_MNS)){
        rfrho_bd = RHO;
        rfphase_bd = THETA;
        rffreq_bd = OMEGA;
    } else {
        rfrho_bd = RHO2;
        rfphase_bd = OMEGA;
        rffreq_bd = THETA;
    }
    return SUCCESS;
}

void BBboardsRho( INT bdtype, INT *rfrho_board )
{
    if ((bdtype == SPECPSD_MASTER_H1)
        || (bdtype == SPECPSD_MASTER_MNS)){
        *rfrho_board = RHO;
    } else {
        *rfrho_board = RHO2;
    }
}

void BBboardsPhase( INT bdtype, INT *rfphase_board )
{
    if ((bdtype == SPECPSD_MASTER_H1)
        || (bdtype == SPECPSD_MASTER_MNS)){
        *rfphase_board = THETA;
    } else {
        *rfphase_board = OMEGA;
    }
}

void BBboardsFreq( INT bdtype, INT *rffreq_board )
{
    if ((bdtype == SPECPSD_MASTER_H1)
        || (bdtype == SPECPSD_MASTER_MNS)){
        *rffreq_board = OMEGA;
    } else {
        *rffreq_board = THETA;
    }
}

/******************************ssGlobal**********************************/

#include "stddef_ep.h"    /* Moved the header files within global section */
#include "ss.h"
#include "epic_error.h"


/* Gradient Mode */
#define GR8607 1
#define GRANAL 2
#define GR8645 3

/* True Null spsp pulse. Min. slice thk is 6.46mm */
#define PSD_SSTN_RF1_PW    16800  
#define PSD_SSTN_RF1_R     840
#define PSD_SSTN_RF1_HlPW  1200    /* half lobe period */
#define PSD_SSTN_RF1_LEFT  8400  
#define PSD_SSTN_RF1_RIGHT 8400  
#define PSD_SSTN_RF1_NUML  14      /* number of lobes in ss_pulse */

/*ss1560010 1.5T 600us ramp 10mT/m opposed null SR17 */
#define PSD_ss1560010_RF1_PW     14400   /* pulse width */ 
#define PSD_ss1560010_RF1_R      3600    /* resolution  */ 
#define PSD_ss1560010_RF1_HlPW   2400    /* half lobe period */
#define PSD_ss1560010_RF1_LEFT   7200    /* left half width */
#define PSD_ss1560010_RF1_RIGHT  7200    /* right half width */
#define PSD_ss1560010_RF1_NUML   6       /* number of lobes in ss_pulse */
#define MAX_B1_ss1560010         0.02599 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss1560010  0.00086 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss1560010     0.00773 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss1560010        0.1569  /* Absolute width */
#define SAR_Pss1560010           0.0885  /* Effective width */
#define SAR_DTCss1560010         0.2472  /* Duty cycle */ 
#define SAR_MAXPWss1560010       0.1525  /* Maximum pulse width*/
#define SAR_ARss1560010          0.1569  /* Area*/
#define NOM_BW_ss1560010         1283.0  /* Bw in Hz */

/*ss15110022 1.5T 1100us ramp 22mT/m opposed null SR20 and SR50*/
#define PSD_ss15110022_RF1_PW    14400   /* pulse width */ 
#define PSD_ss15110022_RF1_R     3600    /* resolution  */ 
#define PSD_ss15110022_RF1_HlPW  2400    /* half lobe period */
#define PSD_ss15110022_RF1_LEFT  7200    /* left half width */
#define PSD_ss15110022_RF1_RIGHT 7200    /* right half width */
#define PSD_ss15110022_RF1_NUML  6      /* number of lobes in ss_pulse */
#define MAX_B1_ss15110022        0.0359  /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss15110022 0.00113 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss15110022    0.00886 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss15110022       0.1137  /* Absolute width */
#define SAR_Pss15110022          0.0610  /* Effective width */
#define SAR_DTCss15110022        0.1739  /* Duty cycle */ 
#define SAR_MAXPWss15110022      0.1492  /* Maximum pulse width*/
#define SAR_ARss15110022         0.1137  /* Area*/
#define NOM_BW_ss15110022        1813.0  /* Bw in Hz */

/*ss1528822 1.5T 288us ramp 22mT/m true null SR77 */
#define PSD_ss1528822_RF1_PW     14400   /* pulse width */ 
#define PSD_ss1528822_RF1_R      3600    /* resolution  */ 
#define PSD_ss1528822_RF1_HlPW   1200    /* half lobe period */
#define PSD_ss1528822_RF1_LEFT   9528    /* left half width */
#define PSD_ss1528822_RF1_RIGHT  4872    /* right half width */
#define PSD_ss1528822_RF1_NUML   12      /* number of lobes in ss_pulse */
#define MAX_B1_ss1528822         0.03807 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss1528822  0.00133 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss1528822     0.00960 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss1528822        0.1280  /* Absolute width */
#define SAR_Pss1528822           0.0636  /* Effective width */
#define SAR_DTCss1528822         0.1828  /* Duty cycle */ 
#define SAR_MAXPWss1528822       0.0757  /* Maximum pulse width*/
#define SAR_ARss1528822          0.1071  /* Area*/
#define NOM_BW_ss1528822         2571.0  /* Bw in Hz */

/*ss1544022 1.5T 440us ramp 22mT/m opposed null SR50*/
#define PSD_ss1544022_RF1_PW     13000   /* pulse width */
#define PSD_ss1544022_RF1_R      3250    /* resolution  */
#define PSD_ss1544022_RF1_HlPW   1000    /* half lobe period */
#define PSD_ss1544022_RF1_LEFT   6500    /* left half width */
#define PSD_ss1544022_RF1_RIGHT  6500    /* right half width */
#define PSD_ss1544022_RF1_NUML   13       /* number of lobes in ss_pulse */
#define MAX_B1_ss1544022         0.06018 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss1544022  0.00176 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss1544022     0.01164 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss1544022        0.0751  /* Absolute width */
#define SAR_Pss1544022           0.0374  /* Effective width */
#define SAR_DTCss1544022         0.1137  /* Duty cycle */
#define SAR_MAXPWss1544022       0.0707  /* Maximum pulse width*/
#define SAR_ARss1544022          0.0751  /* Area*/
#define NOM_BW_ss1544022         2809.9  /* Bw in Hz */

/*ss1534433 1.5T 344us ramp 33mT/m opposed null SR100*/ /* Designed for SV. wxc GEHmr01479 */
#define PSD_ss1534433_RF1_PW      13000      /* pulse width */
#define PSD_ss1534433_RF1_R       3250       /* resolution  */
#define PSD_ss1534433_RF1_HlPW    1000       /* lobe period */
#define PSD_ss1534433_RF1_LEFT    6500       /* left half width */
#define PSD_ss1534433_RF1_RIGHT   6500       /* right half width */
#define PSD_ss1534433_RF1_NUML    13         /* number of lobes in ss_pulse */
#define MAX_B1_ss1534433          0.053400   /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss1534433   0.00164418 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss1534433      0.00112461 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss1534433         0.0846     /* Absolute width */
#define SAR_Pss1534433            0.0444     /* Effective width */
#define SAR_DTCss1534433          0.1274     /* Duty cycle */
#define SAR_MAXPWss1534433        0.0738     /* Maximum pulse width*/
#define SAR_ARss1534433           0.0846     /* Area*/
#define NOM_BW_ss1534433          2614.0     /* Bw in Hz */

/* ss3026838 3.0T 268us ramp 38 mT/m  SR140 *YH,YZ*/
#define PSD_ss3026838_RF1_PW     9480    /* pulse width */ 
#define PSD_ss3026838_RF1_R      2370    /* resolution  */ 
#define PSD_ss3026838_RF1_HlPW   632     /* half lobe period */
#define PSD_ss3026838_RF1_LEFT   4740    /* left half width */
#define PSD_ss3026838_RF1_RIGHT  4740    /* right half width */
#define PSD_ss3026838_RF1_NUML   15      /* number of lobes in ss_pulse */
#define MAX_B1_ss3026838         0.0651 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss3026838  0.0020 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss3026838     0.01456 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss3026838        0.0951  /* Absolute width */
#define SAR_Pss3026838           0.050   /* Effective width */
#define SAR_DTCss3026838         0.1427  /* Duty cycle */ 
#define SAR_MAXPWss3026838       0.0659  /* Maximum pulse width*/
#define SAR_ARss3026838          0.0951  /* Area*/
#define NOM_BW_ss3026838         4950.0  /* Bw in Hz */


/* ss3026033 3.0T 260us ramp 33 mT/m  SR126 YZ -- new spsp pulse*/
#define PSD_ss3026033_RF1_PW     9720    /* pulse width */ 
#define PSD_ss3026033_RF1_R      2430    /* resolution  */ 
#define PSD_ss3026033_RF1_HlPW   648     /* half lobe period */
#define PSD_ss3026033_RF1_LEFT   4520    /* left half width for 90 flip */
#define PSD_ss3026033_RF1_RIGHT  5200    /* right half width for 90 flip */
#define PSD_ss3026033_RF1_NUML   15      /* number of lobes in ss_pulse */
#define MAX_B1_ss3026033         0.0464 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss3026033  0.0015 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss3026033     0.01223 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss3026033        0.1302  /* Absolute width */
#define SAR_Pss3026033           0.0695   /* Effective width */
#define SAR_DTCss3026033         0.1928  /* Duty cycle */ 
#define SAR_MAXPWss3026033       0.0651  /* Maximum pulse width*/
#define SAR_ARss3026033          0.1302  /* Area*/
#define NOM_BW_ss3026033         4192.0  /* Bw in Hz */

/* BJM: New 3T Spatial Spectral pulse - same as above except larger spectral BW */
#define PSD_ss30260334_RF1_PW    9720    /* pulse width */ 
#define PSD_ss30260334_RF1_R     2430    /* resolution  */ 
#define PSD_ss30260334_RF1_HlPW  648     /* half lobe period */
#define PSD_ss30260334_RF1_LEFT  4569    /* left half width */
#define PSD_ss30260334_RF1_RIGHT 5151    /* right half width */
#define PSD_ss30260334_RF1_NUML  15      /* number of lobes in ss_pulse */
/* #define MAX_B1_ss30260334     0.09837 Max B1 at 90 degree nominal flip */
#define MAX_B1_ss30260334        0.12788  /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss30260334 0.00403 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss30260334    0.0203736 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss30260334       0.0819  /* Absolute width */
#define SAR_Pss30260334          0.0429  /* Effective width */
#define SAR_DTCss30260334        0.1171  /* Duty cycle */ 
#define SAR_MAXPWss30260334      0.0652  /* Maximum pulse width*/
#define SAR_ARss30260334         0.0614  /* Area*/
#define NOM_BW_ss30260334        4040.0  /* Bw in Hz - from Matlab Sim */

/* GW new spsp for breast scan TypeI */
#define PSD_ss30248501_RF1_PW    14256   /* pulse width */
#define PSD_ss30248501_RF1_R     3564    /* resolution  */
#define PSD_ss30248501_RF1_HlPW  528     /* half lobe period */
#define PSD_ss30248501_RF1_LEFT  6912    /* left half width */
#define PSD_ss30248501_RF1_RIGHT 7344    /* right half width */
#define PSD_ss30248501_RF1_NUML  27      /* number of lobes in ss_pulse */
/* #define MAX_B1_ss30248501     0.10904   Max B1 at 90 degree nominal flip from spspTool */
#define MAX_B1_ss30248501        0.131635  /* Max B1 at 90 degree nominal flip from rfstat */
#define MAX_INT_B1_SQ_ss30248501 0.00745326 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss30248501    0.0228652 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss30248501       0.0591  /* Absolute width */
#define SAR_Pss30248501          0.0302  /* Effective width */
#define SAR_DTCss30248501        0.0578  /* Duty cycle */
#define SAR_MAXPWss30248501      0.0351  /* Maximum pulse width */
#define SAR_ARss30248501         0.0382  /* Area */
#define NOM_BW_ss30248501        3640.8  /* Bw in Hz - from Matlab Sim */

/* GW new spsp for breast scan TypeII */
#define PSD_ss30248502_RF1_PW    16000   /* pulse width */
#define PSD_ss30248502_RF1_R     4000    /* resolution  */
#define PSD_ss30248502_RF1_HlPW  1000    /* half lobe period */
#define PSD_ss30248502_RF1_LEFT  7782    /* left half width */
#define PSD_ss30248502_RF1_RIGHT 8218    /* right half width */
#define PSD_ss30248502_RF1_NUML  16      /* number of lobes in ss_pulse */
/* #define MAX_B1_ss30248502     0.062448  Max B1 at 90 degree nominal flip from spspTool */
#define MAX_B1_ss30248502        0.0772887  /* Max B1 at 90 degree nominal flip from rfstat */
#define MAX_INT_B1_SQ_ss30248502 0.00452719 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss30248502    0.0168211 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss30248502       0.0971  /* Absolute width */
#define SAR_Pss30248502          0.0474  /* Effective width */
#define SAR_DTCss30248502        0.1075  /* Duty cycle */
#define SAR_MAXPWss30248502      0.0478  /* Maximum pulse width */
#define SAR_ARss30248502         0.0580  /* Area */
#define NOM_BW_ss30248502        2375.6  /* Bw in Hz - from Matlab Sim */

/* ss3027633 for bresat DWI on 750W */
#define PSD_ss3027633_RF1_PW      14256   /* pulse width */
#define PSD_ss3027633_RF1_R       3564 /* resolution  */
#define PSD_ss3027633_RF1_HlPW    528   /* half lobe period */
#define PSD_ss3027633_RF1_LEFT    6906   /* left half width */
#define PSD_ss3027633_RF1_RIGHT   7350   /* right half width */
#define PSD_ss3027633_RF1_NUML    27     /* number of lobes in ss_pulse */
#define MAX_B1_ss3027633          0.141819 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss3027633   0.0073074 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss3027633      0.0226403 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss3027633         0.0519 /* Absolute width */
#define SAR_Pss3027633            0.0255 /* Effective width */
#define SAR_DTCss3027633          0.0617 /* Duty cycle */
#define SAR_MAXPWss3027633        0.0348 /* Maximum pulse width */
#define SAR_ARss3027633           0.0339 /* Area */
#define NOM_BW_ss3027633          3823.5 /* Bw in Hz */

/* cxl04 20000727 ss3018027 3.0T 180us ramp 26.8mT/m true null SR150 
   redesigned so that pw_ss_ramp is multiple of 4us */
#define PSD_ss3018027_RF1_PW     7200    /* pulse width */ 
#define PSD_ss3018027_RF1_R      1800    /* resolution  */ 
#define PSD_ss3018027_RF1_HlPW   600     /* half lobe period */
#define PSD_ss3018027_RF1_LEFT   3600    /* left half width */
#define PSD_ss3018027_RF1_RIGHT  3600    /* right half width */
#define PSD_ss3018027_RF1_NUML   12      /* number of lobes in ss_pulse */
#define MAX_B1_ss3018027         0.04945 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss3018027  0.00155 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss3018027     0.01468 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss3018027        0.1649  /* Absolute width */
#define SAR_Pss3018027           0.0882  /* Effective width */
#define SAR_DTCss3018027         0.2535  /* Duty cycle */ 
#define SAR_MAXPWss3018027       0.0753  /* Maximum pulse width*/
#define SAR_ARss3018027          0.1649  /* Area*/
#define NOM_BW_ss3018027         5659.0  /* Bw in Hz */

/*ss1060010 1.0T 600us ramp 10mT/m opposed null SR17 */
#define PSD_ss1060010_RF1_PW     21600   /* pulse width */ 
#define PSD_ss1060010_RF1_R      5400    /* resolution  */ 
#define PSD_ss1060010_RF1_HlPW   3600    /* half lobe period */
#define PSD_ss1060010_RF1_LEFT   10800   /* left half width */
#define PSD_ss1060010_RF1_RIGHT  10800   /* right half width */
#define PSD_ss1060010_RF1_NUML   6       /* number of lobes in ss_pulse */
#define MAX_B1_ss1060010         0.02749 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss1060010  0.00103 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss1060010     0.00692 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss1060010        0.1174  /* Absolute width */
#define SAR_Pss1060010           0.0634  /* Effective width */
#define SAR_DTCss1060010         0.1726  /* Duty cycle */ 
#define SAR_MAXPWss1060010       0.0678  /* Maximum pulse width*/
#define SAR_ARss1060010          0.0989  /* Area*/
#define NOM_BW_ss1060010         1425.0  /* Bw in Hz */

/*ss10110022 1.0T 1100us ramp 2.2mT/m opposed null SR20 and SR50*/
#define PSD_ss10110022_RF1_PW    21600   /* pulse width */ 
#define PSD_ss10110022_RF1_R     5400    /* resolution  */ 
#define PSD_ss10110022_RF1_HlPW  3600    /* half lobe period */
#define PSD_ss10110022_RF1_LEFT  10800   /* left half width */
#define PSD_ss10110022_RF1_RIGHT 10800   /* right half width */
#define PSD_ss10110022_RF1_NUML  6       /* number of lobes in ss_pulse */
#define MAX_B1_ss10110022        0.03292 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss10110022 0.00124 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss10110022    0.00757 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss10110022       0.0982  /* Absolute width */
#define SAR_Pss10110022          0.0529  /* Effective width */
#define SAR_DTCss10110022        0.1443  /* Duty cycle */ 
#define SAR_MAXPWss10110022      0.0566  /* Maximum pulse width*/
#define SAR_ARss10110022         0.0826  /* Area*/
#define NOM_BW_ss10110022        1677.0   /* Bw in Hz */

/*ss1028822 1.0T 288us ramp 22mT/m true null SR77 */
#define PSD_ss1028822_RF1_PW     21600   /* pulse width */ 
#define PSD_ss1028822_RF1_R      5400    /* resolution  */ 
#define PSD_ss1028822_RF1_HlPW   1800    /* half lobe period */
#define PSD_ss1028822_RF1_LEFT   14470   /* left half width */
#define PSD_ss1028822_RF1_RIGHT  7130   /* right half width */
#define PSD_ss1028822_RF1_NUML   12      /* number of lobes in ss_pulse */
#define MAX_B1_ss1028822         0.04233 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss1028822  0.00171 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss1028822     0.00889 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss1028822        0.0933  /* Absolute width */
#define SAR_Pss1028822           0.0441  /* Effective width */
#define SAR_DTCss1028822         0.1249  /* Duty cycle */ 
#define SAR_MAXPWss1028822       0.0340  /* Maximum pulse width*/
#define SAR_ARss1028822          0.0642  /* Area*/
#define NOM_BW_ss1028822         2800.0  /* Bw in Hz - reduced from 2810 to get 3mm min slthick */


/*ss0560010 0.5T 600us ramp 10mT/m true null SR17 */
#define PSD_ss0560010_RF1_PW     36000    /* pulse width */
#define PSD_ss0560010_RF1_R      3000     /* resolution  */
#define PSD_ss0560010_RF1_HlPW   3600     /* half lobe period */
#define PSD_ss0560010_RF1_LEFT   18000    /* left half width */
#define PSD_ss0560010_RF1_RIGHT  18000    /* right half width */
#define PSD_ss0560010_RF1_NUML   10       /* number of lobes in ss_pulse */
#define MAX_B1_ss0560010         0.02502  /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss0560010  0.00096  /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss0560010     0.00516  /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss0560010        0.0895   /* Absolute width */
#define SAR_Pss0560010           0.0426   /* Effective width */
#define SAR_DTCss0560010         0.1148   /* Duty cycle */
#define SAR_MAXPWss0560010       0.0260   /* Maximum pulse width*/
#define SAR_ARss0560010          0.0652   /* Area*/
#define NOM_BW_ss0560010         2128.0   /* Bw in Hz - gets a 5mm min slthick - actual value should be 2191 Hz */


/*ss1 1.5T Zur's pulse using SR150 CRM config values (KFK/NDG) */
#define PSD_ss1_RF1_PW           13200    /* pulse width */ 
#define PSD_ss1_RF1_R            3300     /* resolution  */ 
#define PSD_ss1_RF1_HlPW         1200     /* half lobe period */
#define PSD_ss1_RF1_LEFT         11200    /* left half width */
#define PSD_ss1_RF1_RIGHT        2000     /* right half width */
#define PSD_ss1_RF1_NUML         10       /* number of lobes in ss_pulse */
#define MAX_B1_ss1               0.0365089   /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss1        0.000895815 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss1           0.00829822  /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss1              0.0986  /* Absolute width */
#define SAR_Pss1                 0.0517  /* Effective width */
#define SAR_DTCss1               0.1437  /* Duty cycle */ 
#define SAR_MAXPWss1             0.0709  /* Maximum pulse width*/
#define SAR_ARss1                0.0619  /* Area*/
#define NOM_BW_ss1               2043    /* Bw in Hz. Decreased by 25% to match 
                                            slice thickness (NDG) */

/*ss1 1.5T 6ms Zur's pulse (for realtime) using SR150 CRM config 
  values (KFK/NDG) */
#define PSD_ss2_RF1_PW           6000    /* pulse width */ 
#define PSD_ss2_RF1_R            1500    /* resolution  */ 
#define PSD_ss2_RF1_HlPW         1200    /* half lobe period */
#define PSD_ss2_RF1_LEFT         2780    /* left half width */
#define PSD_ss2_RF1_RIGHT        3220    /* right half width */
#define PSD_ss2_RF1_NUML         4       /* number of lobes in ss_pulse */
#define MAX_B1_ss2               0.0349204   /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss2        0.000589769 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss2           0.00991438  /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss2              0.1487  /* Absolute width */
#define SAR_Pss2                 0.0806  /* Effective width */
#define SAR_DTCss2               0.2528  /* Duty cycle */ 
#define SAR_MAXPWss2             0.1561  /* Maximum pulse width*/
#define SAR_ARss2                0.1401  /* Area*/
#define NOM_BW_ss2               2554    /* Bw in Hz */


/* HD new spsp pulse for Whole grad mode (Default Pulse for Whole Mode)
 * specs: ss30276221 276 us ramp 3.0T SR80 22G  TypeI pulse 9NRF
 * Type I : Delay INsensitive Pulse*/
#define PSD_ss30276221_RF1_PW    10608   /* pulse width */ 
#define PSD_ss30276221_RF1_R     2652    /* resolution  */ 
#define PSD_ss30276221_RF1_HlPW  624     /* half lobe period */
#define PSD_ss30276221_RF1_LEFT  4823    /* left half width */
#define PSD_ss30276221_RF1_RIGHT 5785    /* right half width */
#define PSD_ss30276221_RF1_NUML  17      /* number of lobes in ss_pulse */
#define MAX_B1_ss30276221        0.05445 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss30276221 0.001658 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss30276221    0.0125  /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss30276221       0.1017  /* Absolute width */
#define SAR_Pss30276221          0.0527  /* Effective width */
#define SAR_DTCss30276221        0.1530  /* Duty cycle */ 
#define SAR_MAXPWss30276221      0.0567  /* Maximum pulse width*/
#define SAR_ARss30276221         0.1017  /* Area*/
#define NOM_BW_ss30276221        4347.8  /* Bw in Hz */


/* HD new spsp pulse for Whole grad mode (Optional pulse for Whole mode)
 * Can turn this on by setting ss_override to 30276222
 * specs: ss30276222 276 us ramp 3.0T SR80 22G  TypeII pulse 7NRF
 * Type II: Delay sensitive Pulse */
#define PSD_ss30276222_RF1_PW     7784    /* pulse width */ 
#define PSD_ss30276222_RF1_R      1946    /* resolution  */ 
#define PSD_ss30276222_RF1_HlPW   1112    /* half lobe period */
#define PSD_ss30276222_RF1_LEFT   3578    /* left half width */
#define PSD_ss30276222_RF1_RIGHT  4206    /* right half width */
#define PSD_ss30276222_RF1_NUML   13      /* number of lobes in ss_pulse */
#define MAX_B1_ss30276222         0.0300  /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss30276222  0.00096 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss30276222     0.0111  /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss30276222        0.2508  /* Absolute width */
#define SAR_Pss30276222           0.1364  /* Effective width */
#define SAR_DTCss30276222         0.3887  /* Duty cycle */ 
#define SAR_MAXPWss30276222       0.1397  /* Maximum pulse width*/
#define SAR_ARss30276222          0.2508  /* Area*/
#define NOM_BW_ss30276222         1886.8  /* Bw in Hz */


/* ZZ new spsp pulses for 3D Water Excitation */
/* ss15048233 048us ramp 1.5T SR77 2.3G */
#define PSD_ss15048233_RF1_PW     5560   /* pulse width */
#define PSD_ss15048233_RF1_R      1390 /* resolution  */
#define PSD_ss15048233_RF1_HlPW   1112   /* half lobe period */
#define PSD_ss15048233_RF1_LEFT   2475   /* left half width */
#define PSD_ss15048233_RF1_RIGHT  3085   /* right half width */
#define PSD_ss15048233_RF1_NUML   5      /* number of lobes in ss_pulse */
#define MAX_B1_ss15048233         0.216688 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss15048233  0.00888426 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss15048233     0.0399724 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss15048233        0.0740 /* Absolute width */
#define SAR_Pss15048233           0.0340 /* Effective width */
#define SAR_DTCss15048233         0.1000 /* Duty cycle */
#define SAR_MAXPWss15048233       0.0482 /* Maximum pulse width*/
#define SAR_ARss15048233          0.0487 /* Area*/
#define NOM_BW_ss15048233         (1.05*7518.8) /* Bw in Hz */

/* ss15048234 048us ramp 1.5T SR77 2.3G */
#define PSD_ss15048234_RF1_PW     7784   /* pulse width */
#define PSD_ss15048234_RF1_R      1946 /* resolution  */
#define PSD_ss15048234_RF1_HlPW   1112   /* half lobe period */
#define PSD_ss15048234_RF1_LEFT   3480   /* left half width */
#define PSD_ss15048234_RF1_RIGHT  4304   /* right half width */
#define PSD_ss15048234_RF1_NUML   7      /* number of lobes in ss_pulse */
#define MAX_B1_ss15048234         0.161204 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss15048234  0.0072322 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss15048234     0.0304804 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss15048234        0.0711 /* Absolute width */
#define SAR_Pss15048234           0.0358 /* Effective width */
#define SAR_DTCss15048234         0.0904 /* Duty cycle */
#define SAR_MAXPWss15048234       0.0344 /* Maximum pulse width*/
#define SAR_ARss15048234          0.0468 /* Area*/
#define NOM_BW_ss15048234         (1.05*7518.8) /* Bw in Hz */

/* ss15048235 048us ramp 1.5T SR77 2.3G */
#define PSD_ss15048235_RF1_PW     10008   /* pulse width */
#define PSD_ss15048235_RF1_R      2502 /* resolution  */
#define PSD_ss15048235_RF1_HlPW   1112   /* half lobe period */
#define PSD_ss15048235_RF1_LEFT   4478   /* left half width */
#define PSD_ss15048235_RF1_RIGHT  5530   /* right half width */
#define PSD_ss15048235_RF1_NUML   9     /* number of lobes in ss_pulse */
#define MAX_B1_ss15048235         0.146522 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss15048235  0.0058972 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss15048235     0.0242737 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss15048235        0.0608 /* Absolute width */
#define SAR_Pss15048235           0.0274 /* Effective width */
#define SAR_DTCss15048235         0.0787 /* Duty cycle */
#define SAR_MAXPWss15048235       0.0268 /* Maximum pulse width*/
#define SAR_ARss15048235          0.0400 /* Area*/
#define NOM_BW_ss15048235         (1.05*7518.8) /* Bw in Hz */

/* ss30104233 104us ramp 3.0T SR77 2.3G */
#define PSD_ss30104233_RF1_PW     2880   /* pulse width */
#define PSD_ss30104233_RF1_R      720 /* resolution  */
#define PSD_ss30104233_RF1_HlPW   576   /* half lobe period */
#define PSD_ss30104233_RF1_LEFT   1283   /* left half width */
#define PSD_ss30104233_RF1_RIGHT  1597   /* right half width */
#define PSD_ss30104233_RF1_NUML   5      /* number of lobes in ss_pulse */
#define MAX_B1_ss30104233         0.490783 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss30104233  0.0201168 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss30104233     0.0835737 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss30104233        0.0631 /* Absolute width */
#define SAR_Pss30104233           0.0290 /* Effective width */
#define SAR_DTCss30104233         0.0847 /* Duty cycle */
#define SAR_MAXPWss30104233       0.0403 /* Maximum pulse width*/
#define SAR_ARss30104233          0.0415 /* Area*/
#define NOM_BW_ss30104233         (1.05*16949.2) /* Bw in Hz */

/* ss30104234 104us ramp 3.0T SR77 2.3G */
#define PSD_ss30104234_RF1_PW      4032   /* pulse width */
#define PSD_ss30104234_RF1_R       1008 /* resolution  */
#define PSD_ss30104234_RF1_HlPW    576   /* half lobe period */
#define PSD_ss30104234_RF1_LEFT    1807   /* left half width */
#define PSD_ss30104234_RF1_RIGHT   2225   /* right half width */
#define PSD_ss30104234_RF1_NUML    7     /* number of lobes in ss_pulse */
#define MAX_B1_ss30104234          0.365118 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss30104234   0.016376 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss30104234      0.063728 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss30104234         0.0606 /* Absolute width */
#define SAR_Pss30104234            0.0305 /* Effective width */
#define SAR_DTCss30104234          0.0754 /* Duty cycle */
#define SAR_MAXPWss30104234        0.0288 /* Maximum pulse width*/
#define SAR_ARss30104234           0.0399 /* Area*/
#define NOM_BW_ss30104234          (1.05*16949.2) /* Bw in Hz */

/* ss30104235 104us ramp 3.0T SR77 2.3G */
#define PSD_ss30104235_RF1_PW      5184   /* pulse width */
#define PSD_ss30104235_RF1_R       1296 /* resolution  */
#define PSD_ss30104235_RF1_HlPW    576   /* half lobe period */
#define PSD_ss30104235_RF1_LEFT    2317   /* left half width */
#define PSD_ss30104235_RF1_RIGHT   2867   /* right half width */
#define PSD_ss30104235_RF1_NUML    9     /* number of lobes in ss_pulse */
#define MAX_B1_ss30104235          0.331868 /* Max B1 at 90 degree nominal flip */
#define MAX_INT_B1_SQ_ss30104235   0.0133533 /* Max integral B1^2 at 90 degree nominal flip */
#define MAX_RMS_B1_ss30104235      0.0507515 /* Max rms B1 at 90 degree nominal flip */
#define SAR_ABS_ss30104235         0.0519 /* Absolute width */
#define SAR_Pss30104235            0.0234 /* Effective width */
#define SAR_DTCss30104235          0.0640 /* Duty cycle */
#define SAR_MAXPWss30104235        0.0224 /* Maximum pulse width*/
#define SAR_ARss30104235           0.0341 /* Area*/
#define NOM_BW_ss30104235          (1.05*16949.2) /* Bw in Hz */


/* Other spsp pulse */
#define PSD_SSMISC_RF1_PW         15000  
#define PSD_SSMISC_RF1_R          750
#define PSD_SSMISC_RF1_HlPW       1500    /* half lobe period */
#define PSD_SSMISC_RF1_LEFT       7500  
#define PSD_SSMISC_RF1_RIGHT      7500  
#define PSD_SSMISC_RF1_NUML       10      /* number of lobes in ss_pulse */

#define MAX_OMEGA_OFFSET 11742.8    /* Max Offest (mm) (+/- 4999.609 kHz) of Omega Board */
        /* 11742.8.0 = (0.596) * (8388607) (24 bits signed) /(4257.59 * 1 g/cm)*0.1 */
        /*  (mm) = (tardis/unit)*(24 bit)/(gamma * 1 g/cm) * 0.1 mm/cm */ 

/******************************ssCV**************************************/
/* AssetGlobal  inlined from Asset.e */
#include "AccelCommon.h"

#define ASSET_SUPPORT_PHASE 0
#define ASSET_SUPPORT_SLICE 1

/* AssetGlobal  inlined from Asset.e */


/* SXZ::MRIge72411: for edge ghost optimization */
#define NODESIZE 3
#define VRGF_AFTER_PCOR_ALT 32768
#define FAST_VRGF_ALT 2048

/* GEHmr01833, GEHmr02647: XFD Power Limit */
#define XFD_POWER_LIMIT     8.5 /* kW */
#define XFD_POWER_LIMIT_SE  6.4 /* kW */
#define XFD_POWER_LIMIT_GRE 6.3 /* kW */

#define DEFAULT_IREF_ETL 4

/* MRIhc56520: SR for EPI with ART on 750w */
#define XRMW_3T_EPI_ART_SR 5.0

#define TARATIO_XRMW 0.85

/************************************************************************/

#endif /* h_bbepi_global_h */

