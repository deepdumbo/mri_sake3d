/*
 *  bbepi.hostdecl.h
 *
 *  Do not edit this file. It is automatically generated by EPIC.
 *
 *  Date : Oct  9 2013
 *  Time : 17:18:52
 */

#ifndef h_bbepi_hostdecl_h
#define h_bbepi_hostdecl_h

int _cv_revision = 105;




_cvint  _opresearch = { &opresearch,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Research Mode", 
    0, ""
};




_cvfloat  _opweight = { &opweight,  
    0, 
    227, 
    50,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Patient weight in Kg.", 
    0, ""
};





_cvint  _oplandmark = { &oplandmark,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "A valid landmark exists. 0=false, 1=true", 
    0, ""
};

_cvint  _optabent = { &optabent,  
    0, 
    6, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Table Entry:0=Signa System, 1=nMR left, 2=nMR center, 3=nMR right, 4=iMR front, 5=iMR side, 6=iMR vertical.", 
    0, ""
};

_cvint  _opentry = { &opentry,  
    1, 
    10, 
    1,  0, 0, 0, 1, 1, 
    VISONLY,  
    "Patient Entry: 1=Head First, 2=Feet First, 3=Axial Entry, 4=Side Entry, 5=Vertical Entry, 6=Reserved, 7=Head First (+25 degrees), 8=Head First (-25 degrees), 9=Feet First (+25 degrees), 10=Feet First (-25 degrees).", 
    0, ""
};

_cvint  _oppos = { &oppos,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Patient Position: 1=Supine, 2=Prone, 3=Left Decub, 4= Right Decub.", 
    0, ""
};

_cvint  _opplane = { &opplane,  
    1, 
    5, 
    PSD_AXIAL,  0, 0, 0, 1, 1, 
    VIS, 
    "Scan Plane: 1=axial, 2=sagittal, 3=coronal, 4=oblique, 5= 3plane .", 
    0, ""
};

_cvint  _opphysplane = { &opphysplane,  
    1, 
    4, 
    PSD_OBL,  0, 0, 0, 1, 1, 
    VIS, 
    "Physical Gradient Scan Plane: 1=axial, 2=sagittal, 3=coronal, 4=oblique.", 
    0, ""
};

_cvint  _opobplane = { &opobplane,  
    1, 
    3, 
    PSD_AXIAL,  0, 0, 0, 1, 1, 
    INVIS, 
    "Most like plane for obliques.", 
    0, ""
};

_cvint  _opimode = { &opimode,  
    1, 
    6, 
    PSD_2D,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Imaging Mode: 1=2D, 2= 3D, 3=CINE, 4=ANGIO, 5=SPECTRO, 6=3D MULTISLAB.", 
    0, ""
};

_cvint  _oppseq = { &oppseq,  
    1, 
    57, 
    1,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Pulse Sequence: SE GE IR SSFP SPGR TOF PC TOFSP PCSP PROBES PROBEP PRESSCSI STEAMCSI FIDCSI ECHOCSI SPINECHO 3PLANELOC.", 
    0, ""
};


_cvint  _opgradmode = { &opgradmode,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = BRM/CRM, 1 = Whole body, 2 = ZOOM", 
    0, "Unknown mode. Options are Whole, Zoom or BRM/CRM"
};





_cvint  _piimgoptlist = { &piimgoptlist,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "", 
    0, ""
};

_cvint  _opcgate = { &opcgate,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac Gating Flag: 0=No gating, 1=Gating ON, 2=Internally Gated.", 
    0, ""
};

_cvint  _opexor = { &opexor,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Exorcist Flag", 
    0, ""
};

_cvint  _opcmon = { &opcmon,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Cardiac Compensation. 0=off, 1=on.", 
    EM_PSD_CMON_PSEQ_INCOMPATIBLE, ""
};

_cvint  _opfcomp = { &opfcomp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow Comp Flag", 
    0, ""
};

_cvint  _opgrx = { &opgrx,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Graphic Rx: 0=off, 1= on", 
    0, ""
};

_cvint  _opgrxroi = { &opgrxroi,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Graphic ROI: 0=off, 1=on", 
    EM_PSD_OPGRXROI_INCOMPATIBLE, ""
};

_cvint  _opnopwrap = { &opnopwrap,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "No Phase Wrap. 0=off, 1=on.", 
    0, ""
};

_cvint  _opptsize = { &opptsize,  
    2, 
    4, 
    2,  0, 0, 0, 1, 1, 
    VISONLY, 
    "2=16 bit data, 4=32 bit data.", 
    0, ""
};

_cvint  _oppomp = { &oppomp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=no pomp, 1=pomp", 
    0, ""
};

_cvint  _opscic = { &opscic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "surface coil intensity correction: 1 if enabled.", 
    0, ""
};

_cvint  _oprect = { &oprect,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=No rect. scan, 1=rect. scan.", 
    0, ""
};

_cvint  _opsquare = { &opsquare,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=No square pixel scan, 1=square pixel scan", 
    0, ""
};

_cvint  _opvbw = { &opvbw,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Variable Bandwidth Option.", 
    0, ""
};

_cvint  _opblim = { &opblim,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=new memp,1=classic", 
    0, ""
};

_cvint  _opfast = { &opfast,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "FAST sequence selection: 0=off, 1=on", 
    EM_PSD_OPFAST_INCOMPATIBLE, ""
};

_cvint  _opcs = { &opcs,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Improved RF pulse switch: 0=off, 1=on.", 
    EM_PSD_CS_2D_SPIN_ECHO_ONLY, ""
};

_cvint  _opdeprep = { &opdeprep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "DE prep pulses: 0=off, 1=on", 
    EM_PSD_OPDEPREP_INCOMPATIBLE, ""
};

_cvint  _opirprep = { &opirprep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "IR prep pulses: 0=off, 1=on", 
    EM_PSD_OPIRPREP_INCOMPATIBLE, ""
};

_cvint  _opmph = { &opmph,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Multi-phase acq: 0=off, 1=on", 
    EM_PSD_OPMPH_INCOMPATIBLE, ""
};

_cvint  _opdynaplan = { &opdynaplan,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dynamic Plan: 0=off, 1=on", 
    0, "Dynamic Plan option is not available with this PSD."
};


_cvint  _opbsp = { &opbsp,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "2/3 IR Blood Suppression.", 
    EM_PSD_BSP_INCOMPATIBLE, ""
};

_cvint  _oprealtime = { &oprealtime,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Realtime Interactive Scanning Option.", 
    EM_PSD_RTIA_REALTIME_NOT_AVAILABLE, ""
};

_cvint  _opfluorotrigger = { &opfluorotrigger,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "FTMRA Scanning Option.", 
    EM_PSD_FTMRA_NOT_AVAILABLE, ""
};

_cvint  _opET = { &opET,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Echotrain imaging Option.", 
    EM_PSD_ECHOTRAIN_NOT_AVAILABLE, ""
};

_cvint  _opmultistation = { &opmultistation,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The multi station button input from scan", 
    EM_PSD_MULTISTATION_INCOMPATIBLE, ""
};

_cvint  _opepi = { &opepi,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "EPI flag: 0=off, 1=on.", 
    EM_PSD_EPI_INCOMPATIBLE, ""
};

_cvint  _opflair = { &opflair,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inversion Group Type, 0 = Single, 1 = Group, 2 = Interleaved", 
    0, ""
};


_cvint  _optlrdrf = { &optlrdrf,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Tailored RF flag: 0=off, 1=on.", 
    EM_PSD_TLRDRF_INCOMPATIBLE, ""
};

_cvint  _opfulltrain = { &opfulltrain,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = split train, 1 = full train", 
    EM_PSD_FULL_ECHO_TRAIN_NOT_SUPPORTED, ""
};

_cvint  _opirmode = { &opirmode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Type of IR or GRASS/MPGR", 
    0, ""
};

_cvint  _opmt = { &opmt,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Magnetization Transfer selection: 0=off, 1=on", 
    EM_PSD_MT_INCOMPATIBLE, ""
};

_cvint  _opzip512 = { &opzip512,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "512 In-plane Zero Interpolation Padding: 0=off, 1=on", 
    EM_PSD_NO_512_ZIP, ""
};

_cvint  _opzip1024 = { &opzip1024,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1024 In-plane Zero Interpolation Padding: 0=off, 1=on", 
    EM_PSD_NO_1024_ZIP, ""
};

_cvint  _opslzip2 = { &opslzip2,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Zero Interpolation Padding x 2: 0=off, 1=on", 
    EM_PSD_ZIP2_ONLY_3D_GE_ANDTOF_COMPATIBLE, ""
};

_cvint  _opslzip4 = { &opslzip4,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Zero Interpolation Padding x 4: 0=off, 1=on", 
    EM_PSD_ZIP4_ONLY_3D_GE_ANDTOF_COMPATIBLE, ""
};

_cvint  _opsmartprep = { &opsmartprep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Smartprep. 0=off, 1=on.", 
    EM_PSD_SMARTPREP_ONLY_ONE_COMPATIBLE, ""
};

_cvint  _opssrf = { &opssrf,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spectral-spatial RF", 
    EM_PSD_SSRF_NOT_AVAILABLE, ""
};

_cvint  _opt2prep = { &opt2prep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "T2 Prep", 
    EM_PSD_T2PREP_NOT_AVAILABLE, ""
};

_cvint  _opspiral = { &opspiral,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spiral flag: 0=off, 1=on.", 
    EM_PSD_SPIRAL_INCOMPATIBLE, ""
};

_cvint  _opnav = { &opnav,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator flag: 0=off, 1=on", 
    EM_PSD_NAVS_INCOMPATIBLE, ""
};

_cvint  _opfmri = { &opfmri,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "fMRI: 0=off, 1=on", 
    EM_PSD_FMRI_INCOMPATIBLE, ""
};


_cvint  _opectricks = { &opectricks,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ECTRICKS mode: 0=off,1=ON", 
    0, ""
};

_cvint  _optricksdel = { &optricksdel,  
    0000, 
    30000000, 
    1000000,  0, 0, 0, 1, 1, 
    VIS,  
    "Tricks Delay(ms) after Mask Acq.", 
0, "" };

_cvint  _optrickspause = { &optrickspause,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "TRICKS Pause after Mask: 0=off,1=ON", 
0, "" };

_cvint  _opfr = { &opfr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for Fast Recovery selection ", 
    0, ""
};

_cvint  _opcube = { &opcube,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for Cube", 
    0, ""
};

_cvint  _ophydro = { &ophydro,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for MRCP or Hydro Image Option", 
    0, ""
};


_cvint  _opphasecycle = { &opphasecycle,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for phase cycling selection ", 
    0, ""
};

_cvint  _oplava = { &oplava,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "LAVA App.", 
    0, "" 
};

_cvint  _opbrava = { &opbrava,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "BRAVA App.", 
    0, "" 
};

_cvint  _opcosmic = { &opcosmic,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "COSMIC App.", 
    0, ""
};

_cvint  _opvibrant = { &opvibrant,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VIBRANT App.", 
    0, "" 
};


_cvint  _opbravo = { &opbravo,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "BRAVO App.", 
    0, ""
};


_cvint  _oppromo = { &oppromo,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PROMO App.", 
    0, "" 
};

_cvint  _opallowedrescantime = { &opallowedrescantime,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PROMO rescan time in seconds", 
    0, "" 
};

_cvint  _opbreastmrs = { &opbreastmrs,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Breast MRS", 
    0, ""
};

_cvint  _opjrmode = { &opjrmode,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "J-Resolved Spectroscopy Mode", 
    0, ""
};

_cvint  _opssfse = { &opssfse,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Single Shot FSE flag, (0)off, (1)on", 
    EM_PSD_SINGLE_SHOT_INCOMPATIBLE, ""
};

_cvint  _t1flair_flag = { &t1flair_flag,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "On(=1) Flag for t1flair scan", 
    0, ""
};

_cvint  _opbilateral = { &opbilateral,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Bilateral Breast Application. 0 = OFF, 1=ON-Single Vol, 2=ON-Two Vols", 
    0, ""
};







_cvint  _opphsen = { &opphsen,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase Sensitive Image Reconstruction: 0 = Disable, 1 = Enable", 
    EM_PSD_PHASESENSITIVE_INCOMPATIBLE, ""
};

_cvint  _opbc = { &opbc,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Blurring cancellation", 
    0, "Blurring cancellation is available only with FSE, FIR or FLIAR."
};

_cvint  _opfatwater = { &opfatwater,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "fat water imaging control flag.", 
    0, "Single Quadrature fat/water imaging is not available for this PSD."
};

_cvint  _oprtbc = { &oprtbc,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for real time blurring cancellation.", 
    0, "Real Time Blurring Cancellation is not available for this PSD."
};

_cvint  _opnseg = { &opnseg,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "number of segment for Rapid Frame Acquisition", 
    0, ""
};

_cvint  _opnnex = { &opnnex,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "option flag for new nex ordering", 
    0, "Advanced NEX is not available for this PSD."
};

_cvint  _opsilent = { &opsilent,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Silent Mode, 0 = Off, 1 = On", 
    0, ""
};

_cvint  _opsilentlevel = { &opsilentlevel,  
    1, 
    3, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "Silent Level, 1 = Medium, 2 = High, 3 = Single Mode", 
    0, ""
};

_cvint  _opmerge = { &opmerge,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for 2D/3D MERGE", 
    0, ""
};

_cvint  _opswan = { &opswan,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for 3D SWAN", 
    0, ""
};

_cvint  _opphaseimage = { &opphaseimage,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase Image", 
    0, ""
};

_cvint  _opdixon = { &opdixon,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dixon imaging option", 
    0, ""
};













_cvint  _opdixproc = { &opdixproc,  
    0, 
    255, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask for choice of images to be reconstructed by IDEAL processing", 
    0, ""
};

_cvint  _opmedal = { &opmedal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL App.", 
    0, ""
};

_cvint  _oplavade = { &oplavade,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "LAVA-DE App.", 
    0, ""
};

_cvint  _opvibrantde = { &opvibrantde,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VIBRANT-DE App.", 
    0, ""
};

_cvint  _opquickstep = { &opquickstep,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "QuickSTEP App.", 
    0, ""
};

_cvint  _opidealiq = { &opidealiq,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "IDEAL IQ App.", 
    0, ""
};

_cvint  _opsilentmr = { &opsilentmr,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Silent MR Flag", 
    0, ""
};




_cvfloat  _opzoom_fov_xy = { &opzoom_fov_xy,  
    240.0, 
    480.0, 
    440.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful FOV in XY (mm)", 
    0, ""
};

_cvfloat  _opzoom_fov_z = { &opzoom_fov_z,  
    240.0, 
    480.0, 
    350.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful FOV in Z (mm)", 
    0, ""
};

_cvfloat  _opzoom_dist_ax = { &opzoom_dist_ax,  
    0.0, 
    350.0, 
    120.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful axial off-center (mm)", 
    0, ""
};

_cvfloat  _opzoom_dist_cor = { &opzoom_dist_cor,  
    0.0, 
    350.0, 
    120.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful coronal off-center (mm)", 
    0, ""
};

_cvfloat  _opzoom_dist_sag = { &opzoom_dist_sag,  
    0.0, 
    350.0, 
    150.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful sagittal off-center (mm)", 
    0, ""
};

_cvint  _app_grad_type = { &app_grad_type,  
    0, 
    100, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = app. for WB and ZM grad, 1= for WB only, 2 = for ZM only", 
    0, ""
};

_cvint  _opzoom_coil_ind = { &opzoom_coil_ind,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0= coil may be used with any grad mode, 1= coil use with zoom grad mode is restricted", 
    0, ""
};

_cvint  _pizoom_index = { &pizoom_index,  
    -1, 
    100, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "index for advisory message with ZM gradient", 
    0, ""
};





_cvint  _opsat = { &opsat,  0, 1, 0,  0, 0, 0, 1, 1,  VISONLY, 
		      "Saturation switch: 0=off, 1=on.", 0, "" };

_cvint  _opsatx = { &opsatx,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spatial pre-sat in logical X direction: 0=off, 1=negative pre-sat only, 2=pos. pre-sat only, 3=both.", 
    0, ""
};

_cvint  _opsaty = { &opsaty,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spatial pre-sat in logical Y direction: 0=off, 1=negative pre-sat only, 2=pos. pre-sat only, 3=both.", 
    0, ""
};

_cvint  _opsatz = { &opsatz,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spatial pre-sat in logical Z direction: 0=off, 1=negative pre-sat only, 2=pos. pre-sat only, 3=both.", 
    0, ""
};

_cvfloat  _opsatxloc1 = { &opsatxloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified right sat location in mm.", 
    0, ""
};

_cvfloat  _opsatxloc2 = { &opsatxloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified left sat location in mm.", 
    0, ""
};

_cvfloat  _opsatyloc1 = { &opsatyloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified anterior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatyloc2 = { &opsatyloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified posterior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatzloc1 = { &opsatzloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified superior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatzloc2 = { &opsatzloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified inferior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatxthick = { &opsatxthick,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified logical X Sat thickness.", 
    0, ""
};

_cvfloat  _opsatythick = { &opsatythick,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified logical Y Sat thickness.", 
    0, ""
};

_cvfloat  _opsatzthick = { &opsatzthick,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified logical Z Sat thickness.", 
    0, ""
};

_cvint  _opsatmask = { &opsatmask,  
    0, 
    64, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask for SAT in the FOV.", 
    0, ""
};

_cvint  _opfat = { &opfat,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Fat pre-saturation: 0=off,1=on.", 
    0, ""
};

_cvint  _opwater = { &opwater,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Water pre-saturation: 0=off,1=on.", 
    0, ""
};

_cvint  _opccsat = { &opccsat,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if concat sat is on", 
    0, ""
};

_cvint  _opfatcl = { &opfatcl,    
     0,       
     1,       
     0,  0, 0, 0, 1, 1,       
     VIS,     
     "Flag indicating classic Fat Sat selection.",  
0, "" };


_cvint  _opspecir = { &opspecir,    
     0,       
     1,       
     0,  0, 0, 0, 1, 1,       
     VIS,     
     "Flag indicating SPECIAL technique selection.",  
0, "" };




_cvint  _opexsatmask = { &opexsatmask,  
    0, 
    64, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask, for explicit sat bands.", 
    0, ""
};

_cvfloat  _opexsathick1 = { &opexsathick1,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 1", 
    0, ""
};

_cvfloat  _opexsathick2 = { &opexsathick2,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 2", 
    0, ""
};

_cvfloat  _opexsathick3 = { &opexsathick3,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 3", 
    0, ""
};

_cvfloat  _opexsathick4 = { &opexsathick4,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 4", 
    0, ""
};

_cvfloat  _opexsathick5 = { &opexsathick5,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 5", 
    0, ""
};

_cvfloat  _opexsathick6 = { &opexsathick6,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 6", 
    0, ""
};

_cvfloat  _opexsatloc1 = { &opexsatloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 1", 
    0, ""
};

_cvfloat  _opexsatloc2 = { &opexsatloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 2", 
    0, ""
};

_cvfloat  _opexsatloc3 = { &opexsatloc3,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 3", 
    0, ""
};

_cvfloat  _opexsatloc4 = { &opexsatloc4,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 4", 
    0, ""
};

_cvfloat  _opexsatloc5 = { &opexsatloc5,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 5", 
    0, ""
};

_cvfloat  _opexsatloc6 = { &opexsatloc6,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 6", 
    0, ""
};

_cvint  _opexsatparal = { &opexsatparal,  
    0, 
    7, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bit mask to communicate parallel explicit sat bands.", 
    0, ""
};





_cvint  _opexsatoff1 = { &opexsatoff1,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 1.", 
    0, ""
};

_cvint  _opexsatoff2 = { &opexsatoff2,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 2.", 
    0, ""
};

_cvint  _opexsatoff3 = { &opexsatoff3,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 3.", 
    0, ""
};

_cvint  _opexsatoff4 = { &opexsatoff4,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 4.", 
    0, ""
};

_cvint  _opexsatoff5 = { &opexsatoff5,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 5.", 
    0, ""
};

_cvint  _opexsatoff6 = { &opexsatoff6,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 6.", 
    0, ""
};

_cvint  _opexsatlen1 = { &opexsatlen1,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 1.", 
    0, ""
};

_cvint  _opexsatlen2 = { &opexsatlen2,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 2.", 
    0, ""
};

_cvint  _opexsatlen3 = { &opexsatlen3,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 3.", 
    0, ""
};

_cvint  _opexsatlen4 = { &opexsatlen4,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 4.", 
    0, ""
};

_cvint  _opexsatlen5 = { &opexsatlen5,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 5.", 
    0, ""
};

_cvint  _opexsatlen6 = { &opexsatlen6,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 6.", 
    0, ""
};



_cvfloat  _opdfsathick1 = { &opdfsathick1,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 1 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick2 = { &opdfsathick2,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 2 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick3 = { &opdfsathick3,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 3 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick4 = { &opdfsathick4,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 4 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick5 = { &opdfsathick5,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 5 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick6 = { &opdfsathick6,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 6 thickness in mm.", 
    0, ""
};













_cvfloat  _exsat1_normth_R = { &exsat1_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat1_normth_A = { &exsat1_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat1_normth_S = { &exsat1_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_normth_R = { &exsat2_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_normth_A = { &exsat2_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_normth_S = { &exsat2_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_normth_R = { &exsat3_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_normth_A = { &exsat3_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_normth_S = { &exsat3_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_normth_R = { &exsat4_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_normth_A = { &exsat4_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_normth_S = { &exsat4_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_normth_R = { &exsat5_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_normth_A = { &exsat5_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_normth_S = { &exsat5_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_normth_R = { &exsat6_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_normth_A = { &exsat6_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_normth_S = { &exsat6_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat1_dist = { &exsat1_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_dist = { &exsat2_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_dist = { &exsat3_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_dist = { &exsat4_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_dist = { &exsat5_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_dist = { &exsat6_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pigirscrn = { &pigirscrn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piautoirbands = { &piautoirbands, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pigirdefthick = { &pigirdefthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pinumgir = { &pinumgir,  
    1, 
    MAX_NUM_GIR, 
    MAX_NUM_GIR,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Allowed Graphic IR Bands", 
0, "" };

_cvint  _opnumgir = { &opnumgir,  
    0, 
    MAX_NUM_GIR, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Graphic IR Bands", 
0, "" };

_cvint  _pigirmode = { &pigirmode,  
    1, 
    3, 
    3,  0, 0, 0, 1, 1, 
    INVIS, 
    "1:Manual IR Band Only, 2:Auto IR Band Only, 3: Both Manual and Auto IR Bands", 
0, "" };

_cvint  _opgirmode = { &opgirmode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0:Manual IR Band, 1:Auto IR Band", 
0, "" };


_cvint  _optagging = { &optagging,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac Tagging (0=None, 1=Stripe, 2=Grid)", 
    EM_PSD_TAG_INCOMPATIBLE, ""
};

_cvint  _optagspc = { &optagspc,  
    0, 
    1024, 
    7,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac Tagging spacing/separation (pixels)", 
0, "" };






_cvfloat  _optagangle = { &optagangle,  
    -180.0, 
     180.0, 
     45.0,  0, 0, 0, 1, 1, 
     VIS, 
     "TAGGING orientation angle", 
0, "" };





_cvfloat  _opvenc = { &opvenc,  
    5.0, 
    5500, 
    50.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Velocity Encode in mm/sec", 
0, "" };

_cvint  _opflaxx = { &opflaxx,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "X grad flow encode", 
0, "" };

_cvint  _opflaxy = { &opflaxy,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Y grad flow encode", 
0, "" };

_cvint  _opflaxz = { &opflaxz,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Z grad flow encode", 
0, "" };

_cvint  _opflaxall = { &opflaxall,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "all axises encoded", 
0, "" };

_cvint  _opproject = { &opproject,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Type of projection image", 
0, "" };

_cvint  _opcollapse = { &opcollapse,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along slice axis, 0: Dont.", 
0, "" };

_cvint  _oprlflow = { &oprlflow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Right-Left flow images, 0: Dont.", 
0, "" };

_cvint  _opapflow = { &opapflow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Anterior-Posterior flow images, 0: Dont.", 
0, "" };

_cvint  _opsiflow = { &opsiflow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Superior-Inferior flow images, 0: Dont.", 
0, "" };

_cvint  _opmagc = { &opmagc,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of magnitude images, 0: Dont.", 
0, "" };

_cvint  _opflrecon = { &opflrecon,  
    0, 
    64, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flow recon type.", 
0, "" };

_cvint  _oprampdir = { &oprampdir,  
    -1, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Direction of the slab excitation ramp pulse. -1: negative ramp, 0: non-ramp, 1: positive ramp", 
0, "" };

_cvint  _project = { &project,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Type of projection image", 
0, "" };

_cvint  _vas_ovrhd = { &vas_ovrhd,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Vascular collapse memory overhead", 
0, "" };

_cvint  _slice_col = { &slice_col,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along slice axis, 0: Dont.", 
0, "" };

_cvint  _phase_col = { &phase_col,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along phase axis, 0: Dont.", 
0, "" };

_cvint  _read_col = { &read_col,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along readout axis, 0: Dont.", 
0, "" };

_cvint  _mag_mask = { &mag_mask,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Use magnitude weighting mask, 0: Dont use.", 
0, "" };

_cvint  _phase_cor = { &phase_cor,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Phase correction enabled 0: No phase correction.", 
0, "" };

_cvint  _extras = { &extras,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Enable mag. and indiv. axis images, 0: Dont.", 
0, "" };

_cvint  _mag_create = { &mag_create,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of magnitude images, 0: Dont.", 
0, "" };

_cvint  _rl_flow = { &rl_flow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Right-Left flow images, 0: Dont.", 
0, "" };

_cvint  _ap_flow = { &ap_flow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Anterior-Posterior flow images, 0: Dont.", 
0, "" };

_cvint  _si_flow = { &si_flow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Superior-Inferior flow images, 0: Dont.", 
0, "" };

_cvint  _imagenum = { &imagenum,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Total number of images per slice", 
0, "" };

_cvint  _motsa_ovrhd = { &motsa_ovrhd,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "motsa memory overhead for intermediate storage of overlap images", 
0, "" };

_cvint  _opslinky = { &opslinky,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: SLINKY acquistion, 0: Non-SLINKY acq.", 
0, "" };

_cvint  _opinhance = { &opinhance,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for Inherence enhancement features", 
    0, ""
};

_cvint  _opmavric = { &opmavric,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for MAVRIC-SL features", 
    0, ""
};







_cvint  _opautosubtract = { &opautosubtract,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to indicate if Auto Subtraction is on or off ", 
    0, ""
};

_cvint  _opsepseries = { &opsepseries,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to indicate if Separate Series is on or off ", 
    0, ""
};




_cvint  _pititle = { &pititle,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, "User Page Title", 0, "" };
_cvfloat  _opuser0 = { &opuser0,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  0", 0, "" };
_cvfloat  _opuser1 = { &opuser1,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  1", 0, "" };
_cvfloat  _opuser2 = { &opuser2,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  2", 0, "" };
_cvfloat  _opuser3 = { &opuser3,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  3", 0, "" };
_cvfloat  _opuser4 = { &opuser4,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  4", 0, "" };
_cvfloat  _opuser5 = { &opuser5,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  5", 0, "" };
_cvfloat  _opuser6 = { &opuser6,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  6", 0, "" };
_cvfloat  _opuser7 = { &opuser7,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  7", 0, "" };
_cvfloat  _opuser8 = { &opuser8,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  8", 0, "" };
_cvfloat  _opuser9 = { &opuser9,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  9", 0, "" };
_cvfloat  _opuser10 = { &opuser10,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 10", 0, "" };
_cvfloat  _opuser11 = { &opuser11,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 11", 0, "" };
_cvfloat  _opuser12 = { &opuser12,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 12", 0, "" };
_cvfloat  _opuser13 = { &opuser13,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 13", 0, "" };
_cvfloat  _opuser14 = { &opuser14,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 14", 0, "" };
_cvfloat  _opuser15 = { &opuser15,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 15", 0, "" };
_cvfloat  _opuser16 = { &opuser16,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 16", 0, "" };
_cvfloat  _opuser17 = { &opuser17,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 17", 0, "" };
_cvfloat  _opuser18 = { &opuser18,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 18", 0, "" };
_cvfloat  _opuser19 = { &opuser19,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 19", 0, "" };
_cvfloat  _opuser20 = { &opuser20,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 20", 0, "" };
_cvfloat  _opuser21 = { &opuser21,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 21", 0, "" };
_cvfloat  _opuser22 = { &opuser22,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 22", 0, "" };
_cvfloat  _opuser23 = { &opuser23,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 23", 0, "" };
_cvfloat  _opuser24 = { &opuser24,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 24", 0, "" };
_cvfloat  _opuser25 = { &opuser25,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 25", 0, "" };
_cvfloat  _opuser26 = { &opuser26,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 26", 0, "" };
_cvfloat  _opuser27 = { &opuser27,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 27", 0, "" };
_cvfloat  _opuser28 = { &opuser28,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 28", 0, "" };
_cvfloat  _opuser29 = { &opuser29,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 29", 0, "" };
_cvfloat  _opuser30 = { &opuser30,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 30", 0, "" };
_cvfloat  _opuser31 = { &opuser31,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 31", 0, "" };
_cvfloat  _opuser32 = { &opuser32,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 32", 0, "" };
_cvfloat  _opuser33 = { &opuser33,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 33", 0, "" };
_cvfloat  _opuser34 = { &opuser34,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 34", 0, "" };
_cvfloat  _opuser35 = { &opuser35,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 35", 0, "" };

_cvfloat  _opuser36 = { &opuser36,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 36", 0, "" };
_cvfloat  _opuser37 = { &opuser37,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 37", 0, "" };
_cvfloat  _opuser38 = { &opuser38,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 38", 0, "" };
_cvfloat  _opuser39 = { &opuser39,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 39", 0, "" };
_cvfloat  _opuser40 = { &opuser40,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 40", 0, "" };
_cvfloat  _opuser41 = { &opuser41,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 41", 0, "" };
_cvfloat  _opuser42 = { &opuser42,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 42", 0, "" };
_cvfloat  _opuser43 = { &opuser43,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 43", 0, "" };
_cvfloat  _opuser44 = { &opuser44,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 44", 0, "" };
_cvfloat  _opuser45 = { &opuser45,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 45", 0, "" };
_cvfloat  _opuser46 = { &opuser46,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 46", 0, "" };
_cvfloat  _opuser47 = { &opuser47,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 47", 0, "" };
_cvfloat  _opuser48 = { &opuser48,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 48", 0, "" };





_cvint  _opnostations = { &opnostations,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "The total number of stations for the current meta-series", 
0, "" };

_cvint  _opstation = { &opstation,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "The current station number", 
0, "" };


_cvint  _oploadprotocol = { &oploadprotocol,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "This Multistation series is loaded from saved Protocol", 
0, "" };


_cvint  _opmask = { &opmask,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to indicated mask series", 
0, "" };

_cvint  _opvenous = { &opvenous,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to indicated venous series", 
0, "" };


_cvint  _opprotRxMode = { &opprotRxMode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = Scan Mode, 1 = Protocol Mode", 
0, "" };





_cvint  _opacqo = { &opacqo,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Acq. mode: 0=interleaved, 1=sequential, 2=rapidframe", 
0, "" };

_cvint  _opfphases = { &opfphases,  
    PHASES_MIN, 
    PHASES_MAX, 
    PHASES_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Images per location in a FAST scan, range between 1 and 512", 
0, "" };

_cvint  _opsldelay = { &opsldelay,  
    50000, 
    20000000, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Delay(ms) after acq.", 
0, "" };

_cvint  _avminsldelay = { &avminsldelay,  
    0, 
    20000000, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum Delay after acq.", 
0, "" };


_cvint  _optphases = { &optphases,  
    PHASES_MIN, 
    PHASES_MAX, 
    PHASES_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Temporal Output Phases for Ectricks 1 and 512", 
0, "" };

_cvint  _opdynaplan_nphases = { &opdynaplan_nphases,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Dynamic Plan: number of temporal phases", 
0, "" };





_cvint  _opdiffuse = { &opdiffuse,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Diffusion,0=off,1=on", 
    EM_PSD_DIFF_INCOMPATIBLE, ""
};

_cvint  _opsavedf = { &opsavedf,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1=T2,Comb,2=T2,Diff,Comb", 
0, "" };

_cvint  _opmintedif = { &opmintedif,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimize Diffusion Timing", 
0, "" };

_cvint  _opdfaxx = { &opdfaxx, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxy = { &opdfaxy, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxz = { &opdfaxz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxall = { &opdfaxall, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxtetra = { &opdfaxtetra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfax3in1 = { &opdfax3in1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _opbval = { &opbval,  
    0, 
    1000, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "B Value for Diffusion", 
0, "" };

_cvint  _opnumbvals = { &opnumbvals,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Diffusion b values", 
0, "" };

_cvint  _opautonumbvals = { &opautonumbvals,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto # b-values", 
0, "" };


_cvfloat  _opdifnext2 = { &opdifnext2,  
    0, 
    MAXFLOAT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of excitations for diffusion T2 image", 
0, "" };

_cvint  _opautodifnext2 = { &opautodifnext2,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto NEX for T2", 
0, "" };

_cvint  _optensor = { &optensor,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "TENSOR", 
0, "" };

_cvint  _opdifnumdirs = { &opdifnumdirs,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Diffusion directions", 
0, "" };

_cvint  _opdifnumt2 = { &opdifnumt2,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of T2 images", 
0, "" };

_cvint  _opautodifnumt2 = { &opautodifnumt2,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto # of T2 Images", 
0, "" };

_cvint  _opdualspinecho = { &opdualspinecho,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Dual Spin Echo: Off=0, On=1", 
0, "" };

_cvint  _opdifproctype = { &opdifproctype,  
    0, 
    7, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Diffusion Tensor Automated Processing bitmask", 
0, "" };

_cvint  _opdifnumbvalues = { &opdifnumbvalues,  
    1, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of b values", 
0, "" };

_cvint  _dti_plus_flag = { &dti_plus_flag,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "DTI+ Flag", 
0, "" };




_cvint  _optouch = { &optouch,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH App.", 
    0, ""
};

_cvint  _optouchfreq = { &optouchfreq,  
    20, 
    5000, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Driver Frequency", 
0, "" };

_cvint  _optouchmegfreq = { &optouchmegfreq,  
    20, 
    5000, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Motion Encoding Gradient Frequency", 
0, "" };

_cvint  _optouchamp = { &optouchamp,  
    0, 
    100, 
    20,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Driver Amplitude", 
0, "" };

_cvint  _optouchtphases = { &optouchtphases,  
    4, 
    128, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Temporal Phases", 
0, "" };

_cvint  _optouchcyc = { &optouchcyc,  
    0, 
    5000, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Driver Cycles per Trigger", 
0, "" };

_cvint  _optouchax = { &optouchax,  
    1, 
    7, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH MEG Direction: 1-X, 2-Y, 4-Z, 7-ALL", 
0, "" };




_cvint  _opaslprep = { &opaslprep,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASL Prep flag: 0=OFF, 1=ON.", 
    0, ""
};




_cvint  _opasl = { &opasl,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3dASL flag: 0=off, 1=on.", 
    0, ""
};

_cvfloat  _oppostlabeldelay = { &oppostlabeldelay,  
    0.0, 
    5000.0, 
    1525.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Post label delay for ASL in msec", 
    0, ""
};

_cvint  _rhchannel_combine_method = { &rhchannel_combine_method,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS,  
    "Channel combination method",  
    0, ""
};

_cvint  _rhasl_perf_weighted_scale = { &rhasl_perf_weighted_scale,  
    1, 
    64, 
    32,  0, 0, 0, 1, 1, 
    INVIS,  
    "Scaling factor applied to ASL perfusion weighted images",  
    0, ""
};




_cvfloat  _cfslew_artmedium = { &cfslew_artmedium,  
    1.0, 
    20.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Medium ART mode slew rate in one  tenth of T/m/sec", 
0, "" };

_cvfloat  _cfgmax_artmedium = { &cfgmax_artmedium,  
    1.0, 
    5.0, 
    3.3,  0, 0, 0, 1, 1, 
    VIS, 
    "Medium ART mode gmax in G/cm", 
0, "" };

_cvfloat  _cfslew_arthigh = { &cfslew_arthigh,  
    1.0, 
    20.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "High ART  mode slew rate in one  tenth of T/m/sec", 
0, "" };

_cvfloat  _cfgmax_arthigh = { &cfgmax_arthigh,  
    1.0, 
    5.0, 
    3.3,  0, 0, 0, 1, 1, 
    VIS, 
    "High ART  mode gmax in G/cm", 
0, "" };

_cvint  _cfnumartlevels = { &cfnumartlevels,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of ART levels; 0-None; 1-One level; 2-Two levels", 
0, "" };

_cvint  _pinumartlevels = { &pinumartlevels,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "UI control to support multiple ART levels ", 
0, "" };




_cvint  _oprep_active = { &oprep_active,  
    1, 
    128, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "# of Active Repetitions", 
0, "" };

_cvint  _oprep_rest = { &oprep_rest,  
    1, 
    128, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "# of Rest Repetitions", 
0, "" };

_cvint  _opdda = { &opdda,  
    0, 
    50, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "# of Dummy Acquisitions", 
0, "" };

_cvint  _opinit_state = { &opinit_state,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Initial State", 
0, "" };

_cvint  _opfMRIPDTYPE = { &opfMRIPDTYPE,  
    SIMPLE_BLOCK, 
    EVENT_RELATED, 
    SIMPLE_BLOCK,  0, 0, 0, 1, 1, 
    VIS, 
    "fMRI paradigm type", 
0, "" };

_cvint  _opview_order = { &opview_order,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "View Order 1=Bottom/Up 0=Top/Down", 
0, "" };

_cvint  _opslice_order = { &opslice_order,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Order 0=Sequential 1=Interleaved", 
0, "" };

_cvint  _oppsd_trig = { &oppsd_trig,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Trigger Type", 
0, "" };

_cvint  _oppdgm_str = { &oppdgm_str,  
    -1, 
    50, 
    -1,  0, 0, 0, 1, 1, 
    VIS, 
    "Paradigm String", 
0, "" };

_cvint  _opbwrt = { &opbwrt,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Brain Wave Real Time", 
0, "" };

_cvint  _cont_flag = { &cont_flag,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Acq. mode, 0=normscan, 1=contscan.", 
0, "" };






_cvint  _opautonecho = { &opautonecho,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto No of Echoes", 
0, "" };

_cvint  _opnecho = { &opnecho,  
    NECHO_MIN, 
    PSD_NECHO_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of echoes", 
    0, "opnecho out of range"
};

_cvint  _opnshots = { &opnshots,  
    1, 
    1024, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of shots", 
0, "" };

_cvint  _opautote = { &opautote,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Min TE mode", 
0, "" };

_cvint  _opte = { &opte,  
    TE_MIN, 
    TE_MAX, 
    25000,  0, 0, 0, 1, 1, 
    VIS, 
    "Echo time", 
0, "" };

_cvint  _opte2 = { &opte2,  
    TE2_MIN, 
    TE_MAX, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Time for second echo", 
0, "" };


_cvint  _optefw = { &optefw,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "TE selection: 0 = Minimum TE, 1 = Fat/Water in phase, 2 = Fat/Water out of phase.", 
0, "" };

_cvint  _opti = { &opti,  
    TI_MIN, 
    TI_MAX, 
    TI_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Inversion time", 
0, "" };

_cvint  _opbspti = { &opbspti,  
    TI_MIN, 
    TI_MAX, 
    TI_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "2/3 IR Blood Suppression TI.", 
    EM_PSD_BSP_INCOMPATIBLE, ""
};

_cvint  _opautoti = { &opautoti,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto TI mode", 
0, "" };

_cvint  _opautobti = { &opautobti,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto BSP TI mode", 
0, "" };

_cvint  _optrecovery = { &optrecovery,  
    TRECOVERY_MIN, 
    TRECOVERY_MAX, 
    TRECOVERY_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Recovery time", 
0, "" };

_cvint  _optlabel = { &optlabel,  
    TLABEL_MIN, 
    TLABEL_MAX, 
    TLABEL_DEF,  0, 0, 0, 1, 1, 
    VIS, 
    "Labeling time", 
0, "" };

_cvint  _opt2prepte = { &opt2prepte,  
    TE_MIN, 
    TE_MAX, 
    25000,  0, 0, 0, 1, 1, 
    VIS, 
    "T2PREP Echo time", 
0, "" };

_cvint  _opautotr = { &opautotr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Min TR mode - 1:on, 0:off", 
0, "" };

_cvint  _opnspokes = { &opnspokes,  
    64, 
    512, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "Spokes per Segment", 
0, "" };

_cvfloat  _opoversamplingfactor = { &opoversamplingfactor,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Over sampling factor", 
0, "" };

_cvint  _opinrangetr = { &opinrangetr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,     
    "Flag for In-Range TR mode - 1:on, 0:off", 
0, "" };

_cvint  _optr = { &optr,  
    TR_MIN, 
    TR_MAX, 
    400000,  0, 0, 0, 1, 1, 
    VIS, 
    "Time of repetition", 
0, "" };

_cvfloat  _opflip = { &opflip,  
    1, 
    180, 
    90,  0, 0, 0, 1, 1, 
    VIS, 
    "Flip angle for RF1 slice.", 
0, "" };

_cvint  _opautoflip = { &opautoflip,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Flip Angle mode - 1:on, 0:off", 
0, "" };

_cvint  _opautoetl = { &opautoetl,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto ETL calculation - 1:on, 0:off", 
0, "" };

_cvint  _opetl = { &opetl,  
    1, 
    256, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "Echo Train Length in number of echoes", 
0, "" };

_cvint  _opautorbw = { &opautorbw,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto RBW calculation - 1:on, 0:off", 
0, "" };




_cvfloat  _oprbw = { &oprbw,  
    0, 
    MAXFLOAT, 
    16.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Receive BW in khz", 
0, "" };

_cvfloat  _oprbw2 = { &oprbw2,  
    0, 
    MAXFLOAT, 
    16.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Receive BW for echoes 2-4 in kHz", 
0, "" };





_cvfloat  _opfov = { &opfov,  
    FOV_MIN_LX, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Field of view size in both the x and y direction", 
0, "" };

_cvfloat  _opphasefov = { &opphasefov,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Fraction of the field of view size in the phase direction, 1=full", 
0, "" };

_cvfloat  _opfreqfov = { &opfreqfov,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Fraction of the field of view size in the frequency direction, 1=full", 
0, "" };

_cvint  _opautoslquant = { &opautoslquant,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Slquant calculation - 1:on, 0:off", 
0, "" };

_cvint  _opslquant = { &opslquant,  
    1, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice quantity", 
0, "" };

_cvint  _opsllocs = { &opsllocs,  
    1, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Locations", 
0, "" };

_cvfloat  _opslthick = { &opslthick,  
    MINTHICK, 
    MAXTHICK, 
    5,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice thickness in mm.", 
0, "" };

_cvfloat  _opslspace = { &opslspace,  
    -200, 
    200, 
    10,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice gap in mm.", 
0, "" };

_cvint  _opileave = { &opileave,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "This CV is set to 1 for INTerleaved slices, 0 otherwise", 
0, "" };





_cvint  _opcoax = { &opcoax,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Used to determine FOV for CFH", 
0, "" };

_cvfloat  _opvthick = { &opvthick,  
    0, 
    MAXVTHICK, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Total slab thickness in mm.", 
0, "" };

_cvint  _opvquant = { &opvquant,  
    1, 
    MAXVQUANT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "The number of slabs for 3D", 
0, "" };

_cvint  _opovl = { &opovl,  
    0, 
    SLTAB_MAX, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The number of overlapping locations in a multi-slab 3D prescription", 
0, "" };





_cvfloat  _oplenrl = { &oplenrl,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of ROI in the RL direction in mm", 
0, "" };

_cvfloat  _oplenap = { &oplenap,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of ROI in the AP direction in mm", 
0, "" };

_cvfloat  _oplensi = { &oplensi,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of ROI in the SI direction in mm", 
0, "" };

_cvfloat  _oplocrl = { &oplocrl,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Location of the ROI in the RL direction in mm", 
0, "" };

_cvfloat  _oplocap = { &oplocap,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Location of the ROI in the AP direction in mm", 
0, "" };

_cvfloat  _oplocsi = { &oplocsi,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Location of the ROI in the SI direction in mm", 
0, "" };

_cvfloat  _oprlcsiis = { &oprlcsiis,  
    -PSD_COR, 
    PSD_COR, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Which logical board is RL direction 1=X,2=Y,3=Z", 
0, "" };

_cvfloat  _opapcsiis = { &opapcsiis,  
    -PSD_COR, 
    PSD_COR, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Which logical board is AP direction 1=X,2=Y,3=Z", 
0, "" };

_cvfloat  _opsicsiis = { &opsicsiis,  
    -PSD_COR, 
    PSD_COR, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "Which logical board is SI direction 1=X,2=Y,3=Z", 
0, "" };



_cvfloat  _opmonfov = { &opmonfov,  
    20, 
    FOV_MAX, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of monitor pulse in mm.", 
0, "" };

_cvfloat  _opmonthick = { &opmonthick,  
    5, 
    100, 
    20,  0, 0, 0, 1, 1, 
    VIS, 
    "Monitor thickness in mm.", 
0, "" };

_cvfloat  _opinittrigdelay = { &opinittrigdelay,  
    0.0, 
    100000000, 
    1000000,  0, 0, 0, 1, 1, 
    VIS, 
    "Initial trigger delay(s) for auto voice on smartprep and fluorotrigger.", 
0, "" };





_cvint  _opxres = { &opxres,  
    256, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "X(frequency) resolution", 
0, "" };

_cvint  _opyres = { &opyres,  
    128, 
    2048, 
    128,  0, 0, 0, 1, 1, 
    VIS, 
    "Y(phase) resolution", 
0, "" };

_cvint  _opautonex = { &opautonex,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto NEX calculation - 1:on, 0:off", 
0, "" };

_cvfloat  _opnex = { &opnex,  
    0, 
    150, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Excitations", 
0, "" };

_cvint  _opslicecnt = { &opslicecnt,  
    0, 
    SLTAB_MAX, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "Number of slices before pause.", 
0, "" };

_cvint  _opspf = { &opspf,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Swap Phase and Frequency. 0 = no swap, 1 = swap", 
0, "" };

_cvint  _opcfsel = { &opcfsel,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=current, 1=mid, 2=water, 3=fat, 4=pk, 5=cent", 
0, "" };

_cvint  _opfcaxis = { &opfcaxis,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow comp axis: 1=freq, 2=slice.", 
0, "" };

_cvint  _opphcor = { &opphcor,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Phase Correction - 1:on, 0:off", 
0, "" };

_cvfloat  _opdose = { &opdose,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gadolinium dose in ml.", 0, "Contrast dose must be between 0 and 100 ml."
};






_cvint  _opchrate = { &opchrate,  
    ECG_BPM_MIN, 
    ECG_BPM_MAX, 
    100,  0, 0, 0, 1, 1, 
    VIS, 
    "Heartrate in beats/min.", 
    EM_PSD_HRATE_OUT_OF_RANGE, ""
};

_cvint  _opcphases = { &opcphases,  
    1, 
    MAX_CINE_PHASES, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of cardiac phases for cine.", 
    0, ""
};

_cvint  _opclocs = { &opclocs,  
    1, 
    MAX_CINE_SLICES, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Locs/Acq for CINE", 
    0, ""
};





_cvint  _ophrate = { &ophrate,  
    ECG_BPM_MIN, 
    ECG_BPM_MAX, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "Heartrate in beats/min.", 
    EM_PSD_HRATE_OUT_OF_RANGE, ""
};

_cvint  _oparr = { &oparr,  
    0, 
    50, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Arrythmia rejection ratio", 
0, "" };

_cvint  _ophrep = { &ophrep,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of heart beats per repetition", 
0, "" };

_cvint  _opautotdel1 = { &opautotdel1,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Auto Trigger Delay mode: 0=off, 1=minimum, 2=recommended, 3=systolic, 4=diastolic", 
0, "" };

_cvint  _optdel1 = { &optdel1,  
    MIN_TDEL1, 
    MAX_TDEL1, 
    20000,  0, 0, 0, 1, 1, 
    VIS, 
    "Time of delay from trigger to center of first RF 90", 
0, "" };

_cvint  _optseq = { &optseq,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Inter-sequence time from scan", 
0, "" };

_cvint  _opphases = { &opphases,  
    1, 
    DATA_ACQ_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of phases of the heart cycle to image", 
0, "" };

_cvint  _opcardseq = { &opcardseq,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = other, 1 = minimum, 2 = even", 
0, "" };

_cvint  _opmphases = { &opmphases,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=single phase, 1=multiple phase", 
0, "" };

_cvint  _oparrmon = { &oparrmon,  
    -10, 
    10, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Arrythmia rejection monitoring flag: 1 = yes, 0 = no", 
0, "" };

_cvint  _opvps = { &opvps,  
    -MAXINT, 
    MAXINT, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "Views per segment", 
0, "" };

_cvint  _opcgatetype = { &opcgatetype,  
    CARDIAC_GATE_TYPE_MIN, 
    CARDIAC_GATE_TYPE_MAX, 
    CARDIAC_GATE_TYPE_NONE,  0, 0, 0, 1, 1, 
    VIS, 
    "0=OFF, 1=ECG, 2=PG", 
0, "" };

_cvint  _opadvgate = { &opadvgate,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable Advanced ECG Gating.", 
0, "" };


_cvint  _opfcine = { &opfcine,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Fast CINE Mode.", 
    EM_PSD_FCINE_INCOMPATIBLE, ""
};




_cvint  _opcineir = { &opcineir,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CineIR feature.", 
0, "" };






_cvint  _opstress = { &opstress,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac RealTime Visualization/Acquisition Activation Flag.", 
0, "" };


_cvint  _opnrr = { &opnrr,  
    0, 
    10, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of R-R Intervals to Acquire for Monitor Mode.", 
0, "" };


_cvint  _opnrr_dda = { &opnrr_dda,  
    0, 
    MAXINT, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of R-R Intervals to Acquire for Monitor Mode.", 
0, "" };





_cvint  _oprtcgate = { &oprtcgate,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Trigger flag", 
    EM_PSD_RESP_TRIG_NOT_SUPPORTED, ""
};

_cvint  _oprtrate = { &oprtrate,  
    3, 
    ECG_BPM_MAX, 
    12,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory rate  in beats/min.", 
0, "" };

_cvint  _oprtrep = { &oprtrep,  
    1, 
    5, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of breaths per repetition", 
0, "" };

_cvint  _oprttdel1 = { &oprttdel1,  
    MIN_TDEL1, 
    MAX_TDEL1, 
    20000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Time of delay from trigger to center of first RF 90", 
0, "" };

_cvint  _oprttseq = { &oprttseq,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Inter-sequence time from scan", 
0, "" };

_cvint  _oprtcardseq = { &oprtcardseq,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = other, 1 = minimum, 2 = even", 
0, "" };

_cvint  _oprtarr = { &oprtarr,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Trigger window", 
0, "" };

_cvint  _oprtpoint = { &oprtpoint,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory trigger point", 
0, "" };





_cvint  _opnavrrmeas = { &opnavrrmeas,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Rate measurement: 0 = off, 1 = on", 
0, "" };

_cvint  _opnavrrmeastime = { &opnavrrmeastime,  
    5, 
    300, 
    20,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum Respiratory Rate measurement time in sec", 
0, "" };

_cvint  _opnavrrmeasrr = { &opnavrrmeasrr,  
    3, 
    ECG_BPM_MAX, 
    12,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory rate in beats/min for pinavrrmeasmaxsl calculation", 
0, "" };

_cvint  _opnavsltrack = { &opnavsltrack,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator slab/slice tracking: 0 = off, 1 = on", 
0, "" };

_cvint  _opnavautoaccwin = { &opnavautoaccwin,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator auto acceptance window: 0 = off, 1 = on", 
0, "" };

_cvfloat  _opnavaccwin = { &opnavaccwin,  
    0.0, 
    200.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator acceptance window in mm", 
0, "" };

_cvint  _opnavautotrigtime = { &opnavautotrigtime,  
    0, 
    600, 
    10,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator auto trigger time in sec", 
0, "" };

_cvint  _opnavpsctime = { &opnavpsctime,  
    0, 
    600, 
    10,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator prescan time in sec", 
0, "" };

_cvint  _opnavmaxinterval = { &opnavmaxinterval,  
    50, 
    1000, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum Navigator interval in navigator gating in msec", 
0, "" };

_cvint  _opnavtype = { &opnavtype,  
    PSD_NAV_TYPE_90_180, 
    PSD_NAV_TYPE_CYL, 
    PSD_NAV_TYPE_90_180,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator Type: 0 = 90-180, 1 = Cylindric)", 
0, "" };

_cvint  _opnavpscpause = { &opnavpscpause,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Pause After navigator prescan: 0 = off, 1 = on", 
0, "" };

_cvint  _opnavsigenhance = { &opnavsigenhance,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator Signal Enhancement: 0 = off, 1 = on", 
0, "" };



_cvint  _opasset = { &opasset,  
    0, 
    6, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET mode: 0=off, 1=calibration, 2=phase asset scan, 3=slice asset scan, 5=T2Map, 6= Regularized calibration", 
0, "" };


_cvint  _opassetcal = { &opassetcal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET calibration mode: 0=off, 1=on", 
    EM_PSD_NO_ASSET_CAL, ""
};

_cvint  _opassetscan = { &opassetscan,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET scan mode: 0=off, 1=on", 
    EM_PSD_NO_ASSET_SCAN, ""
};

_cvint  _rhcoilno = { &rhcoilno,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number identifying currently selected coil", 
0, "" };



_cvint  _rhasset = { &rhasset,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET mode: 0=off, 1=calib, 2=phase asset, 3=slice asset, 5=T2Map, 6=Regularized Calib, 7=Regularized Phase Asset, 8=Regularized Slice Asset, 11=ARC, 12=DVC ARC", 
0, "" };


_cvint  _rhasset_calthresh = { &rhasset_calthresh,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET background threshold (10^6 * percentage of volume peak)", 
0, "" };

_cvfloat  _rhasset_R = { &rhasset_R,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET phase encoding reduction factor", 
0, "" };

_cvint  _rhasset_phases = { &rhasset_phases,  
    PHASES_MIN, 
    PHASES_MAX, 
    PHASES_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Images per location for ASSET", 
0, "" };

_cvfloat  _rhscancent = { &rhscancent,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Table position for ASSET scan", 
0, "" };

_cvint  _rhasset_alt_cal = { &rhasset_alt_cal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use alternate ASSET calibration (0-Normal, 1-Apodized for signal voids)", 
    0, ""
};

_cvint  _rhasset_torso = { &rhasset_torso,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Tune ASSET recon for torso scanning", 
    0, ""
};

_cvint  _rhasset_localTx = { &rhasset_localTx,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Tune ASSET recon for local transmit scanning", 
    0, ""
};





_cvint  _oppure = { &oppure,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PURE mode: 0==OFF, 1==OFF, 2==PURE 1, 3==PURE 2", 
    0, ""
};

_cvint  _rhpure = { &rhpure,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "recon PURE mode: 0==OFF, 1==CAL, 2==PURE 1, 3==PURE 2", 
    0, ""
};

_cvint  _oppurecal = { &oppurecal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PURE calibration mode: 0=off, 1=on", 
    0, ""
};

_cvint  _rhpurechannel = { &rhpurechannel,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "receive channel for volume refscan in PURE", 
    0, ""
};


_cvint  _rhpurefilter = { &rhpurefilter,  
    0, 
    1,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "use advanced filter for PURE 1 == yes, 0 == no", 
    0, ""
};


_cvfloat  _rhpure_scale_factor = { &rhpure_scale_factor,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "receiver scaling factor ratio between surface and volume coil for PURE", 
    0, ""
};

_cvint  _cfpure_filtering_mode = { &cfpure_filtering_mode,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE filtering mode", 
    0, ""
};

_cvint  _rhpure_filtering_mode = { &rhpure_filtering_mode,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "recon PURE filtering mode", 
    0, ""
};

_cvfloat  _rhpure_lambda = { &rhpure_lambda,  
    1.0, 
    100.0, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "recon PURE lambda", 
    0, ""
};

_cvfloat  _rhpure_tuning_factor_surface = { &rhpure_tuning_factor_surface,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "recon PURE surface tuning factor", 
    0, ""
};

_cvfloat  _rhpure_tuning_factor_body = { &rhpure_tuning_factor_body,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "recon PURE body tuning factor", 
    0, ""
};

_cvfloat  _rhpure_derived_cal_fraction = { &rhpure_derived_cal_fraction,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE derived calibration fraction", 
    0, ""
};

_cvfloat  _rhpure_cal_reapodization = { &rhpure_cal_reapodization,  
    0.0, 
    MAXFLOAT, 
    12.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE calibration reapodization window radius", 
    0, ""
};

_cvint  _opcalmode = { &opcalmode,  
    CAL_MODE_MIN, 
    CAL_MODE_MAX, 
    CAL_MODE_STANDARD,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration mode: 0=standard, 1=breathhold/free-breathing, 2=free-breathing", 
    0, ""
};

_cvint  _opcaldelay = { &opcaldelay,  
    0, 
    MAXINT, 
    5000000,  0, 0, 0, 1, 1, 
    VIS, 
    "delay time between breathhold and free-breathing passes of ASSET/PURE calibration scan", 
    0, ""
};

_cvint  _rhcal_pass_set_vector = { &rhcal_pass_set_vector,  
    11, 
    3222, 
    12,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration pass set vector", 
    0, ""
};

_cvint  _rhcal_nex_vector = { &rhcal_nex_vector,  
    101, 
    3999999, 
    101,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration pass set NEX vector", 
    0, ""
};

_cvint  _rhcal_weight_vector = { &rhcal_weight_vector,  
    101, 
    3999999, 
    101,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration pass set weight vector", 
    0, ""
};

_cvint  _sifsetwokey = { &sifsetwokey,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to enable fse-II options. 0=off, 1=on"
, 0, "" };

_cvint  _opautosldelay = { &opautosldelay,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for auto sldelay mode. 0=off, 1=on", 
0, "" };




_cvint  _specnuc = { &specnuc,  
    1, 
    129, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Current spectro nucleus.", 
    0, ""
};

_cvint  _specpts = { &specpts,  
    256, 
    MAX_FILTER_POINTS, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of points per frame for spectro.", 
    0, ""
};

_cvint  _specwidth = { &specwidth,  
    500, 
    32000, 
    2000,  0, 0, 0, 1, 1, 
    VIS, 
    "Spectral width.", 
    0, ""
};

_cvint  _specnavs = { &specnavs,  
    1, 
    2048, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of averages for spectro.", 
    0, ""
};

_cvint  _specnex = { &specnex,  
    1, 
    4096, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of excitations for spectro.", 
    0, ""
};

_cvint  _specdwells = { &specdwells,  
    0, 
    4096, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of dwell periods for spectro.", 
    0, ""
};

_cvint  _acquire_type = { &acquire_type,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Type of acq:0=MASTER_1H, 1=SLAVE_1H, 2=S_MNS, 3=M_MNS", 
    0, ""
};





_cvint  _pixmtband = { &pixmtband,  
    1, 
    3, 
    AMP_ERBTEC,  0, 0, 0, 1, 1, 
    INVIS, 
    "RF amplifier specification", 
    0, ""
};

_cvint  _pibbandfilt = { &pibbandfilt,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "o/p filter for broadband", 
    0, ""
};







_cvint  _opwarmup = { &opwarmup,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "warm up mode flag 0:no 1:yes", 
0, "" };

_cvint  _pscahead = { &pscahead,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable the Prescan Ahead option", 
0, "" };

_cvint  _opprescanopt = { &opprescanopt,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The option for skipping Prescan", 
0, "" };

_cvint  _autoadvtoscn = { &autoadvtoscn,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Automate the table movement", 
0, "" };

_cvint  _opapa = { &opapa,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "enable APA from scan", 
0, "" };

_cvint  _oppscapa = { &oppscapa,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "enable APA to prescan", 
0, "" };


_cvint  _PSslice_ind = { &PSslice_ind,   
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PS cfh/tg slice number",  
    0, ""
};




_cvfloat  _asfov = { &asfov,  
    FOV_MIN, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Autoshim acquisition field of view (square)", 
0, "" };

_cvint  _asslquant = { &asslquant,  
    0, 
    3, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of planes to image in autoshim", 
0, "" };

_cvfloat  _asflip = { &asflip,  
    0, 
    360, 
    90,  0, 0, 0, 1, 1, 
    INVIS, 
    "flip angle for autoshim entrypoint", 
0, "" };

_cvfloat  _asslthick = { &asslthick,  
    0, 
    MAXFLOAT, 
    10,  0, 0, 0, 1, 1, 
    INVIS, 
    "slice thickness for autoshim entry point", 
0, "" };

_cvint  _asxres = { &asxres,  
    0, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "x resolution for autoshim entry point", 
0, "" };

_cvint  _asyres = { &asyres,  
    0, 
    MAXINT, 
    128,  0, 0, 0, 1, 1, 
    INVIS, 
    "y resolution for autoshim entry point", 
0, "" };

_cvint  _asbaseline = { &asbaseline,  
    0, 
    MAXINT, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "baselines for autoshim", 
0, "" };

_cvint  _asrhblank = { &asrhblank,  
    0, 
    MAXINT, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "kissoff lines for autoshim", 
0, "" };

_cvint  _asptsize = { &asptsize,  
    2, 
    4, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "pt. size for autoshim", 
0, "" };

_cvint  _opascalcfov = { &opascalcfov,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "FOV for Localized Shim Calc", 
0, "" };




_cvfloat  _tgfov = { &tgfov,  
    FOV_MIN, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Transmit Gain acquisition field of view (square)", 
0, "" };

_cvint  _tgcap = { &tgcap,  
    0, 
    200, 
    200,  0, 0, 0, 1, 1, 
    INVIS, 
    "TG Cap to prevent B1 field from exceeding coil limits", 
0, "" };

_cvint  _tgwindow = { &tgwindow,  
    0, 
    200, 
    200,  0, 0, 0, 1, 1, 
    INVIS, 
    "TG Window corresponding to difference between PSD B1 and system B1", 
0, "" };





_cvint  _oppscvquant = { &oppscvquant,  
     0, 
     MAX_PSC_VQUANT, 
     0,  0, 0, 0, 1, 1, 
     VIS, 
     "Number of Prescan Volumes", 
0, "" };




_cvint  _opdrivemode = { &opdrivemode,  
     0, 
     3, 
     1,  0, 0, 0, 1, 1, 
     VIS, 
     "Drive mode: 0-Single, 1-Quadrature, 2-Preset, 3-Optimized", 
0, "" };

_cvint  _pidrivemodenub = { &pidrivemodenub,  
     0, 
     7, 
     1,  0, 0, 0, 1, 1, 
     VIS, 
     "Bit mask for drive mode UI: 0-Hide UI, 1-Quadrature, 2-Preset, 4-Optimized", 
0, "" };


_cvint  _opexcitemode = { &opexcitemode,  
     0, 
     0, 
     0,  0, 0, 0, 1, 1, 
     VIS, 
     "Excitation Mode: 0-Selective, 1-Non-Selective, 2-Focus", 
0, "" };




_cvfloat  _lp_stretch = { &lp_stretch,  
    1.0, 
    10.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "RF stretch parameter (1 for no stretch)", 
    0, ""
};

_cvint  _lp_mode = { &lp_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Low power mode (0:off  1:on)", 
    0, ""
};

_cvfloat  _derateb1_body_factor = { &derateb1_body_factor,  
    0.0, 
    2.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "derateb1_body_factor", 
    0, ""
};

_cvfloat  _SAR_bodyNV_weight_lim = { &SAR_bodyNV_weight_lim,  
    0.0, 
    225.0, 
    110.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "SAR_bodyNV_weight_lim", 
    0, ""
};

_cvfloat  _derateb1_NV_factor = { &derateb1_NV_factor,  
    0.0, 
    2.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "derateb1_NV_factor", 
    0, ""
};

_cvfloat  _jstd_multiplier_body = { &jstd_multiplier_body,  
    0.0, 
    0.25, 
    0.145,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_multiplier_body", 
    0, ""
};

_cvfloat  _jstd_multiplier_NV = { &jstd_multiplier_NV,  
    0.0, 
    0.25, 
    0.0137,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_multiplier_NV", 
    0, ""
};

_cvfloat  _jstd_exponent_body = { &jstd_exponent_body,  
    0.0, 
    5.0, 
    0.763,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_exponent_body", 
    0, ""
};

_cvfloat  _jstd_exponent_NV = { &jstd_exponent_NV,  
    0.0, 
    5.0, 
    1.154,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_exponent_NV", 
    0, ""
};


_cvint  _pidiffmode = { &pidiffmode, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pifmriscrn = { &pifmriscrn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _piresol = { &piresol,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for resolution in mm field", 
0, "" };

_cvint  _pioverlap = { &pioverlap,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Will allow negative sl. spacing when 1", 
0, "" };

_cvint  _piforkvrgf = { &piforkvrgf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pinofreqoffset = { &pinofreqoffset, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pirepactivenub = { &pirepactivenub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pireprestnub = { &pireprestnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piddanub = { &piddanub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piinitstatnub = { &piinitstatnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piviewordernub = { &piviewordernub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pisliceordnub = { &pisliceordnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pipsdtrignub = { &pipsdtrignub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pispssupnub = { &pispssupnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvint  _pi_neg_sp = { &pi_neg_sp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = positive, 1 = negative slice spacing", 
0, "" };

_cvfloat  _piisvaldef = { &piisvaldef,  
    0.0, 
    20.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "default value for the slice overlap", 
0, "" };


_cvint  _pi2dmde = { &pi2dmde,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to indicate 2DMDE sequence to scan", 
0, "" };




_cvint  _pidmode = { &pidmode,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=normal, 1=cardiac, 2=pause, 3=fastcard", 
0, "" };

_cvint  _piviews = { &piviews,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of views or reps needed for cardiac scan", 
0, "" };

_cvint  _piclckcnt = { &piclckcnt,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of seqs needed before view counter is decremented.", 
0, "" };

_cvfloat  _avmintscan = { &avmintscan,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "scan time", 
0, "" };

_cvfloat  _pitslice = { &pitslice,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "time for each slice in us", 
0, "" };

_cvfloat  _pitscan = { &pitscan,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "time for console clock", 
0, "" };


_cvfloat  _pimscan = { &pimscan,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "time for mask acquisition in ectricks", 
0, "" };


_cvfloat  _pireconlag = { &pireconlag,  
    -3.0, 
    MAXFLOAT, 
    -3.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon Lag time in seconds ", 
0, "" };



_cvfloat  _pitres = { &pitres,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "temporal resolution time", 
0, "" };




_cvint  _pisaveinter = { &pisaveinter,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    " if 1 save intermediate images", 
0, "" };

_cvint  _pivextras = { &pivextras,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "number of extra (vascular) image files to create.", 
0, "" };

_cvint  _pinecho = { &pinecho,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Actual number of echoes for vascular image creation.", 
0, "" };




_cvfloat  _piscancenter = { &piscancenter,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    " center of scan - used by HPC ", 
0, "" };




_cvint  _pismode = { &pismode,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Service modes: 0=none,1=exciter,2=loopbk,3=exciter+loopbk", 
0, "" };

_cvint  _pishldctrl = { &pishldctrl,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Shield cooler control CV. 0=Turn off for scan", 
0, "" };

_cvint  _pinolr = { &pinolr,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Turn off left-right shading fix. 0=fix on, 1=no fix", 
0, "" };

_cvint  _pinoadc = { &pinoadc,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Turn off ADC correction. 0=correction on, 1=no fix", 
0, "" };

_cvint  _pimixtime = { &pimixtime,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "mixing time", 
0, "" };



_cvint  _pishim2 = { &pishim2,  
    HO_SHIM_NO, 
    HO_SHIM_YES, 
    HO_SHIM_NO,  0, 0, 0, 1, 1, 
    INVIS, 
    "High order shim psd", 
0, "" };

_cvint  _pi1stshimb = { &pi1stshimb,  
    HO_SHIM_1ST_BUTTON_ON, 
    HO_SHIM_1ST_BUTTON_OFF, 
    HO_SHIM_1ST_BUTTON_ON,  0, 0, 0, 1, 1, 
    INVIS, 
    "High order shim 1st button", 
0, "" };


_cvfloat  _pifractecho = { &pifractecho,  
    0.5, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Fractional echo ratio for SNR monitor", 
0, "" };

_cvint  _nope = { &nope,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for turning off phase encoding (1: turn off PE, 2: also display mag k-space and save raw data)", 
0, "" };




_cvint  _opuser_usage_tag = { &opuser_usage_tag,  
    0xFFFFFFFF, 
    0x7FFFFFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "User CV and data acq usage tag", 
0, "" };

_cvint  _rhuser_usage_tag = { &rhuser_usage_tag,  
    0xFFFFFFFF, 
    0x7FFFFFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "rhuser CV and data acq usage tag", 
0, "" };

_cvint  _rhFillMapMSW = { &rhFillMapMSW,  
    0x00000000, 
    0x0001FFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "User CV and data acq fillmap MSW", 
0, "" };

_cvint  _rhFillMapLSW = { &rhFillMapLSW,  
    0xFFFFFFFF, 
    0x7FFFFFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "User CV and data acq fillmap LSW", 
0, "" };




_cvint  _rhbline = { &rhbline,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of baseline pairs for NEX=1", 
0, "" };

_cvint  _rhblank = { &rhblank,  
    0, 
    MAXINT, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of blank pixel lines", 
0, "" };

_cvint  _rhnex = { &rhnex,  
    1, 
    150, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of excitations", 
0, "" };

_cvint  _rhnavs = { &rhnavs,  
    1, 
    32767, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of averages", 
0, "" };

_cvint  _rhnslices = { &rhnslices,  
    1, 
    DATA_ACQ_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of slices*phases.", 
0, "" };

_cvint  _rhnrefslices = { &rhnrefslices,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of reference slices.", 
0, "" };

_cvint  _rhnframes = { &rhnframes,  
    1, 
    YRES_MAX, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of recon frames.", 
0, "" };

_cvint  _rhfrsize = { &rhfrsize,  
    1, 
    XRES_MAX, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of complex sample pairs per view", 
0, "" };

_cvint  _rhnecho = { &rhnecho,  
    1, 
    PSD_NECHO_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of echoes ", 
0, "" };

_cvint  _rhnphases = { &rhnphases,  
    1, 
    PHASES_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of phases.", 
0, "" };

_cvint  _rhmphasetype = { &rhmphasetype,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Multiphase type: 0=Intleave 1=Seq.", 
0, "" };


_cvint  _rhtrickstype = { &rhtrickstype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TRICKS Recon Options: 0:Unsub,1:k-space Sub,2:Mag Image Sub,4:Cmplx Image Sub,8:Both Sub & Unsub", 
0, "" };


































_cvint  _rhtype = { &rhtype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS,  
    "Type of processing for recon.", 
0, "" };





















































_cvint  _rhtype1 = { &rhtype1,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Type of processing, 0=regular, 1=homodyne", 
0, "" };


























_cvint  _rhformat = { &rhformat,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Raw data format.", 
0, "" };

_cvint  _rhptsize = { &rhptsize,  
    2, 
    4, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of bytes per I or Q data", 
0, "" };

_cvint  _rhnpomp = { &rhnpomp,  
    1, 
    2, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of regular slices/POMP group", 
0, "" };





















_cvint  _rhrcctrl = { &rhrcctrl,  
    0, 
    MAXINT, 
    17,  0, 0, 0, 1, 1, 
    INVIS,         /* 17 = RHRCMAG + RHRCCOMP */
    "Recon image control", 
0, "" };

















_cvint  _rhdacqctrl = { &rhdacqctrl,  
    0, 
    32767, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon data acquisition control", 
0, "" };
























_cvint  _rhexecctrl = { &rhexecctrl,  
    0, 
    32767, 
    9,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon exective control", 
0, "" };









_cvint  _rhfdctrl = { &rhfdctrl,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Feeder control bits", 
0, "" };

_cvfloat  _rhxoff = { &rhxoff,  
    -512.0, 
    512.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Frequency offset for this image", 
0, "" };

_cvfloat  _rhyoff = { &rhyoff,  
    -1024.0, 
    1024.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Phase offset for this image", 
0, "" };

_cvint  _rhrecon = { &rhrecon,  
    0, 
    30000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Alternate recon word", 
0, "" };

_cvint  _rhdatacq = { &rhdatacq,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Alternate data acquisition word", 
0, "" };

_cvint  _rhvquant = { &rhvquant,  
    0, 
    256, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of 3D slabs", 
0, "" };

_cvint  _rhslblank = { &rhslblank,  
    0, 
    256, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of kissoff slice pairs", 
0, "" };

_cvint  _rhhnover = { &rhhnover,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of half nex overscans", 
0, "" };


_cvint  _rhfeextra = { &rhfeextra,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of points before echo", 
0, "" };

_cvint  _rhheover = { &rhheover,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of half echo oversamples", 
0, "" };

_cvint  _rhoscans = { &rhoscans,  
    0, 
    1024, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of overscans", 
0, "" };

_cvint  _rhddaover = { &rhddaover,  
    0, 
    256, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of half-nex overscans to throw away", 
0, "" };

_cvfloat  _rhzeroph = { &rhzeroph,  
    0.0, 
    1025.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Zero phase point", 
0, "" };

_cvfloat  _rhalpha = { &rhalpha,  
    0.0, 
    1.0, 
    0.46,  0, 0, 0, 1, 1, 
    INVIS, 
    "Alpha value for filter", 
0, "" };

_cvfloat  _rhnwin = { &rhnwin,  
    0.0, 
    256.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Window width", 
0, "" };

_cvfloat  _rhntran = { &rhntran,  
    0.0, 
    256.0, 
    2.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Transition width", 
0, "" };

_cvint  _rhherawflt = { &rhherawflt,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Half echo recon mode: 0 = Homodyne II, 1 = Homodyne II + BEF, 2 = 0 fill with HPF + BEF"
, 0, "" };

_cvfloat  _rhherawflt_befnwin = { &rhherawflt_befnwin,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Window width of band elimination filter (BEF)"
, 0, "" };

_cvfloat  _rhherawflt_befntran = { &rhherawflt_befntran,  
    0.0, 
    MAXFLOAT, 
    2.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Transition width of band elimination filter (BEF)"
, 0, "" };

_cvfloat  _rhherawflt_befamp = { &rhherawflt_befamp,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Amplitude of band elimination filter (BEF)"
, 0, "" };

_cvfloat  _rhherawflt_hpfamp = { &rhherawflt_hpfamp,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Amplitude of high pass filter (HPF)"
, 0, "" };

_cvfloat  _rhfermw = { &rhfermw,  
    0.0, 
    MAXFLOAT, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi width", 
0, "" };

_cvfloat  _rhfermr = { &rhfermr,  
    0.0, 
    MAXFLOAT, 
    128.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi radius", 
0, "" };

_cvfloat  _rhferme = { &rhferme,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi eccentricity", 
0, "" };

_cvfloat  _rhclipmin = { &rhclipmin,  
    -32767.0, 
    32767.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Minimum image value", 
0, "" };

_cvfloat  _rhclipmax = { &rhclipmax,  
    -32767.0, 
    32767.0, 
    16383.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Maximum image value", 
0, "" };

_cvfloat  _rhdoffset = { &rhdoffset,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Gain offset after reconstruction", 
0, "" };

_cvint  _rhudasave = { &rhudasave,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Size of save area in TPS", 
0, "" };

_cvint  _rhsspsave = { &rhsspsave,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Size of ssp save area in TPS", 
0, "" };

_cvfloat  _rh2dscale = { &rh2dscale,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon rational scaling adjustment", 
0, "" };

_cvfloat  _rh3dscale = { &rh3dscale,  
    1.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon scale factor for 3D acqusitions", 
0, "" };

_cvint  _rhnpasses = { &rhnpasses,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of passes in this scan", 
0, "" };

_cvint  _rhincrpass = { &rhincrpass,  
    1, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Xth pass to increment", 
0, "" };

_cvint  _rhinitpass = { &rhinitpass,  
    1, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Minimum # of passes in TPS", 
0, "" };

_cvint  _rhmethod = { &rhmethod,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon method", 
0, "" };

_cvint  _rhdaxres = { &rhdaxres,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Points per frame collected", 
0, "" };

_cvint  _rhdayres = { &rhdayres,  
    0, 
    2049, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Frames per echo collected", 
0, "" };

_cvint  _rhrcxres = { &rhrcxres,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "X transform size", 
0, "" };

_cvint  _rhrcyres = { &rhrcyres,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Y transform size", 
0, "" };

_cvint  _rhimsize = { &rhimsize,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Image size", 
0, "" };

_cvint  _rhnoncart_dual_traj = { &rhnoncart_dual_traj,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Dual Trajectory Flag for 3D UTE", 
0, "" };

_cvint  _rhnoncart_traj_kmax_ratio = { &rhnoncart_traj_kmax_ratio,  

    2, 
    16, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "Low resolution trajectory factor", 
0, "" };

_cvint  _rhnspokes_lowres = { &rhnspokes_lowres,  

    0, 
    MAXINT, 
    8192,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of spokes for low resolution trajectory", 
0, "" };

_cvint  _rhnspokes_highres = { &rhnspokes_highres,  

    1, 
    MAXINT, 
    65536,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of spokes for high resolution trajectory", 
0, "" };

_cvint  _rhnoncart_traj_merge_start = { &rhnoncart_traj_merge_start,  

    1, 
    128, 
    3,  0, 0, 0, 1, 1, 
    INVIS, 
    "Dual trajectory merge start point", 
0, "" };

_cvint  _rhnoncart_traj_merge_end = { &rhnoncart_traj_merge_end,  

    1, 
    128, 
    5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Dual trjaectory merge end point", 
0, "" };

_cvfloat  _rhoversamplingfactor = { &rhoversamplingfactor,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Over sampling factor for recon", 
0, "" };

_cvfloat  _rhnoncart_grid_factor = { &rhnoncart_grid_factor,  
    1.0, 
    4.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "k-space regrid extension factor", 
0, "" };

_cvfloat  _rhuser0 = { &rhuser0,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  0", 0, "" };
_cvfloat  _rhuser1 = { &rhuser1,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  1", 0, "" };
_cvfloat  _rhuser2 = { &rhuser2,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  2", 0, "" };
_cvfloat  _rhuser3 = { &rhuser3,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  3", 0, "" };
_cvfloat  _rhuser4 = { &rhuser4,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  4", 0, "" };
_cvfloat  _rhuser5 = { &rhuser5,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  5", 0, "" };
_cvfloat  _rhuser6 = { &rhuser6,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  6", 0, "" };
_cvfloat  _rhuser7 = { &rhuser7,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  7", 0, "" };
_cvfloat  _rhuser8 = { &rhuser8,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  8", 0, "" };
_cvfloat  _rhuser9 = { &rhuser9,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  9", 0, "" };
_cvfloat  _rhuser10 = { &rhuser10,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 10", 0, "" };
_cvfloat  _rhuser11 = { &rhuser11,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 11", 0, "" };
_cvfloat  _rhuser12 = { &rhuser12,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 12", 0, "" };
_cvfloat  _rhuser13 = { &rhuser13,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 13", 0, "" };
_cvfloat  _rhuser14 = { &rhuser14,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 14", 0, "" };
_cvfloat  _rhuser15 = { &rhuser15,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 15", 0, "" };
_cvfloat  _rhuser16 = { &rhuser16,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 16", 0, "" };
_cvfloat  _rhuser17 = { &rhuser17,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 17", 0, "" };
_cvfloat  _rhuser18 = { &rhuser18,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 18", 0, "" };
_cvfloat  _rhuser19 = { &rhuser19,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 19", 0, "" };
_cvfloat  _rhuser20 = { &rhuser20,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 20", 0, "" };
_cvfloat  _rhuser21 = { &rhuser21,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 21", 0, "" };
_cvfloat  _rhuser22 = { &rhuser22,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 22", 0, "" };
_cvfloat  _rhuser23 = { &rhuser23,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 23", 0, "" };
_cvfloat  _rhuser24 = { &rhuser24,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 24", 0, "" };
_cvfloat  _rhuser25 = { &rhuser25,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 25", 0, "" };
_cvfloat  _rhuser26 = { &rhuser26,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 26", 0, "" };
_cvfloat  _rhuser27 = { &rhuser27,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 27", 0, "" };
_cvfloat  _rhuser28 = { &rhuser28,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 28", 0, "" };
_cvfloat  _rhuser29 = { &rhuser29,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 29", 0, "" };
_cvfloat  _rhuser30 = { &rhuser30,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 30", 0, "" };
_cvfloat  _rhuser31 = { &rhuser31,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 31", 0, "" };
_cvfloat  _rhuser32 = { &rhuser32,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 32", 0, "" };
_cvfloat  _rhuser33 = { &rhuser33,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 33", 0, "" };
_cvfloat  _rhuser34 = { &rhuser34,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 34", 0, "" };
_cvfloat  _rhuser35 = { &rhuser35,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 35", 0, "" };
_cvfloat  _rhuser36 = { &rhuser36,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 36", 0, "" };
_cvfloat  _rhuser37 = { &rhuser37,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 37", 0, "" };
_cvfloat  _rhuser38 = { &rhuser38,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 38", 0, "" };
_cvfloat  _rhuser39 = { &rhuser39,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 39", 0, "" };
_cvfloat  _rhuser40 = { &rhuser40,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 40", 0, "" };
_cvfloat  _rhuser41 = { &rhuser41,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 41", 0, "" };
_cvfloat  _rhuser42 = { &rhuser42,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 42", 0, "" };
_cvfloat  _rhuser43 = { &rhuser43,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 43", 0, "" };
_cvfloat  _rhuser44 = { &rhuser44,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 44", 0, "" };
_cvfloat  _rhuser45 = { &rhuser45,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 45", 0, "" };
_cvfloat  _rhuser46 = { &rhuser46,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 46", 0, "" };
_cvfloat  _rhuser47 = { &rhuser47,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 47", 0, "" };
_cvfloat  _rhuser48 = { &rhuser48,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 48", 0, "" };

_cvint  _rhdab0s = { &rhdab0s,  
    0, 
    31, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Start receiver to poll", 
0, "" };

_cvint  _rhdab0e = { &rhdab0e,  
    0, 
    31, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "End receiver to poll", 
0, "" };

_cvfloat  _rhctr = { &rhctr,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Cine TR in seconds", 
0, "" };

_cvfloat  _rhcrrtime = { &rhcrrtime,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Cine R-R interval in seconds", 
0, "" };

_cvint  _rhcphases = { &rhcphases,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Cine cardiac phases", 
0, "" };

_cvint  _rhovl = { &rhovl,  
    0, 
    SLTAB_MAX, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of overlap slices on each interior side of a slab", 
0, "" };


























_cvint  _rhvtype = { &rhvtype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Vascular recon type", 
0, "" };

_cvfloat  _rhvenc = { &rhvenc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon header value for velocity encoding.", 
0, "" };

_cvfloat  _rhvcoefxa = { &rhvcoefxa,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefxb = { &rhvcoefxb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefxc = { &rhvcoefxc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefxd = { &rhvcoefxd,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefya = { &rhvcoefya,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefyb = { &rhvcoefyb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefyc = { &rhvcoefyc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefyd = { &rhvcoefyd,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefza = { &rhvcoefza,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefzb = { &rhvcoefzb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefzc = { &rhvcoefzc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefzd = { &rhvcoefzd,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };





_cvfloat  _rhvmcoef1 = { &rhvmcoef1,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };

_cvfloat  _rhvmcoef2 = { &rhvmcoef2,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };

_cvfloat  _rhvmcoef3 = { &rhvmcoef3,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };

_cvfloat  _rhvmcoef4 = { &rhvmcoef4,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };




_cvfloat  _rhphasescale = { &rhphasescale,  
    0.0, 
    2.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon phase scale factor for Asymmetric FOV", 
0, "" };

_cvfloat  _rhfreqscale = { &rhfreqscale,  
    0.0, 
    2.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Future recon frequency scale factor for Asymmetric FOV", 
0, "" };


_cvint  _rawmode = { &rawmode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Raw image reconstruction: 0=off, 1=on.", 
0, "" };





_cvint  _rhileaves = { &rhileaves,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of interleaves", 
0, "" };

_cvint  _rhkydir = { &rhkydir,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Ky traversal direction:0=top-down,1=centric,2=bottom-up", 
0, "" };

_cvint  _rhalt = { &rhalt,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Alt read sign:0=no,1=odd/evn,2=halves,3=pairs", 
0, "" };

_cvint  _rhreps = { &rhreps,  
    1, 
    256, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of scan repetitions", 
0, "" };

_cvint  _rhref = { &rhref,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "0=use old phase corr, 1=use new phase corr", 
0, "" };





_cvint  _rhpcthrespts = { &rhpcthrespts,  
    2, 
    32, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Adj pts req'd for amp threshold calc", 
0, "" };

_cvint  _rhpcthrespct = { &rhpcthrespct,  
    0, 
    100, 
    15,  0, 0, 0, 1, 1, 
    VIS, 
    "% of projection's peak magnitude for threshold calc", 
0, "" };

_cvint  _rhpcdiscbeg = { &rhpcdiscbeg,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Points discarded at beginning of post row FT array", 
0, "" };

_cvint  _rhpcdiscmid = { &rhpcdiscmid,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Points discarded at middle of post row FT array", 
0, "" };

_cvint  _rhpcdiscend = { &rhpcdiscend,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Points discarded at end of post row FT array", 
0, "" };

_cvint  _rhpcileave = { &rhpcileave,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Interleaves to use for correction: 0=all, 1=1st, 2=1st interpolated", 
0, "" };

_cvint  _rhpcextcorr = { &rhpcextcorr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Ext pc file /usr/g/bin/pc.dat: 0=don't use, 1=use", 
0, "" };

_cvint  _rhrefframes = { &rhrefframes,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Total number of frames acquired for an entire REF scan", 
0, "" };


_cvint  _rhpcsnore = { &rhpcsnore,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "SNORE processing switch for REF data: 0=off,1=on", 
0, "" };

_cvint  _rhpcspacial = { &rhpcspacial,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PC space specificity: 0=use all, >=1 for one slice", 
0, "" };

_cvint  _rhpctemporal = { &rhpctemporal,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PC temporal specificity: 0=use all, >=1 for one phase", 
0, "" };

_cvfloat  _rhpcbestky = { &rhpcbestky,  
    1.0, 
    1024.0, 
    64.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Best ky index for coefficient remap", 
0, "" };

_cvint  _rhhdbestky = { &rhhdbestky,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Homodyne best ky", 
0, "" };


_cvint  _rhpcinvft = { &rhpcinvft,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inverse row FT switch for post fix time domain image: 0=off, 1=on", 
0, "" };

_cvint  _rhpcctrl = { &rhpcctrl,  
    0, 
    32768, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Control for various phase correction tests", 
0, "" };


_cvint  _rhpctest = { &rhpctest,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Test mode control: 0=off, 1=msgs. to terminal/vectors to disk", 
0, "" };

_cvint  _rhpcgraph = { &rhpcgraph,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "UNUSED", 
0, "" };

_cvint  _rhpclin = { &rhpclin,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear correction: 0=off,1=on", 
0, "" };

_cvint  _rhpclinnorm = { &rhpclinnorm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear corr norm. switch: 0=weight, 1=normalize", 
0, "" };

_cvint  _rhpclinnpts = { &rhpclinnpts,  
    0, 
    256, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear correction fit points (for ord>=2)", 
0, "" };

_cvint  _rhpclinorder = { &rhpclinorder,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear fit order: 0=Ky spcfc;1=Kybest;2=line;3,4=poly", 
0, "" };

_cvint  _rhpclinfitwt = { &rhpclinfitwt,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear corr fit weight: 0=equal,1=via kybest,2=via mag", 
0, "" };

_cvint  _rhpclinavg = { &rhpclinavg,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear corr averaging for order=1: 0=off, 1=on", 
0, "" };

_cvint  _rhpccon = { &rhpccon,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr:0=off,1=on", 
0, "" };

_cvint  _rhpcconnorm = { &rhpcconnorm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr norm. switch: 0=weight, 1=normalize", 
0, "" };

_cvint  _rhpcconnpts = { &rhpcconnpts,  
    2, 
    256, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr fit points", 
0, "" };

_cvint  _rhpcconorder = { &rhpcconorder,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant fit order: 0=vu spcfc;1=Kybest;2=line;3,4=poly", 
0, "" };

_cvint  _rhpcconfitwt = { &rhpcconfitwt,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr fit weight: 0=equal,1=via kybest,2=via mag", 
0, "" };





_cvint  _rhvrgfxres = { &rhvrgfxres,  
    1, 
    XRES_MAX, 
    128,  0, 0, 0, 1, 1, 
    VIS, 
    "VRGF final xres.", 
0, "" };

_cvint  _rhvrgf = { &rhvrgf,   
    0, 
    16, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VRGF switch: 0=off, 1=on.", 
0, "" };





_cvint  _rhbp_corr = { &rhbp_corr,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "EPI bandpass correction:0=off,1=on,2=magnitude only,3=phase only.", 
0, "" };

_cvfloat  _rhrecv_freq_s = { &rhrecv_freq_s,  
    -500.0e3, 
    500.0e3, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "bandpass correction interpolation range starting frequency (Hz).", 
0, "" };

_cvfloat  _rhrecv_freq_e = { &rhrecv_freq_e,  
    -500.0e3, 
    500.0e3, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "bandpass correction interpolation range ending frequency (Hz).", 
0, "" };

_cvint  _rhhniter = { &rhhniter,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "selects the type of homodyne 3reconstrution to be used: 0-I, 1-II.", 
0, "" };

_cvint  _rhfast_rec = { &rhfast_rec,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "tells if the fast receiver is being used and its lpf setting.", 
0, "" };





_cvint  _rhgridcontrol = { &rhgridcontrol,  
    0, 
    65536, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Mask for gridding related controls.", 
0, "" };

_cvint  _rhb0map = { &rhb0map,  
    0, 
    2049, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "B0 field inhomogeneity correction flag and B0 phase map size bitmask", 
0, "" };

_cvint  _rhtediff = { &rhtediff,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "TE delay between the two arms for phase map.", 
0, "" };

_cvfloat  _rhradiusa = { &rhradiusa,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inner trajectory part of a variable trajectory.", 
0, "" };

_cvfloat  _rhradiusb = { &rhradiusb,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Outer trajectory part of a variable trajectory.", 
0, "" };

_cvfloat  _rhmaxgrad = { &rhmaxgrad,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum gradient based on FOV and BW.", 
0, "" };

_cvfloat  _rhslewmax = { &rhslewmax,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum slew rate used.", 
0, "" };

_cvfloat  _rhscanfov = { &rhscanfov,  
    0, 
    FOV_MAX, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Scan FOV.in mm", 
0, "" };

_cvfloat  _rhtsamp = { &rhtsamp,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Sampling time.", 
0, "" };

_cvfloat  _rhdensityfactor = { &rhdensityfactor,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Density factor.", 
0, "" };

_cvfloat  _rhdispfov = { &rhdispfov,  
    0.0, 
    FOV_MAX, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Display FOV.in mm", 
0, "" };

_cvint  _rhmotioncomp = { &rhmotioncomp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for motion compensation (0=No, 1=Yes).", 
0, "" };

_cvint  _grid_fov_factor = { &grid_fov_factor,  
    1, 
    2, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "k-space oversampling factor for gridding (1 or 2)", 
0, "" };





_cvint  _rhte = { &rhte,  
    0, 
    TE_MAX, 
    25000,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for echo time", 
0, "" };

_cvint  _rhte2 = { &rhte2,  
    0, 
    TE_MAX, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for second echo time", 
0, "" };

_cvint  _rhdfm = { &rhdfm,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon CV to activate DFM reconstruction routine : 0=off, 1=on(least-squares method), 3=on(Ahn's method).", 
0, "" };

_cvint  _rhdfmnavsperpass = { &rhdfmnavsperpass,  
    1, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for Maximum number of DFM navigator frames per pass.", 
0, "" };

_cvint  _rhdfmnavsperview = { &rhdfmnavsperview,  
    1, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for number of DFM navigator frames per view.", 
0, "" };

_cvfloat  _rhdfmrbw = { &rhdfmrbw,  
    0, 
    MAXFLOAT, 
    31.25,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for RBW in khz for dfm navigator echo", 
0, "" };

_cvint  _rhdfmptsize = { &rhdfmptsize,  
    2, 
    4, 
    2,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon CV for DFM point size: 2=16 bit data, 4=32 bit data.", 
0, "" };

_cvint  _rhdfmxres = { &rhdfmxres,  
    16, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for DFM xres.", 
0, "" };

_cvint  _rhdfmdebug = { &rhdfmdebug,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "DFM recon debug. 0=nothing, 1=write data, 2=read data, 3=2 pass with and without MMC recon.", 
0, "" };

_cvfloat  _rhdfmthreshold = { &rhdfmthreshold,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for DFM threshold.", 
0, "" };


_cvint  _rh_rc_enhance_enable = { &rh_rc_enhance_enable,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "SO TOOLS WORK IN ME2", 
0, "" };

_cvint  _rh_ime_scic_enable = { &rh_ime_scic_enable,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS,  
    "surface coil intensity correction: 1 if enabled", 
0, "" };

_cvfloat  _rh_ime_scic_edge = { &rh_ime_scic_edge,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Edge Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _rh_ime_scic_smooth = { &rh_ime_scic_smooth,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Smooth Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _rh_ime_scic_focus = { &rh_ime_scic_focus,  
    0.0, 
    10.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Focus Parameter for Enhanced Recon", 
0, "" };

_cvint  _rh_ime_clariview_type = { &rh_ime_clariview_type,  
    0, 
    256, 
    1,  0, 0, 0, 1, 1, 
    VIS,  
    "Type ofClariview/Name of Filter", 
0, "" };

_cvfloat  _rh_ime_clariview_edge = { &rh_ime_clariview_edge,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Edge Parameter for Clariview", 
0, "" };

_cvfloat  _rh_ime_clariview_smooth = { &rh_ime_clariview_smooth,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Smooth Parameter for Clariview", 
0, "" };

_cvfloat  _rh_ime_clariview_focus = { &rh_ime_clariview_focus,  
    0.0, 
    10.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Focus Parameter for Clariview", 
0, "" };

_cvfloat  _rh_ime_scic_reduction = { &rh_ime_scic_reduction,  
    0.0, 
    2048.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Reduction Parameter for SCIC", 
0, "" };

_cvfloat  _rh_ime_scic_gauss = { &rh_ime_scic_gauss,  
    0.0, 
    128.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gauss Parameter for SCIC", 
0, "" };

_cvfloat  _rh_ime_scic_threshold = { &rh_ime_scic_threshold,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Threshold Parameter for SCIC", 
0, "" };


_cvint  _rhphsen_pixel_offset = { &rhphsen_pixel_offset,  
    -32768, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "pixel offset value for Phase sensitive images", 
0, "" };



_cvint  _rhapp = { &rhapp,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Automatic post processing technique", 
    0, ""
};

_cvint  _rhapp_option = { &rhapp_option,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Tensor Post processing options", 
    0, ""
};



_cvint  _rhncoilsel = { &rhncoilsel,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Auto N-Coil selection", 
    0, ""
};

_cvint  _rhncoillimit = { &rhncoillimit,  
    0, 
    100, 
    45,  0, 0, 0, 1, 1, 
    VIS, 
    "Coil Selection limit", 
    0, ""
};

_cvint  _rhrefframep = { &rhrefframep,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of frames per pass for a REF scan", 
    0, ""
};

_cvint  _rhscnframe = { &rhscnframe,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Total number of frames acquired for an entire SCAN", 
    0, ""
};

_cvint  _rhpasframe = { &rhpasframe,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of frames per pass", 
    0, ""
};

_cvint  _rhpcfitorig = { &rhpcfitorig,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1=adjust view indices so bestky view = 0", 
    0, ""
};

_cvint  _rhpcshotfirst = { &rhpcshotfirst,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "First view within an echo group", 
    0, ""
};

_cvint  _rhpcshotlast = { &rhpcshotlast,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Last view within an echo group", 
    0, ""
};

_cvint  _rhpcmultegrp = { &rhpcmultegrp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1 = force pts from other echo groups to be used", 
    0, ""
};

_cvint  _rhpclinfix = { &rhpclinfix,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1=force neg slope to pos,2=fix to rhpclinslope", 
    0, ""
};

_cvfloat  _rhpclinslope = { &rhpclinslope,  
    -6.28318, 
    6.28318, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Value for linear correction slope if fixed", 
    0, ""
};

_cvint  _rhpcconfix = { &rhpcconfix,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1=force neg slope to pos,2=fix to rhpcconslope", 
    0, ""
};

_cvfloat  _rhpcconslope = { &rhpcconslope,  
    -6.28318, 
    6.28318, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Value for const correction slope if fixed", 
    0, ""
};

_cvint  _rhpccoil = { &rhpccoil,  
    0, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "0=coil specific, 1=use 1, 2=use 2, 3=use 3, 4=use 4", 
    0, ""
};

_cvfloat  _rhmaxcoef1a = { &rhmaxcoef1a,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Z^2 Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef1b = { &rhmaxcoef1b,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "X^2+Y^2 Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef1c = { &rhmaxcoef1c,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "XZ Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef1d = { &rhmaxcoef1d,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "YZ Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef2a = { &rhmaxcoef2a,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Z^2 Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef2b = { &rhmaxcoef2b,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "X^2+Y^2 Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef2c = { &rhmaxcoef2c,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "XZ Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef2d = { &rhmaxcoef2d,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "YZ Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef3a = { &rhmaxcoef3a,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Z^2 Maxwell Term for Flow Image 3", 
    0, ""
};

_cvfloat  _rhmaxcoef3b = { &rhmaxcoef3b,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "X^2+Y^2 Maxwell Term for Flow Image 3", 
    0, ""
};

_cvfloat  _rhmaxcoef3c = { &rhmaxcoef3c,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "XZ Maxwell Term for Flow Image 3", 
    0, ""
};

_cvfloat  _rhmaxcoef3d = { &rhmaxcoef3d,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "YZ Maxwell Term for Flow Image 3", 
    0, ""
};

_cvint  _rhdptype = { &rhdptype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Diffusion / Perfusion imaging option", 
    0, ""
};

_cvint  _rhnumbvals = { &rhnumbvals,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Diffusion b values", 
0, "" };

_cvint  _rhdifnext2 = { &rhdifnext2,   
    0,  
    MAXINT,  
    1,  0, 0, 0, 1, 1,  
    VIS,  
    "Number of NEX for diffusion T2 image", 
0, "" };

_cvint  _rhnumdifdirs = { &rhnumdifdirs,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of diffusion directions for DWI", 
0, "" };

_cvint  _rhutctrl = { &rhutctrl,  
    0, 
    MAXINT,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon utility control", 
    0, ""
};

_cvfloat  _rhzipfact = { &rhzipfact,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon slice ZIP factor.", 
    0, ""
};

_cvint  _rhfcinemode = { &rhfcinemode,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fast CINE mode bitmask.", 
    0, ""
};

_cvint  _rhfcinearw = { &rhfcinearw,  
    0, 
    100, 
    10,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fast CINE Arrhythmia Rejection Window (ARW)", 
    0, ""
};

_cvint  _rhvps = { &rhvps,  
    1, 
    1024, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "Views per Segment (VPS)", 
    0, ""
};

_cvint  _rhvvsaimgs = { &rhvvsaimgs,  
    1, 
    DATA_ACQ_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of original images.", 
    0, ""
};

_cvint  _rhvvstr = { &rhvvstr,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Variable-view sharing TR in us", 
    0, ""
};

_cvint  _rhvvsgender = { &rhvvsgender,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gender (0=Male, 1=Female)", 
    0, ""
};


_cvint  _rhgradmode = { &rhgradmode, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rhfatwater = { &rhfatwater,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "fat water imaging control flag.", 
    0, ""
};

_cvint  _rhfiesta = { &rhfiesta,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon type for FIESTA. 1:Averaging 2:Sum Square 3:MIP 256:DFT on/off 6:SOSOnMag+AvgOnPhase", 
    0, ""
};

_cvint  _rhlcfiesta = { &rhlcfiesta,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon type for LCFIESTA. 0:off 1:water&both 2:fat&both 3:water&fat", 
    0, ""
};

_cvfloat  _rhlcfiesta_phase = { &rhlcfiesta_phase,  
    0.0, 
    0.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "LCFIESTA combine phase value[radian]", 
    0, ""
};




_cvint  _rhdwnavview = { &rhdwnavview,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of views for navigator echoes", 
    0, ""
};

_cvint  _rhdwnavcorecho = { &rhdwnavcorecho,  
    1, 
    16, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of echoes for actual navigator correction", 
    0, ""
};

_cvint  _rhdwnavsview = { &rhdwnavsview,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Start view for phase connection process", 
    0, ""
};

_cvint  _rhdwnaveview = { &rhdwnaveview,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "End view for phase connection process", 
    0, ""
};

_cvint  _rhdwnavsshot = { &rhdwnavsshot,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Start shot for delta phase estimation in navigator echoes", 
    0, ""
};

_cvint  _rhdwnaveshot = { &rhdwnaveshot,  
    1, 
    512, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "End shot for delta phase estimation in navigator echoes", 
    0, ""
};

_cvfloat  _rhdwnavcoeff = { &rhdwnavcoeff,  
    0.0, 
    1.0, 
    0.5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Coefficient for amount of phase connection", 
    0, ""
};







_cvint  _rhdwnavcor = { &rhdwnavcor,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Navigator correction control for DW-EPI.", 
    0, ""
};


_cvfloat  _rhassetsl_R = { &rhassetsl_R,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice ASSET encoding reduction factor", 
    0, ""
};

_cvfloat  _rhasset_slwrap = { &rhasset_slwrap,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Oversampling factor as a fraction of Rxed slices", 
    0, ""
};



_cvint  _rh3dwintype = { &rh3dwintype,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = Modified Hanning window;  1 = Modified Tukey window", 
    0, ""
};

_cvfloat  _rh3dwina = { &rh3dwina,  
    0.0, 
    1.0, 
    0.1,  0, 0, 0, 1, 1, 
    VIS, 
    "Degree of  apodization; 0.0 = Boxcar; 1.0 = Hanning", 
    0, ""
};

_cvfloat  _rh3dwinq = { &rh3dwinq,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Apodization at ends, 0.0 = Max apodization; 1.0 = Boxcar", 
    0, ""
};


_cvint  _rhectricks_num_regions = { &rhectricks_num_regions, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rhectricks_input_regions = { &rhectricks_input_regions, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };













_cvint  _rhretro_control = { &rhretro_control,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "RetroPC configuration control", 
    0, ""
};

_cvint  _rhetl = { &rhetl,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "RetroPC echo train length", 
    0, ""
};


_cvint  _rhleft_blank = { &rhleft_blank,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of data elements at start of frame to zero", 
    0, ""
};

_cvint  _rhright_blank = { &rhright_blank,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of data elements at end of frame to zero", 
    0, ""
};




_cvfloat  _rhspecwidth = { &rhspecwidth,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS,  
    "Recon spectral width", 
    0, ""
};

_cvint  _rhspeccsidims = { &rhspeccsidims,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "Recon number of CSI dimensions", 
    0, ""
};

_cvint  _rhspecrescsix = { &rhspecrescsix,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CSI resolution of X dimension", 
    0, ""
};

_cvint  _rhspecrescsiy = { &rhspecrescsiy,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CSI resolution of Y dimension", 
    0, ""
};

_cvint  _rhspecrescsiz = { &rhspecrescsiz,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CSI resolution of Z dimension", 
    0, ""
};

_cvfloat  _rhspecroilenx = { &rhspecroilenx,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI length in X dimension", 
    0, ""
};

_cvfloat  _rhspecroileny = { &rhspecroileny,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI length in Y dimension", 
    0, ""
};

_cvfloat  _rhspecroilenz = { &rhspecroilenz,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI length in Z dimension", 
    0, ""
};

_cvfloat  _rhspecroilocx = { &rhspecroilocx,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI location in X dimension", 
    0, ""
};

_cvfloat  _rhspecroilocy = { &rhspecroilocy,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI location in Y dimension", 
    0, ""
};

_cvfloat  _rhspecroilocz = { &rhspecroilocz,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI location in Z dimension", 
    0, ""
};

_cvint  _rhexciterusage = { &rhexciterusage,  
    0, 
    65535, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Exciter usage bitmask: 1 activates SPS control", 
    0, ""
};

_cvint  _rhexciterfreqs = { &rhexciterfreqs,  
    0, 
    65535, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Exciter freq. usage bitmask: 0 precludes broadband", 
    0, ""
};


_cvint  _rhwiener = { &rhwiener,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use Wiener filter", 
0, "" };

_cvfloat  _rhwienera = { &rhwienera,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Demodulation denoising", 
0, "" };

_cvfloat  _rhwienerb = { &rhwienerb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Demodulation gain", 
0, "" };

_cvfloat  _rhwienert2 = { &rhwienert2,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "T2 for demodulation", 
0, "" };

_cvfloat  _rhwieneresp = { &rhwieneresp,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Echo spacing in seconds", 
0, "" };

_cvint  _rhflipfilter = { &rhflipfilter,  
    0, 
    1000, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for PSD generated filter", 
0, "" };

_cvint  _rhdbgrecon = { &rhdbgrecon,  
    0, 
    10, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use Wiener filter", 
0, "" };

_cvint  _rhech2skip = { &rhech2skip,  
    0, 
    2048, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use Wiener filter", 
0, "" };














_cvint  _rhrcideal = { &rhrcideal,  
    0, 
    255, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "IDEAL processing indicator", 
    0, ""
};





















_cvint  _rhrcdixproc = { &rhrcdixproc,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask for choice of images to be reconstructed by IDEAL processing", 
    0, ""

};

























_cvint  _rhrcidealctrl = { &rhrcidealctrl,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "IDEAL processing control", 
    0, ""

};

_cvint  _rhdf = { &rhdf,  
    0, 
    MAXINT, 
    FATWATER_DIXFREQ_1_5T,  0, 0, 0, 1, 1, 
    INVIS, 
    "Delta frequency(Hz) used in IDEAL", 
0, "" };

_cvint  _rhmedal_mode = { &rhmedal_mode,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL recon mode: 0=off, 1:PSIR, 2:MEDAL", 
    0, ""
};

_cvint  _rhmedal_nstack_size = { &rhmedal_nstack_size,  
    18, 
    255, 
    54,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL nstack", 
    0, ""
};

_cvint  _rhmedal_echo_order = { &rhmedal_echo_order,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL echo order: 0=OOP/IP, 1=IP/OOP", 
    0, ""
};

_cvint  _rhmedal_up_kernel_size = { &rhmedal_up_kernel_size,  
    4, 
    2048, 
    15,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL up kernel size", 
    0, ""
};

_cvint  _rhmedal_down_kernel_size = { &rhmedal_down_kernel_size,  
    4, 
    2048, 
    8,  0, 0, 0, 1, 1,  
    VIS, 
    "MEDAL down kernel size", 
    0, ""
};

_cvint  _rhmedal_smooth_kernel_size = { &rhmedal_smooth_kernel_size,  
    4, 
    2048, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL smooth kernel size", 
    0, ""
};

_cvint  _rhmedal_starting_slice = { &rhmedal_starting_slice,  
    0, 
    2048, 
    32,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL starting slice", 
    0, ""
};

_cvint  _rhmedal_ending_slice = { &rhmedal_ending_slice,  
    0, 
    2048, 
    32,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL ending slice", 
    0, ""
};

_cvint  _rhvibrant = { &rhvibrant,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VIBRANT recon flag", 
    0, ""
};

_cvint  _rhkacq_uid = { &rhkacq_uid,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Parallel Imaging kacq file unique ID", 
    0, ""
};


_cvint  _rhnex_unacquired = { &rhnex_unacquired,  
    1, 
    150, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "NEX for unacquired encodes", 
0, "" };





_cvint  _rhdiskacqctrl = { &rhdiskacqctrl,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Acquisition to Disk Control Variable", 
    0, ""	
};


_cvint  _rhechopc_extra_bot = { &rhechopc_extra_bot,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Ky data length of extra frame space for phase correction", 
    0, ""	
};

_cvint  _rhechopc_ylines = { &rhechopc_ylines,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Ky lines for primary/reverse reference data", 
    0, ""	
};

_cvint  _rhechopc_primary_yfirst = { &rhechopc_primary_yfirst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Location of first line of primary reference data", 
    0, ""	
};

_cvint  _rhechopc_reverse_yfirst = { &rhechopc_reverse_yfirst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Location of first line of reverse reference data", 
    0, ""	
};

_cvint  _rhechopc_zlines = { &rhechopc_zlines,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Kz lines for primary/reverse reference data", 
    0, ""	
};

_cvint  _rhechopc_yxfitorder = { &rhechopc_yxfitorder,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "fitting order of phase correction", 
    0, ""	
};

_cvint  _rhechopc_ctrl = { &rhechopc_ctrl,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Control flag for phase correction", 
    0, ""	
};

_cvint  _rhchannel_combine_filter_type = { &rhchannel_combine_filter_type,  
    RHCHANNEL_COMBINE_FILTER_TYPE_NONE, 
    RHCHANNEL_COMBINE_FILTER_TYPE_HANNING, 
    RHCHANNEL_COMBINE_FILTER_TYPE_NONE,  0, 0, 0, 1, 1, 
    VIS, 
    "Filter type for phase filtering. 0- None, 1-Bessel, 2-Hanning", 
    0, ""
};

_cvfloat  _rhchannel_combine_filter_width = { &rhchannel_combine_filter_width,  
    0.05, 
    1.0, 
    0.3,  0, 0, 0, 1, 1, 
    VIS, 
    "Percentage of pixels under main lobe width", 
    0, ""
};

_cvfloat  _rhchannel_combine_filter_beta = { &rhchannel_combine_filter_beta,  
    0, 
    MAXFLOAT, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Beta value for the Modified Bessel Filter", 
    0, ""
};

_cvfloat  _rh_low_pass_nex_filter_width = { &rh_low_pass_nex_filter_width,  
    0.0, 
    MAXFLOAT, 
    8.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Phase correction filter width for Complex NEX", 
0, "" };




_cvint  _ihtr = { &ihtr,  
    TR_MIN, 
    TR_MAX, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TR annonation for current image.", 
0, "" };

_cvint  _ihti = { &ihti,  
    0, 
    TI_MAX, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TI annotation for current image.", 
0, "" };

_cvint  _ihtdel1 = { &ihtdel1,  
    MIN_TDEL1, 
    MAX_TDEL1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Delay from trigger to center of RF1 pulse.", 
0, "" };

_cvfloat  _ihnex = { &ihnex,  
    0, 
    NEX_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of excitations for current image.", 
0, "" };

_cvfloat  _ihflip = { &ihflip,  
    0, 
    180, 
    90,  0, 0, 0, 1, 1, 
    INVIS, 
    "flip angle for the current image.", 
0, "" };

_cvint  _ihte1 = { &ihte1,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 1.", 
0, "" };

_cvint  _ihte2 = { &ihte2,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 2.", 
0, "" };

_cvint  _ihte3 = { &ihte3,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 3.", 
0, "" };

_cvint  _ihte4 = { &ihte4,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 4.", 
0, "" };

_cvint  _ihte5 = { &ihte5,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 5.", 
0, "" };

_cvint  _ihte6 = { &ihte6,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 6.", 
0, "" };

_cvint  _ihte7 = { &ihte7,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 7.", 
0, "" };

_cvint  _ihte8 = { &ihte8,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 8.", 
0, "" };

_cvint  _ihte9 = { &ihte9,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 9.", 
0, "" };

_cvint  _ihte10 = { &ihte10,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 10.", 
0, "" };

_cvint  _ihte11 = { &ihte11,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 11.", 
0, "" };

_cvint  _ihte12 = { &ihte12,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 12.", 
0, "" };

_cvint  _ihte13 = { &ihte13,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 13.", 
0, "" };

_cvint  _ihte14 = { &ihte14,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 14.", 
0, "" };

_cvint  _ihte15 = { &ihte15,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 15.", 
0, "" };

_cvint  _ihte16 = { &ihte16,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 16.", 
0, "" };

_cvint  _ihdixonte = { &ihdixonte,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Effective TE annotation for DIXON-processed images for IDEAL/MEDAL.", 
0, "" };

_cvint  _ihdixonipte = { &ihdixonipte,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Effective IP TE annotation for DIXON-processed images for IDEAL/MEDAL.", 
0, "" };


_cvint  _ihdixonoopte = { &ihdixonoopte,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Effective OOP TE annotation for DIXON-processed images for IDEAL/MEDAL.", 
0, "" };

_cvfloat  _ihvbw1 = { &ihvbw1,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 1.", 
0, "" };

_cvfloat  _ihvbw2 = { &ihvbw2,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 2.", 
0, "" };

_cvfloat  _ihvbw3 = { &ihvbw3,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 3.", 
0, "" };

_cvfloat  _ihvbw4 = { &ihvbw4,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 4.", 
0, "" };

_cvfloat  _ihvbw5 = { &ihvbw5,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 5.", 
0, "" };

_cvfloat  _ihvbw6 = { &ihvbw6,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 6.", 
0, "" };

_cvfloat  _ihvbw7 = { &ihvbw7,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 7.", 
0, "" };

_cvfloat  _ihvbw8 = { &ihvbw8,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 8.", 
0, "" };

_cvfloat  _ihvbw9 = { &ihvbw9,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 9.", 
0, "" };

_cvfloat  _ihvbw10 = { &ihvbw10,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 10.", 
0, "" };

_cvfloat  _ihvbw11 = { &ihvbw11,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 11.", 
0, "" };

_cvfloat  _ihvbw12 = { &ihvbw12,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 12.", 
0, "" };

_cvfloat  _ihvbw13 = { &ihvbw13,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 13.", 
0, "" };

_cvfloat  _ihvbw14 = { &ihvbw14,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 14.", 
0, "" };

_cvfloat  _ihvbw15 = { &ihvbw15,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 15.", 
0, "" };

_cvfloat  _ihvbw16 = { &ihvbw16,  
    0.0, 
    2000000, 
    16,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 16.", 
0, "" };

_cvint  _ihnegscanspacing = { &ihnegscanspacing,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = sp, 1 = ov for slice spacing", 
    0, ""
};

_cvint  _ihoffsetfreq = { &ihoffsetfreq,  
    400, 
    1600, 
    1200,  0, 0, 0, 1, 1, 
    INVIS, 
    "MT offset frequency (hz)", 
    0, ""
};

_cvint  _ihbsoffsetfreq = { &ihbsoffsetfreq,  
    -5000, 
    5000, 
    4000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bloch Siegert RF offset frequency (hz)", 
    0, ""
};

_cvint  _iheesp = { &iheesp,  
    0, 
    10000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Annotation for effective echo spacing (usec)", 
    0, ""
};

_cvint  _ihfcineim = { &ihfcineim,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Fast CINE interpolation method (0=None, 1=Linear, 2=Nearest Neighbor)", 
    0, ""
};

_cvint  _ihfcinent = { &ihfcinent,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Fast CINE normalization type (0=None, 1=Systole-Diastole, 2=Uniform)", 
    0, ""
};

_cvint  _ihbspti = { &ihbspti,  
    TI_MIN, 
    TI_MAX, 
    TI_MIN,  0, 0, 0, 1, 1, 
    INVIS, 
    "Blood Suppression TI annotation for current image.", 
    0, ""
};

_cvfloat  _ihtagfa = { &ihtagfa,  
    0.0, 
    180.0, 
    180.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Cardiac Tagging Flip Angle", 
    0, ""
};

_cvfloat  _ihtagor = { &ihtagor,  
    -180.0,  
    180.0, 
    45.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Cardiac Tagging Orientation", 
    0, ""
};


_cvfloat  _ih_idealdbg_cv1 = { &ih_idealdbg_cv1,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 1", 0, "" };
_cvfloat  _ih_idealdbg_cv2 = { &ih_idealdbg_cv2,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 2", 0, "" };
_cvfloat  _ih_idealdbg_cv3 = { &ih_idealdbg_cv3,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 3", 0, "" };
_cvfloat  _ih_idealdbg_cv4 = { &ih_idealdbg_cv4,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 4", 0, "" };
_cvfloat  _ih_idealdbg_cv5 = { &ih_idealdbg_cv5,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 5", 0, "" };
_cvfloat  _ih_idealdbg_cv6 = { &ih_idealdbg_cv6,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 6", 0, "" };
_cvfloat  _ih_idealdbg_cv7 = { &ih_idealdbg_cv7,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 7", 0, "" };
_cvfloat  _ih_idealdbg_cv8 = { &ih_idealdbg_cv8,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 8", 0, "" };
_cvfloat  _ih_idealdbg_cv9 = { &ih_idealdbg_cv9,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 9", 0, "" };
_cvfloat  _ih_idealdbg_cv10 = { &ih_idealdbg_cv10,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 10", 0, "" };
_cvfloat  _ih_idealdbg_cv11 = { &ih_idealdbg_cv11,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 11", 0, "" };
_cvfloat  _ih_idealdbg_cv12 = { &ih_idealdbg_cv12,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 12", 0, "" };
_cvfloat  _ih_idealdbg_cv13 = { &ih_idealdbg_cv13,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 13", 0, "" };
_cvfloat  _ih_idealdbg_cv14 = { &ih_idealdbg_cv14,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 14", 0, "" };
_cvfloat  _ih_idealdbg_cv15 = { &ih_idealdbg_cv15,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 15", 0, "" };
_cvfloat  _ih_idealdbg_cv16 = { &ih_idealdbg_cv16,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 16", 0, "" };
_cvfloat  _ih_idealdbg_cv17 = { &ih_idealdbg_cv17,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 17", 0, "" };
_cvfloat  _ih_idealdbg_cv18 = { &ih_idealdbg_cv18,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 18", 0, "" };
_cvfloat  _ih_idealdbg_cv19 = { &ih_idealdbg_cv19,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 19", 0, "" };
_cvfloat  _ih_idealdbg_cv20 = { &ih_idealdbg_cv20,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 20", 0, "" };
_cvfloat  _ih_idealdbg_cv21 = { &ih_idealdbg_cv21,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 21", 0, "" };
_cvfloat  _ih_idealdbg_cv22 = { &ih_idealdbg_cv22,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 22", 0, "" };
_cvfloat  _ih_idealdbg_cv23 = { &ih_idealdbg_cv23,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 23", 0, "" };
_cvfloat  _ih_idealdbg_cv24 = { &ih_idealdbg_cv24,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 24", 0, "" };
_cvfloat  _ih_idealdbg_cv25 = { &ih_idealdbg_cv25,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 25", 0, "" };
_cvfloat  _ih_idealdbg_cv26 = { &ih_idealdbg_cv26,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 26", 0, "" };
_cvfloat  _ih_idealdbg_cv27 = { &ih_idealdbg_cv27,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 27", 0, "" };
_cvfloat  _ih_idealdbg_cv28 = { &ih_idealdbg_cv28,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 28", 0, "" };
_cvfloat  _ih_idealdbg_cv29 = { &ih_idealdbg_cv29,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 29", 0, "" };
_cvfloat  _ih_idealdbg_cv30 = { &ih_idealdbg_cv30,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 30", 0, "" };
_cvfloat  _ih_idealdbg_cv31 = { &ih_idealdbg_cv31,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 31", 0, "" };
_cvfloat  _ih_idealdbg_cv32 = { &ih_idealdbg_cv32,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 32", 0, "" };


_cvint  _ihlabeltime = { &ihlabeltime,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3D ASL labeling time (msec)", 
    0, ""
};

_cvint  _ihpostlabeldelay = { &ihpostlabeldelay,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3D ASL post label delay time (usec)", 
    0, ""
};

_cvint  _ihnew_series = { &ihnew_series,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Put image type in a new series. Bit mask 1-Phase, 2-Real, 3-Imag", 
    0, ""
};



_cvint  _dbdt_option_key_status = { &dbdt_option_key_status,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "existence of dbdt option key", 
    0, ""
};

_cvint  _dbdt_mode = { &dbdt_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=normal, 1=first controlled dbdt mode", 
    0, ""
};

_cvint  _cfdbdttype = { &cfdbdttype,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=duration dependent (cfdbdtper), 1=uniform limit (cfdbdtts)", 
    0, ""
};

_cvfloat  _cfrinf = { &cfrinf,  
    0.0, 
    200.0, 
    23.4,  0, 0, 0, 1, 1, 
    INVIS, 
    "new REILLYDBDTINF", 
    0, ""
};

_cvint  _cfrfact = { &cfrfact,  
    0, 
    10000, 
    334,  0, 0, 0, 1, 1, 
    INVIS, 
    "new REILLYDBDTFACTOR", 
    0, ""
};

_cvfloat  _cfdbdtper_norm = { &cfdbdtper_norm,  
    0.0, 
    100.0, 
    80.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "new F - normal mode", 
    0, ""
};

_cvfloat  _cfdbdtper_cont = { &cfdbdtper_cont,  
    0.0, 
    100.0, 
    100.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "new F - first controlled mode", 
    0, ""
};

_cvfloat  _cfdbdtper_max = { &cfdbdtper_max,  
    100.0, 
    1000.0, 
    200.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "new max F - any mode", 
    0, ""
};




_cvint  _cfnumicn = { &cfnumicn,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of icn's ", 
    0, ""
};

_cvint  _cfdppericn = { &cfdppericn,  
    2, 
    32, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of dp per icn ", 
    0, ""
};





_cvint  _cfgradcoil = { &cfgradcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _cfswgut = { &cfswgut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfswrfut = { &cfswrfut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfswssput = { &cfswssput, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cfhwgut = { &cfhwgut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfhwrfut = { &cfhwrfut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfhwssput = { &cfhwssput, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cfoption = { &cfoption,  
    SEC_CODE_INIT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Code for coil option check", 
    0, ""
};







_cvint  _cfrfboardtype = { &cfrfboardtype,  
    RF_BOARD_RRF, 
    RF_BOARD_DCERD, 
    RF_BOARD_RRF,  0, 0, 0, 1, 1, 
    INVIS, 
    "RF Board Type 0:RRF 1:DCERD", 
    0, ""
};




_cvint  _psd_board_type = { &psd_board_type,  
    PSDCERD, 
    PSDDVMR, 
    PSDDVMR,  0, 0, 0, 1, 1, 
    VIS, 
    "type of transceiver", 
    0, ""
};




_cvint  _opdfm = { &opdfm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Activate DFM : 0=off, 1=on.", 
    0, ""
};

_cvint  _opdfmprescan = { &opdfmprescan,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Enable dfm Prescan : 0=off, 1=on.", 
    0, ""
};

_cvint  _cfdfm = { &cfdfm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "DFM Available   : 0=off, 1=on.", 
    0, ""
};

_cvint  _cfdfmTG = { &cfdfmTG,  
    0, 
    200, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "TG for DFM Coil.", 
    0, ""
};

_cvint  _cfdfmR1 = { &cfdfmR1,  
    0, 
    13, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "R1 for DFM Coil.", 
    0, ""
};

_cvint  _cfdfmDX = { &cfdfmDX,  
    -1000000, 
    1000000, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "DX for DFM Coil", 
    0, ""
};


_cvint  _derate_ACGD = { &derate_ACGD,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Derate ACGD to 2.2G/cm", 
    0, ""
};


_cvint  _rhextra_frames_top = { &rhextra_frames_top,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "top of EPI internal ref frames", 
    0, ""
};

_cvint  _rhextra_frames_bot = { &rhextra_frames_bot,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "bottom of EPI internal ref frames", 
    0, ""
};

_cvint  _rhpc_ref_start = { &rhpc_ref_start,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Start of ref phase correction", 
    0, ""
};
_cvint  _rhpc_ref_stop = { &rhpc_ref_stop,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "End of ref phase correction", 
    0, ""
};

_cvint  _rhpc_ref_skip = { &rhpc_ref_skip,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of ref phase correction frames to skip", 
    0, ""
};

_cvint  _opaxial_slice = { &opaxial_slice,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of axial slices in 3-Plane", 
    0, ""
};

_cvint  _opsagittal_slice = { &opsagittal_slice,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of sagittal slices in 3-Plane", 
    0, ""
};

_cvint  _opcoronal_slice = { &opcoronal_slice,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of coronal slices in 3-Plane", 
    0, ""
};

_cvint  _opvrg = { &opvrg,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VERSE: 0=off, 1=on", 
    0, "The VERSE imaging option is not supported in this scan."
};

_cvint  _opmart = { &opmart,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MART: 0=off, 1=on", 
    0, "The MART imaging option is not supported in this scan."
};


_cvint  _piassetscrn = { &piassetscrn,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET", 
    0, ""
};


_cvint  _opseriessave = { &opseriessave,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Save series pressed?: 0-No, 1-Yes", 
    0, ""
};


_cvint  _opt2map = { &opt2map,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "T2Map CV: 0=OFF, 1=ON", 
    0, ""
};


_cvint  _opmer2 = { &opmer2,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "R2* CV: 0=OFF, 1=ON", 
    0, ""
};


_cvint  _rhnew_wnd_level_flag = { &rhnew_wnd_level_flag,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for New Window Width and Window Level Algorithm", 
    0, "This must be 0 or 1"
};

_cvint  _rhwnd_image_hist_area = { &rhwnd_image_hist_area,  
    10, 
    100, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "Percent of image (centered) which in included in the calculation", 
    0, "rhwnd_image_hist_area should be between 10 to 100"
};

_cvfloat  _rhwnd_high_hist = { &rhwnd_high_hist,  
    0.0, 
    100.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Percent of pixels with highest values removed from calculation", 
    0, "rhwnd_high_hist should be between 0.0 and 100.0"
};

_cvfloat  _rhwnd_lower_hist = { &rhwnd_lower_hist,  
    0.0,  
    100.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Percent of pixels with lowest values removed from the calculation", 
    0, "rhwnd_lower_hist should be between 0.0 and 100.0"
};


_cvint  _rhrcmavric_control = { &rhrcmavric_control,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MAVRIC-SL Reconstruction Control", 
    0, ""
};





_cvint  _rhrcmavric_image = { &rhrcmavric_image,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MAVRIC-SL Output Image", 
    0, ""
};











_cvint  _rhrcmavric_bin_separation = { &rhrcmavric_bin_separation,  
    0, 
    20000, 
    1000,  0, 0, 0, 1, 1, 
    VIS, 
    "MAVRIC-SL Bin Separation Frequency in Hz", 
    0, ""
};


_cvint  _cfrfupa = { &cfrfupa,  
    -MAXINT, 
    0, 
    -50,  0, 0, 0, 1, 1, 
    VIS, 
    "PRE-RF Unblank time (us)", 
    0, ""
};

_cvint  _cfrfupd = { &cfrfupd,  
    0, 
    MAXINT, 
    50,  0, 0, 0, 1, 1, 
    VIS, 
    "POST-RF Unblank time (us) ", 
    0, ""
};

_cvint  _cfrfminblank = { &cfrfminblank,  
    -MAXINT, 
    MAXINT, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum blank time (us)", 
    0, ""
};

_cvint  _cfrfminunblk = { &cfrfminunblk,  
    -MAXINT, 
    MAXINT, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum un-blank time (us)", 
    0, ""
};

_cvint  _cfrfminblanktorcv = { &cfrfminblanktorcv,  
    -MAXINT, 
    MAXINT, 
    50,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum blank to rcv time (us)", 
    0, ""
};

_cvfloat  _cfrfampftconst = { &cfrfampftconst,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.784,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amp Capability const term coefficient", 
    0, ""
};

_cvfloat  _cfrfampftlinear = { &cfrfampftlinear,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amp Capability linear term coefficient", 
    0, ""
};

_cvfloat  _cfrfampftquadratic = { &cfrfampftquadratic,  
    -MAXFLOAT, 
    MAXFLOAT, 
    15.125,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amp Capability quadratic term coefficient", 
    0, ""
};

_cvint  _optracq = { &optracq,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Acqs & TR for Fixed Acqs", 
    0, ""
};


_cvint  _opswift = { &opswift,   
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "SWIFT Application on=1/off=0", 
    0, "opswift should be 0 or 1"
};

_cvint  _rhswiftenable = { &rhswiftenable,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Swift enable: bit 0, Rcvr noise switch: bit 1", 
0, "" };

_cvint  _rhnumCoilConfigs = { &rhnumCoilConfigs,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "How many different coils in the data acq table?", 
0, "" };

_cvint  _rhnumslabs = { &rhnumslabs,  
    1, 
    MAXVQUANT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "The number of slabs for 3D for recon", 
0, "" };


_cvint  _opncoils = { &opncoils,  
    1, 
    (MAX_COIL_SETS), 
    1,  0, 0, 0, 1, 1, 
    VISONLY, 
    "The number of coil configurations in coilInfo and volRecCoilInfo", 
0, "" };




_cvint  _rtsar_first_series_flag = { &rtsar_first_series_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "First Series Flag for RT SAR feature. 0 = off, 1 = on", 
0, "" };

_cvint  _rtsar_enable_flag = { &rtsar_enable_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable flag for RT SAR feature. 0 = off, 1 = on", 
0, "" };

_cvint  _measured_TG = { &measured_TG,  
    -1, 
    400, 
    -1,  0, 0, 0, 1, 1, 
    VIS, 
    "Measured TG for FTG/APS1 entry point from prescan", 
0, "" };

_cvint  _predicted_TG = { &predicted_TG,  
    -1, 
    400, 
    -1,  0, 0, 0, 1, 1, 
    VIS, 
    "Predicted TG for FTG/APS1 entry point from PSD", 
0, "" };

_cvfloat  _sar_correction_factor = { &sar_correction_factor,  
    0.001, 
    1000.0, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "RT SAR feature - SAR correction factor from SCAN", 
0, "" };

_cvint  _gradHeatMethod = { &gradHeatMethod,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Gradient Heating Method (0=Traditional, 1=Optimized).", 
    0, ""
};

_cvint  _gradHeatFile = { &gradHeatFile,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Write Corner Points Files (0=OFF, 1=ON).", 
    0, ""
};

_cvint  _gradCoilMethod = { &gradCoilMethod,  
    GRADIENT_COIL_METHOD_AUTO, 
    GRADIENT_COIL_METHOD_AC, 
    GRADIENT_COIL_METHOD_AUTO,  0, 0, 0, 1, 1, 
    VIS, 
    "Gradient Coil Heating Model (-1=Auto, 0=DC model, 1=AC Model FFTW).", 
    0, ""
};

_cvint  _gradHeatFlag = { &gradHeatFlag,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Force to always run grad heating calculations (0=OFF, 1=ON).", 
    0, ""
};

_cvint  _xgd_optimization = { &xgd_optimization,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Timing optimization for XGD thermal model (0=OFF, 1=ON).", 
    0, ""
};

_cvint  _gradChokeFlag = { &gradChokeFlag,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enables/Disables XGD Choke Model (0=Disable, 1=Use GradientConfig).", 
    0, ""
};


_cvint  _piburstmode = { &piburstmode,  
    PSD_OFF, 
    PSD_OFF, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to allow Burst Mode", 
    0, ""
};

_cvint  _opburstmode = { &opburstmode,  
    PSD_OFF, 
    PSD_OFF, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to enable Burst Mode", 
    0, ""
};

_cvint  _burstreps = { &burstreps,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of repetitions for Burst Mode", 
    0, ""
};

_cvfloat  _piburstcooltime = { &piburstcooltime,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Burst Mode cool time", 
    0, ""
};


_cvfloat  _opaccel_ph_stride = { &opaccel_ph_stride,  
    1.0, 
    MAX_ACCEL, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected phase acceleration", 
    0, ""
};

_cvfloat  _opaccel_sl_stride = { &opaccel_sl_stride,  
    1.0, 
    MAX_ACCEL, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected slice acceleration", 
    0, ""
};

_cvfloat  _opaccel_t_stride = { &opaccel_t_stride,  
    1.0, 
    MAX_ACCEL, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected temporal acceleration", 
    0, ""
};

_cvint  _oparc = { &oparc,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable ARC.", 
    0, ""
};

_cvint  _op3dgradwarp = { &op3dgradwarp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3D Gradwarp (0=Off, 1=On).", 
    0, ""
};

_cvint  _opauto3dgradwarp = { &opauto3dgradwarp,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for 3D Gradwarp (0=Off, 1=On) visibility", 
    0, ""
};


_cvint  _cfreceiveroffsetfreq = { &cfreceiveroffsetfreq,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Receiver offset frequency (Hz)", 
    0, "", 
};


_cvint  _cfcoilswitchmethod = { &cfcoilswitchmethod,  
    -MAXINT, 
    MAXINT, 
    COIL_SWITCH_SSP_HUB_INDEX,  0, 0, 0, 1, 1, 
    INVIS, 
    "Coil switch method bit-mask", 
    0, "", 
};

_cvint  _cfreceivertype = { &cfreceivertype,  
    -MAXINT, 
    MAXINT, 
    CFG_VAL_RECEIVER_RRX,  0, 0, 0, 1, 1, 
    INVIS, 
    "Receiver board type", 
    0, "", 
};

_cvint  _cfreceiverswitchtype = { &cfreceiverswitchtype,  
    -MAXINT, 
    MAXINT, 
    CFG_VAL_RCV_SWITCH_RF_HUB,  0, 0, 0, 1, 1, 
    INVIS, 
    "Receiver switch type", 
    0, "", 
};

_cvint  _cfEllipticDriveEnable = { &cfEllipticDriveEnable,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Config Variable for Elliptic Drive", 
    0, "", 
};

_cvint  _pi3dgradwarpnub = { &pi3dgradwarpnub,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "UI Control Variable for 3D gradwarp", 
    0, "",  
};

_cvint  _cfDualDriveCapable = { &cfDualDriveCapable,  
    0, 
    1,  
    0,  0, 0, 0, 1, 1,  
    INVIS,  
    "Config Variable for Dual Drive Capable",  
    0, "", 
};


_cvint  _optrip = { &optrip,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable TRIP (transducer tracking interleaved phase imaging)", 
    0, "", 
};


_cvint  _ophoecc = { &ophoecc,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for high-order eddy current correction", 
    0, "", 
};


_cvint  _rhhoecc = { &rhhoecc,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon cv for high-order eddy current correction", 
    0, "", 
};


_cvint  _rhhoec_fit_order = { &rhhoec_fit_order,  
    0, 
    HOEC_MAX_FIT_ORDER, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon cv for HOEC fit order", 
    0, "", 
};


_cvint  _rhesp = { &rhesp,  
    0, 
    MAXINT, 
    500,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon cv for echo spacing in us", 
    0, "", 
};


_cvint  _oprgcalmode = { &oprgcalmode,  
    RG_CAL_MODE_MEASURED, 
    RG_CAL_MODE_HIGH_FIXED, 
    RG_CAL_MODE_MEASURED,  0, 0, 0, 1, 1, 
    VIS, 
    "RG Calibration Mode (0: Auto measure; 1: High Fixed)", 
    0, "", 
};

/* *************************************************************
 * reqexport
 *
 * The following are common variables between the PSD and the PSD
 * manager.  They are used primarily to communicate the values of
 * the advisory panel.
 * ************************************************************* */

/* Scan info table holds information filled in by
 * scan in prescribed order. Each entry holds the slice
 * location in mm from isocenter, the receive location of
 * each slice in mm, and the rotation matrix */

SCAN_INFO scan_info[SLTAB_MAX];

/* Monitor location - returned by scan */
SCAN_INFO mon_loc;

/* Data acquisition order table holds the pass and time order
 * within the pass of each phase. */

DATA_ACQ_ORDER data_acq_order[SLICE_FACTOR*DATA_ACQ_MAX];

ENTRY_POINT_TABLE entry_point_table[ENTRY_POINT_MAX] = {
    {
        "", /* s8  epname[16]; name that entry point will be named */
        0,  /* n32 epamph;     power for the head coil*/
        0,  /* n32 epampb;     power for the body coil*/
        0,  /* n32 epamps;     peak power for the spectro coil */
        0,  /* n32 epampc;     peak power for the CW Amp */

        0,  /* n32 epwidthh;   max pulse width for the head coil */
        0,  /* n32 epwidthb;   max pulse width for the body coil */
        0,  /* n32 epwidths;   max pulse width for the spectro coil */
        0,  /* n32 epwidthc;   max pulse width for the CW amp */

        0,  /* n32 epdcycleh;  peak duty cycle for the head coil */
        0,  /* n32 epdcycleb;  peak duty cycle for the body coil */
        0,  /* n32 epdcycles;  peak duty cycle for the spectro coil */
        0,  /* n32 epdcyclec;  peak duty cycle for the CW amp */

        0,  /* n8  epsmode;    select exciter mode */
        0,  /* n8  epfilter;   initial filter to use */
        PSD_BROADBANDOFF, /* n8 eprcvrband; tells whether broadband is used */

        PSD_RP_BODY, /* n8 eprcvrinput; receiver port to use */
        PSD_RB_BODY, /* n8 eprcvrbias;  receiver to bias */
        PSD_RP_BODY, /* n8 eptrdriver;  tr driver control */
        0,           /* n8 epfastrec;   type of recevier 0=standard, 1=fast */

        0,   /* s16 epxmtadd;    additional transmit gain to add */
        256, /* s16 epprexres;   prescan xres */  
        0,   /* s16 epshldctrl;  expansion for shield cooler control */
        0,   /* s16 epgradcoil;  indicate gradient shield mode */
        0,   /* n32 eppkpower;   peak power */
        0,   /* n32 epseqtime;   seq time */
        0,   /* s16 epstartrec;  start receiver */
        0,   /* s16 ependrec;    end receiver */

        /* power_monitor_table_t eppmtable; */
        {
            0x7fff,/* s16  pmPredictSAR;   Predicted SAR for this scan */
            0      /* s16  pmContinuousUpdate; Mode for SAR de-rating based on temperature */
        },

        /* General and R1 indicies */
        0,  /* n8  epGeneralBankIndex; general bank index to use */
        0,  /* n8  epGeneralBankIndex2; second bank index for SwiFT on 16 Ch and Megaswitch */
        10, /* n8  epR1BankIndex;     R1 bank index to use */

        TRANSMIT_SELECT_NONE, /* n8 epNbTransmitSelect; narrowband transmit switch selection */
        TRANSMIT_SELECT_NONE, /* n8 epBbTransmitSelect; broadband transmit switch selection */

        MNS_CONVERTER_SELECT_NONE, /* n32 epMnsConverterSelect; MNS converter selection */

        RX_COIL_BODY,          /* n32 epRxCoilType; Receive coil type for primary selected coil */

        0.0, /* f32 epxgd_cableirmsmax; max of XGD cable RMS current for all axes */
        0.0  /* f32 epcoilAC_powersum;  sum of coil AC power for all axes */
    }
};

PSD_FILTER_GEN psd_filt_spec[PSD_FILTER_MAX];

/* changed from short to int. YH */ /* changed to short again  2/16/95 YI */
float eg_sat_rot[6][9]; /* rotation matrices for sat */

/* Psc info table holds information filled in by
 * scan in multislab prescan. Each entry holds the slice
 * location in mm from the center of the prescan slab, the receive location
 * each slice in, the rotation matrix, and the lengths of the
 * prescribed volumes */

PSC_INFO psc_info[MAX_PSC_VQUANT];

/* Graphic IR Bands */
GIR_INFO gir_info[MAX_NUM_GIR];

/* HOEC calibration information */
HOEC_CAL_INFO hoec_cal_info =
{
    .fit_order = 0,
    .total_bases_per_axis = 0,
    .num_terms = {{0}},
    .alpha = {{{0}}},
    .tau = {{{0}}},
    .termIndex2xyzOrderMapping = {{0}},
    .xyzOrder2termIndexMapping = {{{0}}}
};

/* DW gradient vectors */
float rhdiffusion_grad_amp[HOEC_MAX_DIFFGRADAMP_SIZE][HOEC_TOTAL_NUM_AXES] = {{0}}; /* diffusion gradient amplitudes on logical axis */

/* HOEC bases for recon */
RDB_HOEC_BASES_TYPE rhhoec_bases =
{
    .hoec_coef = {{0}},
    .hoec_xorder = {0},
    .hoec_yorder = {0},
    .hoec_zorder = {0}
};

/* Multi Slab Prescan */
int pipscvol = 1;

/* ***************************
   Image header array pointers
   *************************** */
int *ihtdeltab;
int *ihtrtab;
int ihmaxtdelphase; /* Max tdel value for the first phase */
int *ihtitab; 

/* *******************************
   Advisory Panel Export Variables
   ******************************* */

/* Scan Timing Advisory Variables */

int avminnecho;
int avmaxnecho;

int avminnshots;
int avmaxnshots;

int avminte;
int avmaxte;

int avminte2;
int avmaxte2;

int avminti;
int avmaxti;

int avminbspti;   /* Minimum Blood Suppression TI */
int avmaxbspti;   /* Maximum Blood Suppression TI */

int avmintrecovery;
int avmaxtrecovery;

int avmintlabel;
int avmaxtlabel;

int avmint2prepte;
int avmaxt2prepte;

int avminnspokes;
int avmaxnspokes;

float avminoversamplingfactor;
float avmaxoversamplingfactor;

int avmintr;
int avmaxtr;

float avminflip;
float avmaxflip;

int avminetl;
int avmaxetl;

float avminrbw;  /* minimum bw in KHz (echoes 2-4 for 1.5T, echo 1 for 0.5T */
float avmaxrbw;  /* maximum bandwith in KHz (echoes 2-4 for 1.5 T, echo
				  one for 0.5T */
float avminrbw2; /* minimum bw in KHz (echoes 2-4, for 0.5T only) */
float avmaxrbw2; /* maximum bandwith in KHz (echoes 2-4, for 0.5T only) */

/* Scanning Range Advisory Variables */

float avminfov;
float avmaxfov;

float avminphasefov;
float avmaxphasefov;

float avminslthick;
float avmaxslthick;

float avminslspace;
float avmaxslspace;

int avminslquant;
int avmaxslquant;

int avmaxacqs;

/* Overlapping slices, in Motsa */
int avmaxovl; /* Maximum number of overlapping slices */


/* Acquisition time Advisory Variables */

int avminxres;
int avmaxyres;

int avminyres;
int avmaxxres;

float avminnex;
float avmaxnex;

int avminslicecnt;
int avmaxslicecnt;

/* Cardiac Gating Advisory Variables */

int avminphases;
int avmaxphases;

int avmintdel1; /* min cardiac delay */
int avmaxtdel1; /* max cardiac delay */
int pisystdel1; /* systolic cardiac delay */
int pidiatdel1; /* diastolic cardiac delay */
int pitdel1;   /* recommended delay with SAT modules */

int avminrttseq; /* Advisory panel min sequence time */

/* Navigator Advisory Variables */
float avminnavaccwin;
float avmaxnavaccwin;
int avminnavautotrigtime;
int avmaxnavautotrigtime;
int avminnavpsctime;
int avmaxnavpsctime;
int avminnavrrmeastime;
int avmaxnavrrmeastime;
int avminnavmaxinterval;
int avmaxnavmaxinterval;

/* Vascular Velocity Encoding Advisory Panel Variables.
   Min and Max velocity encoding value in cm/sec */
float avminvenc;
float avmaxvenc;

/* Delay after acquisition.  Needed in cardiac routines */
int avmaxsldelay;		/* Maximum Delay after acquisition */

int avminfphases;		/* Minimum Number of phases per locations */
int avmaxfphases;		/* Maximum Number of phases per locations */

/* ECTRICKS multiphases */
int avmintphases;
int avmaxtphases;
int avmintricksdel = 1;
int avmaxtricksdel = 30000000;


/* b-value from DWI screen */ /* HFO3 merge 02/18/2003 YI */
int avminbval;
int avmaxbval;

float avminrep_rest = 1;
float avmaxrep_rest = 128;

float avminrep_active = 1;
float avmaxrep_active = 128;

float avmin_dda = 0;
float avmax_dda = 50;

int avminnseg;
int avmaxnseg;

int avmintseq;
int avmaxtseq;

/* MRIge92386 - For cases when PSD can override the entries 
in the config file */
float avminslassetfac;
float avmaxslassetfac;
float avminphassetfac;
float avmaxphassetfac;

/* MR-TOUCH */
int avmintouchfreq = 20;
int avmaxtouchfreq = 5000;
int avmintouchmegfreq = 20;
int avmaxtouchmegfreq = 5000;
int avmintouchcyc = 0;
int avmaxtouchcyc = 5000;
int avmintouchamp = 0;
int avmaxtouchamp = 100;
int avmintouchtphases = 4;
int avmaxtouchtphases = 128;

int avminnumbvals; 
int avmaxnumbvals;

float avminbvalstab;
float avmaxbvalstab;

int avmindifnextab;
int avmaxdifnextab;

float avmindifnext2;
float avmaxdifnext2;

/* PROMO rescan time in seconds */
int avminallowedrescantime = 0;
int avmaxallowedrescantime = 3600;
int pidefallowedrescantime = 300;
int piallowedrescantimenub = 0;

/* **********************************
   Interface Control Export Variables
   ********************************** */

/* advisory panel */
int piadvise = 0;
/* *************************************************
 * The following variables are read by Scan Rx to 
 * determine which advisory panel entries should be 
 * displayed.  
 * piadvmin and piadvmax are the bitmasks for respectively
 * displaying the min and max values for echos, TE, TE2,
 * TI, TR, FOV, receive bandwidth, and velocity encoding.
 * piadvtime is the bitmask for selectively displaying
 * the scan time, max. Locs/Acq, minimum # of acqs, and the
 * acquisition matrix.
 * piadvcard is the bitmask for selectively displaying the
 * cardiac adv. panel entries.  These entries are inter-sequence
 * delay, # of phases, effective TR, max # of scan locs, and
 * available image time.  It should be noted that these 
 * entries will never be displayed if cardiac gating is not 
 * selected.  
 * The bitmask position for each of these parameters is 
 * listed up above in the global section.
 * ************************************************* */

/* bit mask for minimum adv. panel values */
int piadvmin = (1<<PSD_ADVECHO) +
  (1<<PSD_ADVTE) + (1<<PSD_ADVTE2) + (1<<PSD_ADVTI) + (1<<PSD_ADVTR) +
  (1<<PSD_ADVFOV) + (1<<PSD_ADVRCVBW) + (1<<PSD_ADVVENC) + (1<<PSD_ADVRCVBW2); 
int piadvmax = (1<<PSD_ADVECHO) +
  (1<<PSD_ADVTE) + (1<<PSD_ADVTE2) + (1<<PSD_ADVTI) + (1<<PSD_ADVTR) +
  (1<<PSD_ADVFOV) + (1<<PSD_ADVRCVBW) + (1<<PSD_ADVVENC) + (1<<PSD_ADVRCVBW2); 

/* bit mask for scan time adv. panel values */
int piadvtime = (1<<PSD_ADVMINTSCAN) + (1<<PSD_ADVMAXLOCSPERACQ) +
  (1<<PSD_ADVMINACQS) + (1<<PSD_ADVMAXYRES);

/* bit mask for cardiac adv. panel values */
int piadvcard = (1<<PSD_ADVISEQDELAY) 
   + (1<<PSD_ADVMAXPHASES) + (1<<PSD_ADVEFFTR)
   + (1<<PSD_ADVMAXSCANLOCS) + (1<<PSD_ADVAVAILIMGTIME);


/* buttons for opnseg pull down menu */
int pinsegnub = 0;
int pinsegval2 = 1;
int pinsegval3 = 2;
int pinsegval4 = 3;
int pinsegval5 = 4;

/* frame rate(sec/frame) for Rapid Frame Acquisition */
int piframeratenub = 0;
float piframerate = 0;

int piimages = 1;

/* scanning range */
/* MRIge77195 RS/YV Sat default thickness changed from 80mm to 40mm */
int pisatthick = 40;
int pisatthickx = 40;
int pisatthicky = 40;
int pisatthickz = 40;

int pisatnub = 1; /* 1 if Sat buttons should appear */

/* *************************************************
   SmartPrep Required Exports
   ************************************************ */
int pimonitor = 0;  /* Enable monitor */

/* Monitor FOV */
int pimonfovnub=4;
float pimonfovval2=50.0;
float pimonfovval3=100.0;
float pimonfovval4=200.0;
float pidfmonfov=200.0;

/* Monitor Thickness */
int pimonthicknub=4;
float pimonthickval2=20.0;
float pimonthickval3=40.0;
float pimonthickval4=80.0;
float pidfmonthick=20.0;

int piccsat_obl = 0;	/* Concat sat capability for oblique scan in fse-xl. */

/* RJF - 11.0 SAT UI Enhancements. */
int pichemsatopt = 0;

int piccsatnub = 1; /* if 1, concatsat button should
		       appear */
int pisupnub = 1; /* if 1, chemsat buttons will appear */

int piautopause = 0;
int pislblank = 2;

int pislthicklabel = PSD_SLTHICK_LABEL_SLTHICK;
float pislthickstep = 1.0;

/* cardiac gating */
int pitseq;
int piait;
int pietr;

/* Graphic ROI inquiry CVs */
int picsifov;			/* Field of view for CSI phase encoding */
int pirlcsi;			/* Number of phase encodes in the RL dir */
int piapcsi;			/* Number of phase encodes in the AP dir */
int pisicsi;			/* Number of phase encodes in the SI dir */
int piroigrx=PSD_OFF;		/* Whether or not to do Grx ROI */

/* misc pi variables */
int pifilt4 = 0;
int pifilt5 = 0;
int pifilt6 = 0;
int pifilt7 = 0;

int pitfeextra= 0;

/* APS */
int pitr;
int pichop;
int pitsp1;
int pitsp2;
int picalmode;
int pislquant;
int pinex;

/* screen control */

int pimphscrn = 0;		/* controls the Multi-Phase screen,
				   0: no multi-phase,
				   1: multi-phase acq.*/

int pifphasenub = 0;	/* buttons for number of phases per location */
int pifphaseval2 = 1;
int pifphaseval3 = 2;
int pifphaseval4 = 4;
int pifphaseval5 = 8;
int pifphaseval6 = 16;

int pisldelnub = 6; 	/* buttons for delay after acquisition, value 0-6 */
int pisldelval3 = 500000;
int pisldelval4 = 1000000;
int pisldelval5 = 2000000;
int pisldelval6 = 5000000;

int piacqnub = 0;		/* buttons for phase acquisition order, value 0-2 */

/* ECTRICKS */
int pitphasenub = 6;
int pitphaseval2 = 5;
int pitphaseval3 = 9;
int pitphaseval4 = 13;
int pitphaseval5 = 17;
int pitphaseval6 = 21;

int pitricksdelnub = 6;
int pitricksdelval3 = 3000000;
int pitricksdelval4 = 5000000;
int pitricksdelval5 = 10000000;
int pitricksdelval6 = 30000000;

/* user CV */
int piuset  = 0;
int piuset2 = 0;

/* Added for TENSOR ALP */
int pidualspinechonub = 0;       /* Bitmask for dualspinecho toggle button */

/* piechnub: No of Echoes/TEs
 * bitmask: 1 (allow type-in) + 2 (show 1st value) + 4 (show 2nd value)
 * + 8 ...
 *    1. Do not show number of echoes by default: piechnub=0 and opautonecho=0.
 *    2. if piechnub=0, opautonecho = 1, then the field will be read-only
 *    and will use opnecho as the value to display */

int piechnub = 0;
int piechdefval = 1;
int piechval2 = 1;
int piechval3 = 2;
int piechval4 = 4;
int piechval5 = 8;
int piechval6 = 16;

int pishotnub = 0;  /* number of buttons to display, not bit mask */
int pishotval2 = 1;
int pishotval3 = 2;
int pishotval4 = 4;
int pishotval5 = 8;
int pishotval6 = 16;

int pitetype = PSD_LABEL_TE_NORM;  /* Flag for TE annotation */
int pite1nub = 63;
int pite1val2 = 10000;
int pite1val3 = 20000;
int pite1val4 = 25000;
int pite1val5 = 30000;
int pite1val6 = 35000;

int pite2type = PSD_LABEL_TE_NORM;  /* Flag for TE annotation */
int pite2nub = 0;
int pite2val2 = 40000;
int pite2val3 = 60000;
int pite2val4 = 80000;
int pite2val5 = 100000;
int pite2val6 = 120000;

int pititype   = PSD_LABEL_TI_IR;  /*  Flag for TI annotation  */
int pitinub    = 0;
int pitidefval = 0;    /* Default value for TI */
int pitival2   = 50000;
int pitival3   = 130000;
int pitival4   = 200000;
int pitival5   = 300000;
int pitival6   = 400000;
int piautoti = 0; /* Flag to support Auto TI */

/* Black Blood Suppression buttons */
int pibsptinub    = 0;
int pibsptidefval = 0;
int pibsptival2   = 0;
int pibsptival3   = 0;
int pibsptival4   = 0;
int pibsptival5   = 0;
int pibsptival6   = 0;
int piautobspti   = 0; /* Flag to support Auto BSP TI */

int pitrecoverynub    = 0;
int pitrecoverystep   = 200000;
char pitrecoverylabel[32] = "Recovery Time";
int pitrecoverydefval = TRECOVERY_MIN;
int pitrecoveryval2   = 300000;
int pitrecoveryval3   = 600000;
int pitrecoveryval4   = 1000000;
int pitrecoveryval5   = 1500000;
int pitrecoveryval6   = 2000000;

int pitlabelnub    = 0;
int pitlabelstep   = 500000;
int pitlabeldefval = TLABEL_DEF;
int pitlabelval2   = 1500000;
int pitlabelval3   = 2000000;
int pitlabelval4   = 2500000;

int pit2preptenub    = 0;
int pit2preptedefval = 80000;
int pit2prepteval2   = 30000;
int pit2prepteval3   = 40000;
int pit2prepteval4   = 60000;
int pit2prepteval5   = 80000;
int pit2prepteval6   = 100000;

int pinspokesnub    = 0;
int pinspokesstep    = 32;
int pinspokesdefval = 128;
int pinspokesval2   = 128;
int pinspokesval3   = 192;
int pinspokesval4   = 256;
int pinspokesval5   = 384;
int pinspokesval6   = 512;

int pioversamplingfactornub  = 0;
float pioversamplingfactordefval = 1.0;
float pioversamplingfactorval2   = 1.0;
float pioversamplingfactorval3   = 1.5;
float pioversamplingfactorval4   = 2.0;
float pioversamplingfactorval5   = 2.5;
float pioversamplingfactorval6   = 3.0;

int pisilentmr = 0;
int pinslices;

int pitrnub = 6;
int pitrval2 = 300000;
int pitrval3 = 500000;
int pitrval4 = 800000;
int pitrval5 = 1000000;
int pitrval6 = 2000000;
int piinrangetrmin = 0;
int piinrangetrmax = 0;
int piautotrmode = 0; /* Flag for Auto TR mode - 0:Manual TR, 1:In-Range TR, 2:Advancd In-Range TR */

int pifanub = 0;
int pifaval2 = 10;
int pifaval3 = 20;
int pifaval4 = 30;
int pifaval5 = 40;
int pifaval6 = 50;
int piautofa = 0;  /* Flag to support Auto Flip Angle */
int pifamode = 0;  /* Flag to display Flip Angle on UI - 0:"Flip Angle", 1:"Refocus Flip Angle" */

int pietlnub = 0;		/* Number of ETL buttons */
int pietlval2 = 2;
int pietlval3 = 4;
int pietlval4 = 8;
int pietlval5 = 16;
int pietlval6 = 32;

/* MRIge92386 */
/*
"pi" CV control to override the Asset screen
0: do not override,Scan will populate the Asset screen based on 
the values in the Asset config file
1: PSD will be able to pass values for Asset related parameters
which can be used to populate the Asset screen (override)
*/
int piassetoverride = 0; 

/*
"pi" CV to control the Asset screen
0: hide the Asset screen,
1: display the Asset screen
When PSD override is enabled, the title of the ASSET screen
can be customized by specifying the title in the description
field of the "pi" CV piassetscrn which has been defined in the
reqcv section.
*/

int piphassetnub = 0;
float piphassetval1 = 1.0;
float piphassetval2 = 1.0;
float piphassetval3 = 1.0;
float piphassetval4 = 1.0;
float pidefphasset = 1.0;

int pislassetnub = 0;
float pislassetval1 = 1.0;
float pislassetval2 = 1.0; 
float pislassetval3 = 1.0;
float pislassetval4 = 1.0;
float pidefslasset = 1.0; 
/* END - MRIge92386 */

int picalmodenub = 0; /* flag for visibility of ASSET/PURE calibration mode menu */
int pidefcaldelay = 5000000; /* default delay time between breathhold and free-breathing passes of ASSET/PURE calibration scan */

int pipure = PSD_PURE_COMPATIBLE_1; /* PURE version compatibility bitmask */

int pirbwpage = PSD_BW_SCREEN_SET;  /*  Flag for RBW screen  */
float pidefrbw = 15.63;
int pircbnub = 6; /* number of variable bandwidth buttons */
float pircbval2 = 2.0;
float pircbval3 = 4.0;
float pircbval4 = 8.0;
float pircbval5 = 12.80;
float pircbval6 = 16.0;

int pircb2nub = 6; /* number of variable bandwidth buttons */
float pircb2val2 = 2.0;
float pircb2val3 = 4.0;
float pircb2val4 = 8.0;
float pircb2val5 = 12.80;
float pircb2val6 = 16.0;

/* piflosup has become obsolete but can't be changed. Now its pivascop */
int piflosup = 0; /* Set to 1 if flow suppression screen
		     required (i.e. phase contrast) */
int piflanub = 0; /* if 1, flow axis buttons will appear */
int pivelnub = 0; /* if 1, velocity encoding prompt will appear */
int piprojnub = 0; /* bitmask for num of projetion buttons */
int piaddinub = 0; /* bitmask for num of additional image buttons */
int piflrcnub = 0; /* bit mask for the flow recon type */
/* Ramp direction buttons */
int pirampnub = 0; /* Bitmask for Ramp Pulse buttons */
int pideframp = 0; /* Default value for Ramp Pulse direction, 0: nonramp pulses, 1: positive ramp pulse */


/* scanning range */
int piscran = 1;

int pifovnub = 6;
float pifovval2 = 80.0;
float pifovval3 = 120.0;
float pifovval4 = 160.0;
float pifovval5 = 200.0;
float pifovval6 = 240.0;

int piphasfovnub = 0; /* bitmap for variable fov buttons to appear of
                         Aquisition Timing page, 0=off, 7=on */
int pifreqfovnub = 0; /* bitmap for future frequency fov buttons */

int piphasfovnub2= 0; /* Used to select the "other" button in phase fov */

float piphasfovval1 = 1.0;
float piphasfovval2 = .75;    /* 5.5-QT */
float piphasfovval3 = 0.5;
float piphasfovval4;  /* not used - only 3 buttons are visible */
float piphasfovval5;  /* not used - only 3 buttons are visible */
float piphasfovval6;  /* not used - only 3 buttons are visible */

int pistnub = 6;
float pistval2 = 3;
float pistval3 = 4;
float pistval4 = 5;
float pistval5 = 7;
float pistval6 = 10;

int piisnub = 5;
int piisil = 1;
float piisval2 = 1.5;
float piisval3 = 2.5;
float piisval4 = 5;
float piisval5 = 10;
float piisval6 = 15;

/* Overlap slices */
int pipctovl = 25; /* Percentage of overlapping region thickness over whole slab thickness. */
int pidefovl = 1; /* Indicate default button for overlap slices; 0: "Other" button, 1: "Recommended" button. */
int piovlnub = 0;  /* overlap locations on 3D MS scanning range (bitmap) */

int pilocnub = 0;
int pilocval2 = 28;
int pilocval3 = 60;
int pilocval4 = 124;
int pilocval5 = 252;
int pilocval6 = 508;

/* Number of locations per slab buttons */
int pislqnub = 15;  /* Bitmask for Number of locations per slab button */
int pislqval2 = 16; /* Button 2 value */
int pislqval3 = 32; /* Button 3 value */
int pislqval4 = 64; /* Button 4 value */
int pidefslq = 32;  /* Default value for Number of loc.s per slab */
int pislqval5 = 128; /* add a button when combining 3d-multi and 3d */

/* acquisition timing */
int piactim = 1;

/* piamnub is now a bitmap */
int piamnub = 7;
char piamval1[8] = "256x128";
char piamval2[8] = "256x192";
char piamval3[8] = "256x256";
char piamval4[8] = "512x256";
char piamval5[8] = "512x384";
char piamval6[8] = "512x512";

int pitresnub = 0;  /* Display pitres or temporal resolution on UI*/

int pixresnub = 2; /* bitmask */
int pixresval2 = 256;
int pixresval3 = 512;
int pixresval4 = 256;
int pixresval5 = 256;
int pixresval6 = 256;

int piyresnub = 15;  /* bitmask */
int piyresval2 = 160;
int piyresval3 = 192;
int piyresval4 = 224;
int piyresval5 = 256;
int piyresval6 = 512;

int pinexnub = 63;
float pinexval2 = 0.5;
float pinexval3 = 0.75;
float pinexval4 = 1;
float pinexval5 = 2;
float pinexval6 = 4; 

/* pisctim */
int pisctim = 1;
float pisctim1 = 0;
float pisctim2 = 0;
float pisctim3 = 0;
float pisctim4 = 0;
float pisctim5 = 0;
float pisctim6 = 0;

int pipautype = PSD_LABEL_PAU_LOC;  /*  Flag for Pause annotation  */
int pipaunub = 0;
int pipauval2 = 0;
int pipauval3 = 1;
int pipauval4 = 2;
int pipauval5 = 3;
int pipauval6 = 4;

int piswapfc = 0;/* Used to change the default (highlighted) opspf value */
int pipscoptnub = 1; /* Bit map of number of Prescan option buttons 
                        0=none, 1=autoshim, 2=phase corr */
int pidoshim = 0;    /* Flag to force autoshim */

/* Flow comp axis buttons */
int pifsefcnub = 0;  /* bitmask - buttons for flow comp axis selection */
int pideffcaxis = 0; /* Default value for flow comp direction */


int pidltime = 100000000; /* Time in us that scan allows for wave form 
                             download in TGT before time out error */

/* Cardiac heart rate buttons */
int pihrepnub=30;		/* Bitmask for hrep buttons */
int pihrepval2=4;		/* Button 2 value */
int pihrepval3=3;		/* Button 3 value */
int pihrepval4=2;		/* Button 4 value */
int pihrepval5=1;		/* Button 5 value */
int pihrepval6=9;		/* Button 6 value */

/* default arrhythmia rejection window */
int pidefarr = 20;

/* FastCINE number of phases buttons */
int pifcinenub    = 0; 
int pifcinedefval = 0;
int pifcineval2   = 0;
int pifcineval3	  = 0;
int pifcineval4	  = 0;

/* Cardiac Tagging buttons */
int pitagging      = 0; /* Cardiac Tagging Selection */
int pitagspcdefval = 0;
int pitagspcval2   = 0;
int pitagspcval3   = 0;
int pitagspcval4   = 0;

/* Pull-down values for Tagging angle - MRIge92928 */
int pitaganglenub      = 0; /* bitmask: 0=OFF, 1=Type-In, 2=Val1, 4=Val2, 8=Val3 */
float pitagangledefval = 45.0;
float pitagangleval2   = 0.0;
float pitagangleval3   = 45.0;
float pitagangleval4   = 90.0;
float pitagangleval5   = 0.0; /* not currently used */
float pitagangleval6   = 0.0; /* not currently used */

/* Screen control for cardiac gating */
int pitdel1nub = 7; /* Bitmask for Trigger Delay buttons */
int pitdel1type = PSD_LABEL_TD_DEFAULT;  /* text label for Trigger Delay button */
int pitrigwinnub = 63; /* Bitmask for Trigger Window buttons */
int pitseqnub = 7; /* Bitmask for Inter-Sequence Delay buttons */
int pitseqtype = PSD_LABEL_INTERSEQDELAY_DEFAULT;  /* text label for inter- sequence delay button */
int piphasenub = 3; /* Bitmask for Phase buttons */
int piphslnub = 2; /* Bitmask for Phases/Slices feedback fields */
int piviewseg = 0;  /* Field to prompt for views per segment field */
int pivpsdef=8;		/* default number of views per seg for fastcard */

int pitetr = 0;  /* Effective TR determined by PSD, used by resp trig screen */

int piautovoice = 1; /* flag for autovoice compatibility */

int pirtrigwinnub = 5; /* number of trigger window buttons */
int pirtwindefval = 30;
int pirtwinval2 = 10;
int pirtwinval3 = 20;
int pirtwinval4 = 30;
int pirtwinval5 = 40;
int pirtwinval6 = 50;

int pirtseqnub = 7;    /* inter-seq delay buttons (bitmap) */ 
int pirttseq;/* pi inter sequence delay time for resp trig */
int pirtait; /* pi avaiable imaging time for resp trig */
int pirtetr; /* pi effective tr for resp trig */
 
int pirtrepnub = 63; /* bit mask for resp rep buttons */
int pirtrepval2 = 5;
int pirtrepval3 = 4;
int pirtrepval4 = 3;
int pirtrepval5 = 2;
int pirtrepval6 = 1;
int pidefrtrep = 1;

int pirtpointnub = 30;
int pirtpointval2 = 10;
int pirtpointval3 = 20;
int pirtpointval4 = 30;
int pirtpointval5 = 40;
int pirtpointval6 = 50;

int pirtratenub = 1;

int pinavsltracknub = 0; /* Navigator slab/slice tracking support:    0 = off, 1 = on */
int pidefnavsltrack = 0;

int pinavautoaccwinnub = 0; /* Navigator auto acceptance window support: 0 = off, 1 = on */
int pidefnavautoaccwin = 1;

int pinavrrmeasnub = 0;  /* Navigator Resp Rate measurement support:  0 = off, 1 = on */
int pidefnavrrmeas = 0;

int pinavaccwinnub = 0; /* Bit mask for Navigator acceptance window */
int pinavaccwinval2 = 2;
int pinavaccwinval3 = 4;
int pinavaccwinval4 = 6;
int pidefnavaccwin = 2;

int pinavautotrigtimenub = 0; /* Bit mask for Navigator auto tirgger time */
int pinavautotrigtimeval2 = 5;
int pinavautotrigtimeval3 = 10;
int pinavautotrigtimeval4 = 20;
int pidefnavautotrigtime = 5;

int pinavpsctimenub = 0; /* Bit mask for Navigator prescan time */
int pinavpsctimeval2 = 5;
int pinavpsctimeval3 = 10;
int pinavpsctimeval4 = 20;
int pidefnavpsctime = 10;

int pinavrrmeastimenub = 0; /* Bit mask for Max RR Measurement time */
int pinavrrmeastimeval2 = 20;
int pinavrrmeastimeval3 = 40;
int pinavrrmeastimeval4 = 60;
int pidefnavrrmeastime = 20;

int pinavmaxintervalnub = 0; /* Bit mask for Max Navigator interval in Navigator gating*/
int pinavmaxintervalval2 = 100;
int pinavmaxintervalval3 = 200;
int pinavmaxintervalval4 = 500;
int pidefnavmaxinterval = 200;

int pinavtypenub = 0; /* Bit mask for Navigator type */
int pidefnavtype = 1;

int pinavpscpausenub = 1; /* Check box for pause after navigator prescan */
int pidefnavpscpause = 0;

int pinavsigenhancenub = 0; /* Check box for Navigator signal enhancement */
int pidefnavsigenhance = 1;

float pinavmaxrr = 20.0;  /* Maximum RR value for same #slices, #acqs, # of resp interval for RR measurement */
int pinavrrmeasmaxsl = 1; /* Max #slices available with measured resp rate */
int pinavrrmeasrtrep = 1; /* Min # Resp Intervals available with measured resp rate */
int pinavrradjust = 0; /* bit for parameter optimization selection for RR measurement*/
                       /* bit0-thickness, bit1-spacing, bit2-# of resp interval, bit3-manual selection */

int pivascop = 0; /* Set to 1 if flow suppression screen
		     required (i.e. phase contrast) */

int pizmult = 0;	/* Multi group capability for scan in fse-xl. */
int pimultigroup = 1; /* Multi group capability for scan. 1=on, 0 = off */
int pimultislab  = 0; /* Multi slab capability for scan. 1=on, 0=off */

/* bit maps for default selection on vascular enhancement screens */
int pidefproj = 5;     /* projections */
int pidefflax = 8;     /* flow axes selection */
int pidefaddimg = 8;   /* additional images */
int pidefflrc = 1;     /* flow recon type */

int pigradcoil = 1;          /* gradient shield mode: 0 = unshielded gradient
			  coil, 1 = shielded gradient coil */
float dfscale = 1.0;   /* Digital Filter Scale Factor */

/* Prescan button defaults */
int pipscdef = 1;  /* bitmask control for default backlighting of prescan
                      buttons */
 
/********************************************************/
/*   EPI DWI-TENSOR pi variables		        */
/********************************************************/
int pidifpage = 0; 	        /* Control of diffusion page and diffusion option */

int pidifaxnub = 31;	         /* diffusion direction variables */
char pidifaxval1[7] = "L/R";
char pidifaxval2[7] = "A/P";
char pidifaxval3[7] = "S/I";
char pidifaxval4[7] = "ALL";
char pidifaxval5[7] = "SLICE";
char pidifaxval6[7] = "TENSOR";

int pidiffproctype = 0;          /* Bitmask to show/hide automated DTI processing buttons */
int pidifnumdirsnub = 15;        /* Bitmask to show/hide DTI directions that can be chosen */
int pidifnumdirsdefval = 6;       
int pidifnumdirsval2 = 6;
int pidifnumdirsval3 = 15;
int pidifnumdirsval4 = 55;
int pidifnumt2nub = 15;          /* Bitmask to show/hide # of T2 images menu for DTI */
int pidifnumt2defval = 1;          
int pidifnumt2val2 = 1;
int pidifnumt2val3 = 2;
int pidifnumt2val4 = 4;

int pidefbval = 1000;		 /* MRIge47732 b value variables       */
int pibvnub = 15;
int pibval2 = 500;
int pibval3 = 750;
int pibval4 = 1000;
 
int pidifrecnub = 1;		 /* recon option variables       */

char pidifrecval1[30] = "SAVE DIFFUSION IMAGES";
char pidfirecval2[30];
char pidfirecval3[30];
char pidfirecval4[30];
char pidfirecval5[30];

int pimintedifnub = 0; /* Optimize TE button control in diffusion screen */
int pimintedifdef = 1; /* Default Optimize TE button control */

/* Number of b-values UI */
int pinumbnub = 63;
int pinumbval2 = 1;
int pinumbval3 = 5;
int pinumbval4 = 10;
int pinumbval5 = 20;
int pinumbval6 = 40;

/* Number of NEX for T2 images UI */
int pidifnext2nub = 63;
float pidifnext2val2 = 1;
float pidifnext2val3 = 2;
float pidifnext2val4 = 4;
float pidifnext2val5 = 8;
float pidifnext2val6 = 16;

int pibvalstab = 1; /* control to turn on/off bval input table for diffusion */
int pidifnextab = 1; /* control to turn on/off nex input table for diffusion */
float pidifavgnex = 1; /* Average number of NEX across b-values */

/* Bolus Chasing CVs - CMC */
int pimultistation = 0; /* Doing MultiStation? */
int piautostep = 0;     /* Doing AutoStep? */
int pisioverlap = 0;    /* S/I Overlap in mm. (percent from FOV) */

/* scan setup */
int pisetup = 1;

/* SAR reporting */
float pipsar;  
float piasar;
float picasar;   /* MRIge75651 - for Average Coil SAR. */

/* B1 RMS reporting */
float pib1rms;

/* MRIge91299 - All img opts are ON by default.  Note that piimgoptval4
   has to be updated every time a new imaging option is added. */
int piimgoptval2 = 1073741823;
int piimgoptval3 = 1073741823;
int piimgoptval4 = 15; 

int pidixproc = 0; 

/* T2Map Advisory */
int piadvt2map = 0;

/* Table movement control variables
   0 uses default hardware settings */
int pitablemaxspeed = 0; /* um/sec   */
int pitablemaxaccel = 0; /* um/sec^2 */
int pitablemaxdecel = 0; /* um/sec^2 */

/********************************************************/
/*   MR-TOUCH pi variables		        */
/********************************************************/
int pitouch = 0;     /* Control of MR-Touch tab*/
int pitouchfreq = 0; /* MR-TOUCH Driver Freq */
int pitouchamp = 0; /* MR-TOUCH Driver Amplitude */
int pitouchcyc = 0; /* MR-TOUCH Driver Cycle per Trigger */
int pitouchtphases = 0; /* MR-TOUCH Temporal Phases */

int pitouchfreqnub = 7; /* MR-TOUCH Driver Freq */
int pitouchfreqval2 = 40;
int pitouchfreqval3 = 60;
int pitouchfreqval4 = 80;
int pideftouchfreq = 60;

int pitouchmegfreqnub = 7; /* MR-Touch Motion Encoding Gradient Freq */
int pitouchmegfreqval2 = 60;
int pitouchmegfreqval3 = 120;
int pitouchmegfreqval4 = 150;
int pideftouchmegfreq = 60;

int pitouchampnub = 7; /* MR-TOUCH Driver Amplitude */
int pitouchampval2 = 30;
int pitouchampval3 = 50;
int pitouchampval4 = 80;
int pideftouchamp = 50;

int pitouchcycnub = 7; /* MR-TOUCH Driver Cycle per Trigger */
int pitouchcycval2 = 3;
int pitouchcycval3 = 60;
int pitouchcycval4 = 120;
int pideftouchcyc = 60;

int pitouchtphasesnub = 7; /* MR-TOUCH Temporal Phases */
int pitouchtphasesval2 = 4;
int pitouchtphasesval3 = 6;
int pitouchtphasesval4 = 8;
int pideftouchtphases = 4;

int pitouchaxnub = 15; /* MR-TOUCH MEG direction */
int pitouchaxval2 = 1;
int pitouchaxval3 = 2;
int pitouchaxval4 = 4;
int pitouchaxval5 = 7;
int pideftouchax = 4; /*only X/Y/Z displayed in default*/

float pitouchmenc = 0.0; /* MR-Touch MENC factor */

/* 3D ASL post label delay UI */
int pipostlabeldelaynub = 0;
float pipostlabeldelay2 = 1025.0;
float pipostlabeldelay3 = 1525.0;
float pipostlabeldelay4 = 2025.0;
float pipostlabeldelay5 = 2525.0;
float pipostlabeldelay6 = 3025.0;
float pidefpostlabeldelay = 1525.0;

/* For Phase Image UI element */
int piphaseimagenub = 0;
int piphaseimageval2 = PSD_PHASEIMAGE_ON; 
int piphaseimageval3 = PSD_PHASEIMAGE_OFF;


/* config file variables */
/* ------------------------------ */

/* Table Movement hardware capabilities
   Use to limit pitablemax* variables
   Initialize to zero to use default hardware settings */
int cftablemaxspeed = 0; /* um/sec   */
int cftablemaxaccel = 0; /* um/sec^2 */
int cftablemaxdecel = 0; /* um/sec^2 */

float cflinfrq = 60;
float cffield = 15000;
float cfhpdl = 800;
float cfbpdl = 5000;
float cfhpsl = 350;
float cfbpsl = 4000;
float cfhpv = 3000;
float cfbpv = 6000;
float cfhqpc = 0.15;
float cfbqpc = 0.7;
float cfhllr = 857;
float cfbllr = 394;
float cfloss = 1.0715;

int cfbwmin = 2;
int cfbwmin1 = 2;		/* First echo minimum bw for 0.5 T (in kHz) */

/* SAR Limits */
float cfmaxave = 2.0;        /* Operational whole body average SAR limit */
float cfmaxavepm = 2.0;      /* Regulatory whole body average SAR limit */
float cfmaxhave = 3.2;       /* Regulatory head average SAR limit */
float cfmaxextremity = 10.0; /* Extremity infinitesmial mass SAR limit */
float cfmaxcave = 3.2;       /* Coil average SAR limit */
float cfmaxpeak = 10.0;      /* Head/Body spatial peak-average SAR limit */
float cfmaxepeak = 20.0;     /* Spatial peak-average extremity SAR limit */
float cfmaxcpeak = 10.0;     /* Coil spatial peak-average SAR limit */

/* Available BAM
   Initialize to 1 ICN BAM (7476 MiB) rounded down to the nearest MB
   Actual value populated by scn during prescription */
float cftpssize = 7.839E9;

int cftpsnproc = 4;
int cftpsproctype = AP_PPC;

/* Pass size in bytes for a single receiver */
n64 rhrawsize = 10000ULL;

/* Available disk space in bytes for Acquisition to Disk Feature */
n64 cfacqtodisksize = 75161927680ULL; /* 75161927680  = 70 GB, ~ size of disk */

/* Maximum exciter hardware attenuation value */
int cfrfMaxAttenuation = 400;

int cfdbmax = 100;
int cfbbmod = 0;
int cftrnew = 0;
int cfrecvst = 0;
int cfrecvend = 0;

/* Gradient amplifiers
 * 8603
 * 8604
 * 8607
 * 8645
 * 8250 - Analogic single for VMX 
 * 8251 - Analogic twin for VMX SR40
 * 9090 - YMS HDU for Profile system
 * 8651 - Analogic SGD Hi Slew
 * 8280 - Analogic SGD Base
 * 8915 - ACGD Hi Slew
 * 8905 - ACGD Lite 
 * 8925 - ACGD Pro
 * 8290 - MFO, Analogic SGD Base
 * 8916 - HFD
 * 8917 - HFD-S
 * 8295 - MFO4, Profile5  Analogic
 * 8918 - Dual HFD
 * 8919 - XFD
 * 8920 - XGD
 * 8921 - XG2
 */
int cfgradamp = 8920;   /* Indicate gradient amplifier type */

int cfhtdel = 10000;    /* Fixed hardware trigger delay in us */
int cfcftdel = 28000;   /* cine filter trigger delay in us */
float cfcgain = 1;      /* coil recon gain */

/* config CVs for new 0.5T RF amp/Power mon, 5/18/93 */
int cfrfrapb = 16000;   /* Rated Output Power(body), in unit of Watt */
int cfrfraph = 2000;    /* Rated Output Power(head), in unit of Watt */
int cfrfraps = 2000;    /* Rated Output Power(spectro), in unit of Watt */
int cfrfrapcw = 100;    /* Rated Output Power(CW), in unit of Watt */
int cfrfmapb = 1000;    /* Maximum Average Power(body), in unit of Watt */
int cfrfmaph = 100;     /* Maximum Average Power(head), in unit of Watt */
int cfrfmaps = 100;     /* Maximum Average Power(spectro), in unit of Watt */
float cfrfmpeb = 60.0;  /* Maximum Pulse Energy(body), in unit of J */
float cfrfmpeh = 6.0;   /* Maximum Pulse Energy(head), in unit of J */
float cfrfmpes = 6.0;   /* Maximum Pulse Energy(spectro), in unit of J */
int cfrfmpwb = 20000;   /* Maximum Pulse Width(body), in unit of us */
int cfrfmpwh = 20000;   /* Maximum Pulse Width(head), in unit of us */
int cfrfmpws = 20000;   /* Maximum Pulse Width(spectro), in unit of us */
float cfrfmdcb = 0.60;  /* Maximum Duty Cycle(body) */
float cfrfmdch = 0.60;  /* Maximum Duty Cycle(head) */
float cfrfmdcs = 0.60;  /* Maximum Duty Cycle(spectro) */
int cfrfamptyp = 0;     /* RF Amplifier type: 0=tube type, 1=solid state type 2=vectra rf amp */
int cfpwrmontyp = PMTYP_UPMAVERAGE; /* Power Monitor type */
int cfpwrmonreflmeas = 1;/* Power Monitor reflection: 0=PM does not measure refl power,
                                                        1=PM does measure refl power */
int cfpsdgraddly = 120; /* Gradient system delay: default to 120us for 0.5T*/
int cfpsdrfdly = 56;    /* rf system delay: default to 56us */
int cfpsdrfdlyx = 56;   /* rf system delay in x dir */
int cfpsdrfdlyy = 56;   /* rf system delay in y dir */
int cfpsdrfdlyz = 56;   /* rf system delay in z dir */
int cfxrdelay = 180;    /* group delay in x dir for spiral */
int cfyrdelay = 180;    /* group delay in y dir for spiral */
int cfzrdelay = 180;    /* group delay in z dir for spiral */

/*more config file CVs to support vmx/vectra electronics */
int cfcoilshld = 0;  /* Indicates if a system has switchable grad shield:
			0=Not switchable, 1=switchable */
int cfrfunblank;     /* unblank time for rf amplifier */


/************************************
following parameters are new for 5.5
************************************/

float cfxfa = 194.0;
float cfxcc = 100.0;

float cfyfa = 194.0;
float cfycc = 100.0;

float cfzfa = 194.0;
float cfzcc = 100.0;

int cfxgram = PSD_GRAM1;    /* GRAM: 0 = no gram, 1 = gram-1 2 = gram-2 */
int cfygram = PSD_GRAM1;
int cfzgram = PSD_GRAM1;
int cfxasm = YES;    /* ASM present */
int cfyasm = YES;
int cfzasm = YES;
int cfxgasm = NO;    /* GASM present */
int cfygasm = NO;
int cfzgasm = NO;
int cfxseries = NO;  /* Axis in series */
int cfyseries = NO;
int cfzseries = NO;
int cfxnumpower = 1; /* Number of power modules for gradient */
int cfynumpower = 1;
int cfznumpower = 1;

int cftuning = GRAM_TUNE_ANALOG;  /* GRAM tuning board type */
 
int cfrealtime = PSD_ON; /* real-time monitoring */
  
int cfcompress = 100;  /* compression factor from config file. If 100
                          then don't set RHRCCOMP in rhrcctrl */
/* Patient dB/dt exposure limitations */
float cfdbdtts = 0.0;    /* dB/dt limit (Tesla/sec) */

/* MRIge91352 - SAR/dbdt changes for E3 */

float cfdbdtper = 100.0;    /* dB/dt limit (percent of limit) */
float cfdbdtper2 = 100.0;   /* secondary dB/dt limit (percent of limit) */

float pidbdtts = 0.0;     /* dB/dt value (Tesla/sec) */
float pidbdtper = 0.0;    /* dB/dt value (percent of limit) */
int cfgovbody = IEC_BODY;  /* governing body, e.g., FDA, IEC, MHW */

/* ..... XRMB (start) */

int cfgcoiltype   = PSD_XRMB_COIL; /* change default coil to XRMB */
int cfsrmode      = PSD_SR200;     /* change default slew rate to 200 */

float cfgpeakirms = 620.0; /* Peak rms current for gradient coil (Amps) */
float cfgcontirms = 256.0; /* Continuous rms current for gradient coil (Amps) */
float cfgburstime = 2.0;   /* longest burst at peak rms current (minutes) */

float cfxirms = 256.0;    /* RMS current, X driver (Amps) */
float cfyirms = 256.0;    /* RMS current, Y driver (Amps) */
float cfzirms = 256.0;    /* RMS current, Z driver (Amps) */

float cfxipeak = 620.0;   /* Peak current ouput, X driver (Amps) */
float cfyipeak = 620.0;   /* Peak current ouput, Y driver (Amps) */
float cfzipeak = 620.0;   /* Peak current ouput, Z driver (Amps) */

int cfrmp2xfs = 248;
int cfrmp2yfs = 248;
int cfrmp2zfs = 248;

int cffall2x0 = 248;
int cffall2y0 = 248;
int cffall2z0 = 248;

float cfxfs = 5.0;
float cfyfs = 5.0;
float cfzfs = 5.0;

int cfxfull = 31000;   /* Default "full" values are changed to 31000 for XGD driver */
int cfyfull = 31000;   /* The default will be same for both 1.5T and 3.0T */
int cfzfull = 31000;

float cfxbeta = 1.0;
float cfybeta = 1.0;
float cfzbeta = 1.0;

/* ..... XRMB (end) */
 
float cfxamptran = 100.0;  /* Amp transition current, X driver (kA/sec) */
float cfyamptran = 100.0;  /* Amp transition current, Y driver (kA/sec) */
float cfzamptran = 100.0;  /* Amp transition current, Z driver (kA/sec) */

float cfxiavrgabs = 100.0; /*Average absolute value current, X driver (Amps)*/
float cfyiavrgabs = 100.0; /*Average absolute value current, Y driver (Amps)*/
float cfziavrgabs = 100.0; /*Average absolute value current, Z driver (Amps)*/

float cfxirmspos = 100.0;  /* Positive RMS current, X driver (Amps) */
float cfyirmspos = 100.0;  /* Positive RMS current, Y driver (Amps) */
float cfzirmspos = 100.0;  /* Positive RMS current, Z driver (Amps) */

float cfxirmsneg = 100.0;  /* Negative RMS current, X driver (Amps) */
float cfyirmsneg = 100.0;  /* Negative RMS current, Y driver (Amps) */
float cfzirmsneg = 100.0;  /* Negative RMS current, Z driver (Amps) */

float cfxpwmdc = 0.2;      /* Pulse width modulation duty cycle, X driver */
float cfypwmdc = 0.2;      /* Pulse width modulation duty cycle, Y driver */
float cfzpwmdc = 0.2;      /* Pulse width modulation duty cycle, Z driver */

/* GRAM freewheel mode slew rates */
int cfrmp2xfsfw = 4200;
int cfrmp2yfsfw = 4200;
int cfrmp2zfsfw = 4200;
int cffall2x0fw = 4200;
int cffall2y0fw = 4200;
int cffall2z0fw = 4200;

/* Distances from isocenter where dB/dt in measured, physical X, Y, & Z axes */
float cfdbdtdx = 33.3;  /* centimeters */
float cfdbdtdy = 33.3;
float cfdbdtdz = 33.3;

/* keys to determine whether zoom gradient limitations will be applied (July 2001) */
int cfzoomlim_fov = 1;
int cfzoomlim_ofc = 1;
int cfzoomlim_ctl = 1;

/* bitmask filled in by scan: 0 = freewheel or no gram,
   1 = active gram.  Bit 0 = X, Bit 1 = Y, Bit 2 = Z */
int sigrammode = XGRAM + YGRAM + ZGRAM;

float cfsrmodeconv = 77.0; /* maximum slew rate limit for conventional scans */
float cfsrmodeact = 77.0;  /* actual slew rate limit to use for conventional scans */
int   cfopenmagnet = 0;    /* Open Magnet type: 0=standard, 1=iMri*/
float cftableanglex = 0.0; /* table angle in axis x - for iMR - nMR*/
float cftableangley = 0.0; /* table angle in axis y - for iMR - nMR*/
float cftableanglez = 0.0; /* table angle in axis z - for iMR - nMR*/
float cftableoffsetx = 0.0; /* table offset in axis x - for nMR */
float cftableoffsety = 0.0; /* table offset in axis y - for nMR */
float cftableoffsetz = 0.0; /* table offset in axis z - for nMR */

/* New Maximum RMS B1 strength for Head Coil, long term average (uTesla) */
float cfmaxb1rmshead = 7.2;

/* Configuration variables to support SGD gradient heating and
   increased CERD receiver bandwidth */
float cfxmgrampow = 1500.0;
float cfymgrampow = 1500.0;
float cfzmgrampow = 1500.0;
float cfsdlim = 0.60;
float cfxrsat = 0.022;
float cfyrsat = 0.022;
float cfzrsat = 0.022;
float cfxvsat = 4.8;
float cfyvsat = 4.8;
float cfzvsat = 4.8;
float cfgpmpow =18900;
float cfmgps = 9000.0;
float cfvhr = 17.0;
float cfrcoil = 0.35;
float cflcoil = 1.4;
float cfraccoil = 152.0;
float cfpmgs = 3000;
float cfrhr = 0.1;
float cfxvpwm = 35.0;
float cfyvpwm = 35.0;
float cfzvpwm = 35.0;
float cfmaxbw = 250.0;  /* Max RBW of the system */
int cfnumrcvrs = 4;     /* Max number of receivers for a system */

/* MRIge47735  Faster prescan cv */
int cffastprescan = 1;

/* MRIhc16769, MRIhc18067, MRIhc18167 - Start */
/* XRMB and XGD model parameters read from GradientConfig.cfg */

float cfcoilDC_gain = 124.0;
float cfcoilDC_Rx = 0.097;
float cfcoilDC_Ry = 0.097;
float cfcoilDC_Rz = 0.105;
float cfcoilDC_Lx = 0.000767;
float cfcoilDC_Ly = 0.000782;
float cfcoilDC_Lz = 0.000782;

float cfcoilAC_gain = 124.0;
float cfcoilAC_power = 18000.0;
float cfcoilAC_power_burst = 36000.0; /* Burst Mode */
float cfcoilAC_temp_base_burst = 20.0; /* Burst Mode */
float cfcoilAC_temp_limit_burst = 56.0; /* Burst Mode */
float cfcoilAC_timeconstant_burst = 240.0; /* Burst Mode */
float cfcoilAC_RxA = 0.097;
float cfcoilAC_RyA = 0.097;
float cfcoilAC_RzA = 0.105;
float cfcoilAC_RxB = 2.5;
float cfcoilAC_RyB = 2.5;
float cfcoilAC_RzB = 0.2;
float cfcoilAC_RxC = 8.5;
float cfcoilAC_RyC = 8.5;
float cfcoilAC_RzC = 10.15;

float cfcoilAC_lumpR1x = 0.140;
float cfcoilAC_lumpR1y = 0.139;  
float cfcoilAC_lumpR1z = 0.150;
float cfcoilAC_lumpL2x = 0.000528;
float cfcoilAC_lumpL2y = 0.000528;
float cfcoilAC_lumpL2z = 0.000496;
float cfcoilAC_lumpR3x = 22.3;
float cfcoilAC_lumpR3y = 21.6;
float cfcoilAC_lumpR3z = 37.3;
float cfcoilAC_lumpL4x = 0.00272;
float cfcoilAC_lumpL4y = 0.00297;
float cfcoilAC_lumpL4z = 0.00464;
float cfcoilAC_lumpR5x = 221.0;
float cfcoilAC_lumpR5y = 186.0;
float cfcoilAC_lumpR5z = 214.0;
float cfcoilAC_timeres = 48.0;
int cfcoilAC_fftpoints = 65536;

float cfxgd_timeres = 128.0;
float cfxgd_cableirmslimit  = 270.0;
float cfxgd_cableirmslimit_burst = 340.0; /* Burst Mode */
float cfxgd_cabletimeconstant_burst = 100.0; /* Burst Mode */
float cfxgd_busbartemplimit = 91.0;
float cfxgd_chokepowerlimit = 0.0;

float cfxps_avglvpwrlimit = 18000.0;
float cfxps_avghvpwrlimit = 26000.0;
float cfxps_avgpdulimit = 50000.0;
float cfxgd_IGBTtemplimit = 125.0;
float cfxfd_power_limit = 8.5;

/* End */

/* MRIhc46959 : Maximum allowed system FOV from MRconfig */
float cfsystemmaxfov = 500.0;

/*
 * MRIge53080 - Added 'cfcerdtype' config variable to indicate type of CERD.
 * The value will be obtained from the MRconfig.cfg file which contains a
 * 'cerdType' entry.
 * 
 * cerdType = "n01" -> standard CERD in slot 1
 *            "n02" -> Universal CERD in slot 1
 *            "n21" -> standard CERD in slot 1, Universal CERD in slot 2
 *            "n22" -> Universal CERD in slots 1 and 2 (dual UCERD)
 *    where n = 0 for Milwaukee, 1 for YMS
 * 
 */
int cfcerdtype = 1;

/* MRIge56470 - define a cfpicture for "Picture This". */
int cfpicture = 0;

float cfspectroPMcal = 0.1;  /* spectro amp/power monitor coupling cal. */


int rec_mode = 0;

int opnewgeo = 1;

/* Used to create simulation matrices in obloptimize */
/* If set equal to 1 obloptimize will create rotation matrices */
/*                 0 the rotation matrices from scan will be used */
int simulation = 0;

/* Spectroscopy interface variables */
int csi_grid_on = 0;  /*csi grid 0=off, 1=probeSI, 2=research mode*/
int pispecprescan = 0; /*Spectro Prescan button 0=off or 1=on*/

/* *****************
   Definitions for picsimode
   -------------------------
   PICSI_CALC_3D          0
   PICSI_CALC_1SLICE      1
   PICSI_CALC_RXEXACT     2
   PICSI_CALC_3D1SLICE    3
   PICSI_FREEFORM_GRX     4
   PICSI_CALDATA_REQ      8
   **************************** */
int picsimode = PICSI_CALC_1SLICE;

int rhrlfov = 0;
int rhapfov = 0;
int rhsifov = 0;

int pitracqnub = 0;
int pitracqval2 = 0;
int pitracqval3 = 0;
int pitracqval4 = 0;
int pitracqval5 = 0;
int pitracqval6 = 0;

/* Current application will use fast (SSP-based) coil switching */
int picoilfastswitchrequired = 0;

/*************************************************************************
 * coilInfo structure filled by Scan with coil related information.      *
 * volRecCoilInfo structure filled by Scan with coil related information *
 *   for the volume receive coil related to each element of CoilInfo.    *
 * txCoilInfo structure filled by Scan with transmit coil related        *
 *   information.                                                        *
 * The COIL_INFO and TX_COIL_INFO is defined                             * 
 *   in /vobs/lx/include/CoilParameters.h                                *
 *                                                                       *
 * Initialize coil information to 1.5T XRMB BODY coil to allow PSDs      *
 *   to evalute until Scan sends the values for the current coil.        *
 *************************************************************************/

COIL_INFO coilInfo[MAX_COIL_SETS] = {
    {"GE_BODY",     /* coilName */
     TX_INDEX_BODY, /* txIndexPri */
     TX_INDEX_NONE, /* txIndexSec */
     RX_COIL_BODY,  /* rxCoilType */
     0,             /* hubIndex */
     PSD_PROTON,    /* rxNucleus */
     0,             /* aps1Mod */
     1,             /* aps1ModPlane */
     0,             /* coilSepDir */
     10000,         /* assetCalThreshold */
     FOV_MAX,       /* aps1ModFov */
     5,             /* aps1ModSlThick */
     0,             /* aps1ModPsTloc */
     0,             /* aps1ModPsRloc */
     FOV_MAX,       /* autoshimFov */
     FOV_MAX,       /* assetCalMaxFov */
     3.6,           /* maxB1Rms */
     0,             /* pureCompatible */
     10.0,          /* pureLambda */
     0.0,           /* pureTuningFactorSurface */
     1.0}           /* pureTuningFactorBody */
};

COIL_INFO volRecCoilInfo[MAX_COIL_SETS] = {
    {"GE_BODY",     /* coilName */
     TX_INDEX_BODY, /* txIndexPri */
     TX_INDEX_NONE, /* txIndexSec */
     RX_COIL_BODY,  /* rxCoilType */ 
     0,             /* hubIndex */
     PSD_PROTON,    /* rxNucleus */
     0,             /* aps1Mod */
     1,             /* aps1ModPlane */
     0,             /* coilSepDir */
     10000,         /* assetCalThreshold */
     FOV_MAX,       /* aps1ModFov */
     5,             /* aps1ModSlThick */                      
     0,             /* aps1ModPsTloc */                       
     0,             /* aps1ModPsRloc */                       
     FOV_MAX,       /* autoshimFov */                         
     FOV_MAX,       /* assetCalMaxFov */                      
     3.6,           /* maxB1Rms */
     0,             /* pureCompatible */
     10.0,          /* pureLambda */
     0.0,           /* pureTuningFactorSurface */
     1.0}           /* pureTuningFactorBody */
};

TX_COIL_INFO txCoilInfo[MAX_TX_COIL_SETS] = {
    {0,                     /* coilAtten */
     TX_COIL_BODY,          /* txCoilType */
     TX_POS_BODY,           /* txPosition */
     PSD_PROTON,            /* txNucleus */
     TX_AMP_NB,             /* txAmp */
     25.0,                  /* maxB1Peak */
     8.0,                   /* maxB1Squared */
     1.23,                  /* cableLoss */
     0.954,                 /* coilLoss */
     {0.326, -6.05E-3, 4.05E-5, -1.11E-7, 1.08E-10, 0.0, 1.0, 2.0, 3.0, 4.0}, /* reflCoeffSquared */
     0.0,                   /* reflCoeffMassOffset */
     0.0,                   /* reflCoeffCurveType */
     {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, /* exposedMass */
     {0.0026, 0.0, 0.0, 0.0, 0.0, 0.0, 1.48, 0.0, 0.0, 0.0, 0.0, 0.0}, /* jstd */
     {0.00124, 0.0, 0.0, 0.0, 0.0, 0.0, 1.48, 0.0, 0.0, 0.0, 0.0, 0.0}, /*  mean jstd */
     1.96}                   /* number of standard deviations */
};

ChannelTransTableEntryType cttEntry[MAX_NUM_CHAN_TRANSLATION_MAPS];

/***************************************************************
 * Narrowband and broadband local transmit select switch setting.
 * CIM calculates setting, PSD sets in entry point table, and 
 * SCP applies the setting in the hardware.  The valid values
 * are defined in lx/include/coilIdDefs.h
 ***************************************************************/ 
int cfNbTransmitSelect = TRANSMIT_SELECT_NONE; 
int cfBbTransmitSelect = TRANSMIT_SELECT_NONE;
int cfMnsConverterSelect = MNS_CONVERTER_SELECT_NONE;

/* Multi-b-value: b-values and NEX for each T2 image */
float bvalstab[MAX_NUM_BVALS] = {
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};

short difnextab[MAX_NUM_BVALS] = {
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};

/* MAVRIC-SL Arrays*/
float rhrcmavric_b0_offset[MAVRIC_MAX_BINS] = {
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000};
/* End MAVRIC-SL*/


/* 3dASL arrays */
short aslnextab[MAX_ASL_PHASES] = {-1, -1, -1};  /* NEX table */
short aslimgtab[MAX_ASL_PHASES] = {-1, -1, -1}; /* Image type debale: 1 = PW, 2 = PD, 3 = T1 */

/* Parallel Imaging UI */
int   piaccelscrn = 0;                 /* For controlling acceleration tab */
float piaccel_total_stride = 1.0;      /* Total Acceleration - If needed */     

float cfaccel_ph_maxstride = 1.0;      /* Coil specified limit in phase direction.*/
float cfaccel_sl_maxstride = 1.0;      /* Coil specified limit in slice direction.*/

float accel_ph_stride = 1.0;           /* Actual ph outer acceleration factor (PSD)*/
float accel_sl_stride = 1.0;           /* Actual sl outer acceleration factor (PSD)*/
float accel_ph_defstride = 2.0;        /* Default (initial) phase acceleration.*/
float accel_sl_defstride = 1.0;        /* Default (initial) slice acceleration.*/

float piaccel_ph_stride = 1.0;         /* Displayed slice acceleration. */
int   piaccel_phnub = 0;               /* Bitmask for phase acceleration menu.*/
int   piaccel_phedit = 1;              /* Ph UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
float piaccel_phval2 = 1.0;            /* Phase acceleration menu item 2 */
float piaccel_phval3 = 1.0;            /* Phase acceleration menu item 3 */
float piaccel_phval4 = 1.0;            /* Phase acceleration menu item 4 */
float piaccel_phval5 = 1.0;            /* Phase acceleration menu item 5 */
float piaccel_phval6 = 1.0;            /* Phase acceleration menu item 6 */

float piaccel_sl_stride = 1.0;         /* Displayed slice acceleration */
int   piaccel_slnub = 0;               /* Bitmask for slice acceleration menu.*/
int   piaccel_sledit = 1;              /* Slice UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
float piaccel_slval2 = 1.0;            /* Slice acceleration menu item 2 */
float piaccel_slval3 = 1.0;            /* Slice acceleration menu item 3 */
float piaccel_slval4 = 1.0;            /* Slice acceleration menu item 4 */
float piaccel_slval5 = 1.0;            /* Slice acceleration menu item 5 */
float piaccel_slval6 = 1.0;            /* Slice acceleration menu item 6 */

float piaccel_t_stride = 1.0;          /* Displayed temporal acceleration */
int   piaccel_tnub = 0;                /* Bitmask for temporal acceleration menu.*/
int   piaccel_tedit = 1;               /* Temporal UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
float piaccel_tval2 = 1.0;             /* Temporal acceleration menu item 2 */
float piaccel_tval3 = 1.0;             /* Temporal acceleration menu item 3 */
float piaccel_tval4 = 1.0;             /* Temporal acceleration menu item 4 */
float piaccel_tval5 = 1.0;             /* Temporal acceleration menu item 5 */
float piaccel_tval6 = 1.0;             /* Temporal acceleration menu item 6 */

float avminaccel_ph_stride = 1.0;      /* Advisory min phase acceleration.*/
float avminaccel_sl_stride = 1.0;      /* Advisory min slice acceleration.*/
float avminaccel_t_stride = 1.0;       /* Advisory min temporal acceleration.*/
float avmaxaccel_ph_stride = 1.0;      /* Advisory max phase acceleration.*/
float avmaxaccel_sl_stride = 1.0;      /* Advisory max slice acceleration.*/
float avmaxaccel_t_stride = 1.0;       /* Advisory max temporal acceleration.*/

float piaccel_ph_step = 0.0;          /* Phase Acceleration Step Size */
float piaccel_sl_step = 0.0;          /* Slice Acceleration Step Size */
float piaccel_t_step = 0.0;           /* Temporal Acceleration Step Size */

/* Host control of ARC image option for different coils: 
 * 0: ARC image option is disabled for all coils that is not
 *      compatible for ARC based on definition of CoilDB.
 * 1: ARC image option is disabled only for single channel coil
 * 2: ARC image option is not disabled for any coil*/
int piarccoilrestrict = 0; 

/* SDLC Checksum Parameters */
n32 chksum_rhdacqctrl = 0;
n32 chksum_scaninfo;
int chksum_rampdir = 1447292810;

/* When value is non-zero, scn will display the ERMES message number in
 * picontrastwarning when the contrast button is pressed. Introduced
 * for 3DASL. This can be extended to any other applications as needed */

int picontrastwarning = 0;

int piexcitemodenub = 1; /* Bit Mask for Excitation Mode UI: 0-Hide UI, 1-Selective, 2-Non-Selective, 4-Focus */
int pidefexcitemode = 0; /* Default value of Excitation Mode: 0-Selective, 1-Non-Selective, 2-Focus */
int cframpdir = 1;      /* Magnet  Ramp direction : 1 - Forward , -1 - Reverse  */                   
	  
int pihoeccvis = 0;  /* Flag for HOEC correction visibility: 1 = visible, 0 = invisible */
int pihoeccnub = 0;  /* Flag to enable/gray out the HOEC correction checkbox */

/* Reference B1 definition for prescan TG normalization */
float cfmaxb1ref = 14.63199; /* uTesla */
float xmtaddRef = 0.0;








_cvint  _prevent_scan_under_emul = { &prevent_scan_under_emul,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for preventing scan under emulation", 
    0, ""
};


_cvint  _acqs = { &acqs,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of acquisitions", 
    0, ""
};

_cvint  _avround = { &avround,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "if 1 advis routines round", 
    0, ""
};

_cvint  _baseline = { &baseline,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of baseline pairs.", 
    0, ""
};


_cvint  _nex = { &nex,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "number of excitations.", 
    0, ""
};






_cvfloat  _fn = { &fn,  
    0.5, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fractional Nex Indicator", 
    0, ""
};

_cvint  _enablfracdec = { &enablfracdec,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = Fractional decimation is disabled, 1 = Fractional decimation is enabled.", 
    0, ""
};

_cvfloat  _nop = { &nop,  
    1, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "2 if no phase wrap processing used", 
    0, ""
};

_cvint  _acq_type = { &acq_type,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Spin or grad recall", 
    0, ""
};

_cvint  _seq_type = { &seq_type,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "NCAT, CAT, MPMP...", 
    0, ""
};

_cvint  _num_images = { &num_images,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Total number of images acquired", 
    0, ""
};


_cvint  _mag = { &mag,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Magnitude Image if 1", 
    0, ""
};

_cvint  _pha = { &pha,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase Image if 1 ", 
    0, ""
};

_cvint  _imag = { &imag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Real image if 1 ", 
    0, ""
};

_cvint  _qmag = { &qmag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Imag image if 1 ", 
    0, ""
};


_cvint  _slquant1 = { &slquant1,  
    0, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of locs in first pass", 
    0, ""
};

_cvint  _psd_grd_wait = { &psd_grd_wait,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "data acquisition/gradient subsystem delay", 
    0, ""
};

_cvint  _psd_rf_wait = { &psd_rf_wait,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "delay between rf and gradient subsystems", 
    0, ""
};




_cvint  _pos_moment_start = { &pos_moment_start,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Testing CV for moments.", 
    0, ""
};






_cvint  _mps1rf1_inst = { &mps1rf1_inst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Instr. number for mps1 rf1 pulse", 
    0, ""
};

_cvint  _scanrf1_inst = { &scanrf1_inst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Instr. number for scan rf1 pulse", 
    0, ""
};


_cvint  _cfcarddelay = { &cfcarddelay,  
    0, 
    MAXINT, 
    10,  0, 0, 0, 1, 1, 
    INVIS, 
    "Delay of the cardiac hardware (ms)", 
    0, ""
};


_cvint  _psd_card_hdwr_delay = { &psd_card_hdwr_delay,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Cardiac hardware trigger delay.", 
    0, ""
};


_cvfloat  _GAM = { &GAM,  
    0, 
    MAXFLOAT, 
    GAMMA_PROTON,  0, 0, 0, 1, 1, 
    INVIS, 
    "Gamma for current nucleus.", 
    0, ""
 };

_cvint  _off90 = { &off90,  
    0, 
    MAXINT, 
    80,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset to where real 90 occurs", 
    0, ""
};

_cvint  _TR_SLOP = { &TR_SLOP,  
    0, 
    MAXINT, 
    2000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Slack in TR for line gating", 
    0, ""
};

_cvint  _TR_PASS = { &TR_PASS,  
    0, 
    MAXINT, 
    50000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Repetition time for pass entry pt", 
    0, ""
};

_cvint  _TR_PASS3D = { &TR_PASS3D,  
    0, 
    MAXINT, 
    550000,  0, 0, 0, 1, 1, 
    INVIS, 
    "TR for pass entry pt in 3d scans", 
    0, ""
};

_cvint  _csweight = { &csweight,  
    0, 
    180, 
    100,  0, 0, 0, 1, 1, 
    INVIS, 
    "Patient weight threshold for CS pulse width switch", 
    0, ""
};



_cvint  _exnex = { &exnex,  
    0, 
    300, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "used for BAM considerations", 
    0, ""
};

_cvfloat  _truenex = { &truenex,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Actual nex for odd nex npw scans", 
    0, ""
};

_cvint  _eg_phaseres = { &eg_phaseres,  
    0, 
    MAXINT, 
    128,  0, 0, 0, 1, 1, 
    INVIS, 
    "Phase encode res after asym fov calcs", 
    0, ""
};

_cvint  _sp_satcard_loc = { &sp_satcard_loc,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Flag sat placement with cardiac", 
    0, ""
};

_cvint  _min_rfdycc = { &min_rfdycc, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _min_rfavgpow = { &min_rfavgpow, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _min_rfrmsb1 = { &min_rfrmsb1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _coll_prefls = { &coll_prefls,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "if 1, then adjust RBA to collect half the number of taps", 
    0, ""
};


_cvint  _maxGradRes = { &maxGradRes,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximize ramp resolution (0=no,1=yes)?", 
    0, ""
};

_cvfloat  _dfg = { &dfg,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Digital Filter Gain", 
    0, ""
};

_cvfloat  _pg_beta = { &pg_beta,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Ramp transition time factor for pulsegen", 
    0, ""
};

_cvint  _split_dab = { &split_dab,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Split dab packets: 0=no, 1=yes", 
    0, ""
};

_cvfloat  _freq_scale = { &freq_scale,  
    0.0, 
    10.0, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "FOV scale factor in frequency y direction", 
    0, ""
};

_cvint  _numrecv = { &numrecv,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "number of receivers", 
    0, ""
};


_cvint  _pe_on = { &pe_on,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase encoding on/off (0=off, 1=on).", 
    0, ""
};

_cvfloat  _psd_targetscale = { &psd_targetscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _psd_zero = { &psd_zero,  
    0.0, 
    0.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS,  
    "Dummy address of start/end amplitude for bridged pulse.", 
    0, ""
};


_cvint  _lx_pwmtime = { &lx_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ly_pwmtime = { &ly_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _lz_pwmtime = { &lz_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _px_pwmtime = { &px_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _py_pwmtime = { &py_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pz_pwmtime = { &pz_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _min_seqgrad = { &min_seqgrad, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min_seqrfamp = { &min_seqrfamp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _xa2s = { &xa2s, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ya2s = { &ya2s, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _za2s = { &za2s, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _minseqcoil_t = { &minseqcoil_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoilburst_t = { &minseqcoilburst_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgram_t = { &minseqgram_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqchoke_t = { &minseqchoke_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcable_t = { &minseqcable_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcableburst_t = { &minseqcableburst_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqbusbar_t = { &minseqbusbar_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _minseqgrddrv_t = { &minseqgrddrv_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvx_t = { &minseqgrddrvx_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvy_t = { &minseqgrddrvy_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvz_t = { &minseqgrddrvz_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _powerx = { &powerx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _powery = { &powery, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _powerz = { &powerz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pospowerx = { &pospowerx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pospowery = { &pospowery, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pospowerz = { &pospowerz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _negpowerx = { &negpowerx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _negpowery = { &negpowery, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _negpowerz = { &negpowerz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_lx = { &amptrans_lx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_ly = { &amptrans_ly, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_lz = { &amptrans_lz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_px = { &amptrans_px, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_py = { &amptrans_py, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_pz = { &amptrans_pz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_lx = { &abspower_lx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_ly = { &abspower_ly, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_lz = { &abspower_lz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_px = { &abspower_px, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_py = { &abspower_py, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_pz = { &abspower_pz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _minseqpwm_x = { &minseqpwm_x, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqpwm_y = { &minseqpwm_y, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqpwm_z = { &minseqpwm_z, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgpm_t = { &minseqgpm_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _time_pgen = { &time_pgen, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cont_debug = { &cont_debug,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "debug mode: 0=off, 1=plane, 2=sat, 3=slthk", 
    0, ""
};


_cvint  _maxpc_cor = { &maxpc_cor,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Maxwell correction enabled.", 
    0, ""
};

_cvint  _maxpc_debug = { &maxpc_debug,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Print out Maxwell coefficients.", 
    0, ""
};

_cvint  _maxpc_points = { &maxpc_points,  
    100, 
    10000, 
    500,  0, 0, 0, 1, 1, 
    VIS,  
    "Number of points to use for Maxwell correction", 
    0, ""
};


_cvint  _pass_thru_mode = { &pass_thru_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Turn on or off pass thru filter mode for MGD", 
    0, ""
};


_cvint  _tmin = { &tmin,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Min time determined by waveforms", 
    0, ""
};

_cvint  _tmin_total = { &tmin_total,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Min time based on all constrants", 
    0, ""
};

_cvint  _psd_tol_value = { &psd_tol_value,  
     0, 
      MAXINT, 
     0,  0, 0, 0, 1, 1, 
     INVIS, 
     "Tolerance value from PSD", 
     0, ""
};


_cvint  _bd_index = { &bd_index,  
    PSD_XCVR1, 
    PSD_XCVR2, 
    PSD_XCVR2,  0, 0, 0, 1, 1, 
    VIS, 
    "Exciter board index", 
    0, ""
};


_cvint  _use_ermes = { &use_ermes,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Use error message database", 
    0, ""
};


_cvfloat  _fieldstrength = { &fieldstrength, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _asymmatrix = { &asymmatrix,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "if 1,Asymmetric Matrix is on", 
    0, ""
};

_cvint  _psddebugcode = { &psddebugcode,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "for support function debugging", 
    0, ""
};

_cvint  _psddebugcode2 = { &psddebugcode2,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "for support function debugging", 
    0, ""
};

_cvint  _serviceMode = { &serviceMode,   
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Service Mode flag for PSD internal use.",  
    0, ""
};


_cvint  _upmxdisable = { &upmxdisable,  
    0,  
    16,  
    16,  0, 0, 0, 1, 1,  
    INVIS, 
    "disable:1=body, 2=T/R, 4=spectro, 8=CW coil origin cross terms",  
    0, ""
};






_cvint  _tsamp = { &tsamp,  
    1, 
    256, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "Sampling rate for waveform digitization (usec).", 
    0, ""
};

_cvint  _seg_debug = { &seg_debug,  
    0, 
    10, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Waveform segmentation debug level (0-10).", 
    0, ""
};

_cvint  _CompositeRMS_method = { &CompositeRMS_method,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Algorithm for coil power calculation (0=Traditional, 1=New).", 
    0, ""
};

_cvint  _gradDriverMethod = { &gradDriverMethod,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Model for gradient driver heating calculation (0=Traditional, 1=New).", 
    0, ""
};



_cvint  _gradDCsafeMethod = { &gradDCsafeMethod,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Gradient coil heating method (0=DC model, 1=Safe DC Model).", 
    0, ""
};


_cvint  _stopwatchFlag = { &stopwatchFlag,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Start stopwatch for precise timing measurement.", 
    0, ""
};

_cvint  _seqEntryIndex = { &seqEntryIndex,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Sequence Entry Index used for Heating Limits calculations.", 
    0, ""
};


_cvint  _dbdt_debug = { &dbdt_debug,  
    0, 
    32767,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "debug bitmask for dbdtOpt feature", 
    0, ""
};

_cvint  _reilly_mode = { &reilly_mode,   
    0,  
    1,  
    1,  0, 0, 0, 1, 1,  
    VIS,  
    "Reilly Fraction estimation model - 0: Rectangular 1: convolution integral", 
    0, ""
};



_cvint  _dbdt_disable = { &dbdt_disable,   
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Switch to disable SlewRate optimization based on actual dB/dt",  
    0, ""
};




_cvint  _use_dbdt_opt = { &use_dbdt_opt,   
    0,  
    1,  
    1,  0, 0, 0, 1, 1,  
    INVIS,  
    "PSD Internal Flag for dB/dt optimization ",  
    0, ""
};

_cvfloat  _srderate = { &srderate,   
    1.0,  
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Final Slew-rate derating factor ", 
    0, ""
};

_cvint  _config_update_mode = { &config_update_mode,  
    -1, 
    9, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Mode for deciding configuration updates: -1=skip, 0=default (ACGD+), 1=CRM TENSOR", 
    0, ""
};

_cvint  _phys_record_flag = { &phys_record_flag,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Flag for recording Resp/Cardiac WF (0=off, 1=on)", 
    0, ""
};

_cvint  _phys_rec_resolution = { &phys_rec_resolution,  
    1,  
    100,  
    25,  0, 0, 0, 1, 1,  
    VIS,  
    "Resolution for Resp/Cardiac WF (ms, in steps of 1ms)", 
    0, ""
};













_cvint  _phys_record_channelsel = { &phys_record_channelsel,   
    0,  
    255,  
    15,  0, 0, 0, 1, 1,  
    VIS,  
    "Physiological Channel Selection(LSB-MSB): Trig and Data for Resp, PG, ECG3, ECG2", 
    0, ""
};


_cvint  _rotateflag = { &rotateflag,  
    0, 
    2,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for allowing arbitrary scan plane rotation, 1:on, 2:special (fse only)", 
    0, ""
};


_cvint  _rhpcspacial_dynamic = { &rhpcspacial_dynamic,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dyn PC space specificity: 0=use all, >=1 for one slice", 
    0, ""
};

_cvint  _rhpc_rationalscale = { &rhpc_rationalscale,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Scale Rational Scale Factor 0 = Off, 1 = ON", 
    0, ""
};

_cvint  _rhpcmag = { &rhpcmag,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "EPI Even/Odd Magnitude Correction", 
    0, ""
};

_cvint  _mild_note_support = { &mild_note_support,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Mild Note supported flag on option UIF", 
    0, ""
};

_cvint  _save_grad_spec_flag = { &save_grad_spec_flag,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    INVIS,  
    "Gradient config CVs saved flag for Gradient Spec Control", 
    0, ""
};

_cvint  _grad_spec_change_flag = { &grad_spec_change_flag,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    INVIS,  
    "Gradient config CVs modified flag for Gradient Spec Control", 
    0, ""
};

_cvint  _value_system_flag = { &value_system_flag,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Value 1.5T system flag", 
    0, ""
};

_cvint  _rectfov_npw_support = { &rectfov_npw_support,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Rect FOV and NPW support flag", 
    0, ""
};

_cvint  _pigeosrot = { &pigeosrot,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "psd sets up own rot matrices", 
    0, ""
};

_cvint  _minseqrf_cal = { &minseqrf_cal,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Def 0: Leagy Cal 1: New f(t) Cal", 
    0, ""
};

_cvint  _min_rfampcpblty = { &min_rfampcpblty,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amplifier Capability factor ", 
    0, ""
};

_cvint  _b1derate_flag = { &b1derate_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Def 0: Use default B1 derating  1: Use System B1 limit only (+10 safety margin)", 
    0, ""
};

_cvint  _oblmethod_dbdt_flag = { &oblmethod_dbdt_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Def 0 : Do not scale the axes 1: Scale the axes", 
    0, "Non-pgen dBdt optimization by setting obl_method to zero"
};


_cvint  _minseqcoil_esp = { &minseqcoil_esp,  
    -MAXINT, 
    MAXINT, 
    1000,  0, 0, 0, 1, 1, 
    VIS, 
    "", 
    0, ""
};

_cvint  _aspir_flag = { &aspir_flag,    
     0,       
     1,       
     0,  0, 0, 0, 1, 1,       
     VIS,     
     "Flag indicating ASPIR Fat Sat selection.",  
     0, ""
};

_cvint  _rhrawsizeview = { &rhrawsizeview,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "rhrawsize is 0 bytes/channel", 
    0, ""
};

_cvint  _chksum_scaninfo_view = { &chksum_scaninfo_view,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "chksum_scaninfo is 0", 
    0, ""
};

_cvint  _chksum_rhdacqctrl_view = { &chksum_rhdacqctrl_view,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "chksum_rhdacqctrl is 0", 
    0, ""
};

_cvfloat  _fnecho_lim = { &fnecho_lim,  
    0.5, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Fraction of read window.", 
    0, ""
};

_cvint  _psdcrucial_debug = { &psdcrucial_debug,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "debug flag for psdcrucial library functions", 
    0, ""
};

_cvint  _disable_exciter_unblank = { &disable_exciter_unblank,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Disable adding exciter unblank in RF support routines", 
    0, ""
};


_cvint  _cs_sat = { &cs_sat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cs_satstart = { &cs_satstart, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cs_sattime = { &cs_sattime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfcssatcfh = { &a_rfcssatcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_flip_rfcssatcfh = { &flip_rfcssatcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfcssatcfh = { &pw_rfcssatcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_rfcssatcfh = { &ia_rfcssatcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ChemSatPulse = { &ChemSatPulse, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gxkcs = { &area_gxkcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gykcs = { &area_gykcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gyakcs = { &area_gyakcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gzkcs = { &area_gzkcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _csk_derate_factor = { &csk_derate_factor,  1, 10, 1,  0, 0, 0, 1, 1, VIS, "ChemSat gradient derating factor", 0, "" };


_cvint  _pw_rfcssat = { &pw_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_pw_omega_hs_rfcssat = { &pw_omega_hs_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfcssat = { &off_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfcssat = { &ia_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ia_omega_hs_rfcssat = { &ia_omega_hs_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfcssat = { &cyc_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfcssat = { &a_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_a_omega_hs_rfcssat = { &a_omega_hs_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfcssat = { &alpha_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfcssat = { &gscale_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfcssat = { &flip_rfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrfcssat = { &a_gzrfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfcssat = { &ia_gzrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat = { &pw_gzrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzrfcssat = { &res_gzrfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzrfcssat_wrf = { &a_gzrfcssat_wrf, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _a_thetarfcssat = { &a_thetarfcssat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thetarfcssat = { &ia_thetarfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarfcssat = { &pw_thetarfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_thetarfcssat = { &res_thetarfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_thetarfcssat = { &off_thetarfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _bw_rfcssat = { &bw_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _selectiveChemsat = { &selectiveChemsat,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "plays a selective gradient during ChemSat RF playout",  0, "" };
_cvint  _numSlabs = { &numSlabs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _selectiveChemsatBWscaler = { &selectiveChemsatBWscaler, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _bw_rfchemsat = { &bw_rfchemsat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _num_gzrfcssat_lobe = { &num_gzrfcssat_lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_lobe = { &pw_gzrfcssat_lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_constant = { &pw_gzrfcssat_constant, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_rampz = { &pw_gzrfcssat_rampz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _num_gzrfcssat_lobe_norf = { &num_gzrfcssat_lobe_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_lobe_norf = { &pw_gzrfcssat_lobe_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_constant_norf = { &pw_gzrfcssat_constant_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcssat_rampz_norf = { &pw_gzrfcssat_rampz_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ext_pw_rfcssat = { &ext_pw_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_res_rfcssat = { &ext_res_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_isodelay = { &ext_isodelay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_water_freq_flag = { &ext_water_freq_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_pw_grad_sub_lobe = { &ext_pw_grad_sub_lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_pw_grad_sub_lobe_ramp = { &ext_pw_grad_sub_lobe_ramp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_num_grad_sub_lobe = { &ext_num_grad_sub_lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_pw_grad_sub_lobe_norf = { &ext_pw_grad_sub_lobe_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_pw_grad_sub_lobe_ramp_norf = { &ext_pw_grad_sub_lobe_ramp_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ext_num_grad_sub_lobe_norf = { &ext_num_grad_sub_lobe_norf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_abswidth = { &ext_abswidth, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_effwidth = { &ext_effwidth, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_area = { &ext_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_dtycyc = { &ext_dtycyc, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_maxpw = { &ext_maxpw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_max_b1 = { &ext_max_b1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_max_int_b1_sq = { &ext_max_int_b1_sq, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_max_rms_b1 = { &ext_max_rms_b1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_nom_fa = { &ext_nom_fa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_nom_pw = { &ext_nom_pw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_nom_bw = { &ext_nom_bw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_gzrfcssat_scale_fac = { &ext_gzrfcssat_scale_fac, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ext_fatsat_min_slthick = { &ext_fatsat_min_slthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _fatsat_factor = { &fatsat_factor,  0.1, 1.0, 1.0,  0, 0, 0, 1, 1, INVIS, "Fatsat efficiency factor", 0, "" };


_cvint  _csat_rfupa = { &csat_rfupa,  -1000, 1000, 0, 0, 0, 0, 1, 1, INVIS, "Corresponds to rfupa", 0, "" };
_cvint  _csat_sys_type = { &csat_sys_type, 0, 2, 0,  0, 0, 0, 1, 1, INVIS, "System Type 0:Standard Signa 1:VMX", 0, "" };




_cvint  _aspir_delay = { &aspir_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _aspir_cfoffset = { &aspir_cfoffset, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _aspir_minti = { &aspir_minti, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_T1 = { &aspir_T1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_TI = { &aspir_TI, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_TI_null = { &aspir_TI_null, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_TI_extra = { &aspir_TI_extra, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_TI_min = { &aspir_TI_min, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _aspir_eff = { &aspir_eff, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _fatFlag = { &fatFlag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cs_isodelay = { &cs_isodelay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cs_delay = { &cs_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _recovery_time = { &recovery_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_sat = { &flip_sat, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_satcfh = { &flip_satcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _fStrength = { &fStrength, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _use_spsp_fatsat = { &use_spsp_fatsat,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Use spatial-spectral fatsat pulse: 1=on, 0=off", 0, "" };
_cvint  _debug_spsp_fatsat = { &debug_spsp_fatsat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _spsp_fatsat_slthick = { &spsp_fatsat_slthick,  0.0, 1000.0, 30.0,  0, 0, 0, 1, 1, VIS, "SPSP fatsat pulse slice thickness", 0, "" };
_cvint  _spsp_fatsat_pulse_extra_time = { &spsp_fatsat_pulse_extra_time,  0, 30000, 0,  0, 0, 0, 1, 1, VIS,  "Extra time after SPSP fat sat pulse", 0, "" };
_cvint  _spsp_fatsat_spatial_mode = { &spsp_fatsat_spatial_mode,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "spsp fatsat location: 0-slice dependent, 1-fixed to center slice", 0, "" };
_cvfloat  _spsp_fatsat_spatial_offset = { &spsp_fatsat_spatial_offset,  -2000.0,  2000.0,  0.0,  0, 0, 0, 1, 1,  VIS,  "spatial location offset(mm)", 0, "" };
_cvint  _spsp_fatsat_pulse_override = { &spsp_fatsat_pulse_override,  0, 4, 0,  0, 0, 0, 1, 1, VIS, "spsp fatsat pulse selection: 0-auto selection, 1-high b1, 2-medium b1, 3-low b1, 4-ultra-low b1.", 0, "" };


_cvfloat  _spsp_fatsat_omega_scale = { &spsp_fatsat_omega_scale,  1.0, 4096, 256,  0, 0, 0, 1, 1, VIS,  "Instruction amplitude scaling", 0, "" };

_cvint  _aspir_fa_scaling_flag = { &aspir_fa_scaling_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Scale aspir pulse flip angle: 0-no, 1 yes", 0, "" };
_cvfloat  _max_aspir_fa = { &max_aspir_fa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _fa_scale_debug = { &fa_scale_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _ccs_dead = { &ccs_dead,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS,  "CatSat dead time for relaxers.", 0, "" };
_cvint  _ccs_relaxers = { &ccs_relaxers, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ccs_relaxtime = { &ccs_relaxtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ccs_relaxseqtime = { &ccs_relaxseqtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _SatRelaxers = { &SatRelaxers, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _gsat_scale = { &gsat_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfs = { &cyc_rfs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfs = { &pw_rfs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_satrampx = { &pw_satrampx, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_pw_satrampy = { &pw_satrampy, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_pw_satrampz = { &pw_satrampz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _sat_rot_ex_num = { &sat_rot_ex_num, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sat_rot_df_num = { &sat_rot_df_num, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sat_rot_index = { &sat_rot_index, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_isisat = { &pw_isisat,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "isi update delay", 0, "" };
_cvint  _pw_rotupdate = { &pw_rotupdate,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "rot. matrix update", 0, "" };
_cvint  _isi_satdelay = { &isi_satdelay,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "isi backup delay time", 0, "" };
_cvint  _rot_delay = { &rot_delay,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "delay from beginning of next ramp", 0, "" };

_cvint  _isi_extra = { &isi_extra,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "Extra time to move gradient killer", 0, "" };

_cvint  _sat_debug = { &sat_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _spsat_host_debug = { &spsat_host_debug,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "debug SpSat host calculation",  0, "" };
_cvint  _sp_first_scan = { &sp_first_scan, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _sat_obl_debug = { &sat_obl_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sat_newgeo = { &sat_newgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _spsat_rfupa = { &spsat_rfupa,  -1000, 1000, 0, 0, 0, 0, 1, 1, INVIS, "Corresponds to rfupa", 0, "" };
_cvint  _spsat_sys_type = { &spsat_sys_type, 0, 2, 0,  0, 0, 0, 1, 1, INVIS, "System Type 0:Standard Signa 1:VMX", 0, "" };


_cvint  _xkiller_set = { &xkiller_set, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _maxkiller_time = { &maxkiller_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _satgapxpos = { &satgapxpos,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };
_cvfloat  _satgapxneg = { &satgapxneg,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };
_cvfloat  _satgapypos = { &satgapypos,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };
_cvfloat  _satgapyneg = { &satgapyneg,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };
_cvfloat  _satgapzpos = { &satgapzpos,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };
_cvfloat  _satgapzneg = { &satgapzneg,  -MAXFLOAT, MAXFLOAT, 0,  0, 0, 0, 1, 1, VIS, 
			 "Distance(mm) from pulse to image vol.(freq dir.)", 0, "" };


_cvfloat  _satspacex1 = { &satspacex1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspacex2 = { &satspacex2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspacey1 = { &satspacey1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspacey2 = { &satspacey2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspacez1 = { &satspacez1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspacez2 = { &satspacez2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace1 = { &satspace1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace2 = { &satspace2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace3 = { &satspace3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace4 = { &satspace4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace5 = { &satspace5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satspace6 = { &satspace6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvfloat  _satthickx1 = { &satthickx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickx2 = { &satthickx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickdfx = { &satthickdfx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthicky1 = { &satthicky1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthicky2 = { &satthicky2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickdfy = { &satthickdfy, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickz1 = { &satthickz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickz2 = { &satthickz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satthickdfz = { &satthickdfz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick1 = { &exsatthick1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick2 = { &exsatthick2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick3 = { &exsatthick3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick4 = { &exsatthick4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick5 = { &exsatthick5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_exsatthick6 = { &exsatthick6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };





_cvfloat  _satxlocpos = { &satxlocpos, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satxlocneg = { &satxlocneg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satylocpos = { &satylocpos, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satylocneg = { &satylocneg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satzlocpos = { &satzlocpos, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satzlocneg = { &satzlocneg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satzloca = { &satzloca, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satzlocb = { &satzlocb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce1 = { &satloce1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce2 = { &satloce2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce3 = { &satloce3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce4 = { &satloce4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce5 = { &satloce5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_satloce6 = { &satloce6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _area_rfsx1 = { &area_rfsx1,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf x sat pulse", 0, "" };
_cvfloat  _area_rfsx2 = { &area_rfsx2,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf x sat pulse", 0, "" };
_cvfloat  _area_rfsy1 = { &area_rfsy1,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf y sat pulse", 0, "" };
_cvfloat  _area_rfsy2 = { &area_rfsy2,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf y sat pulse", 0, "" };
_cvfloat  _area_rfsz1 = { &area_rfsz1,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf z sat pulse", 0, "" };
_cvfloat  _area_rfsz2 = { &area_rfsz2,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of rf z sat pulse", 0, "" };
_cvfloat  _area_rfse1 = { &area_rfse1,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };
_cvfloat  _area_rfse2 = { &area_rfse2,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };
_cvfloat  _area_rfse3 = { &area_rfse3,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };
_cvfloat  _area_rfse4 = { &area_rfse4,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };
_cvfloat  _area_rfse5 = { &area_rfse5,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };
_cvfloat  _area_rfse6 = { &area_rfse6,  0, MAXFLOAT, 0,  0, 0, 0, 1, 1, INVIS,  "area of explicit rf sat pulse", 0, "" };

_cvfloat  _area_gyksx1 = { &area_gyksx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gyksx2 = { &area_gyksx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gyksy1 = { &area_gyksy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gyksy2 = { &area_gyksy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gyksz1 = { &area_gyksz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_area_gyksz2 = { &area_gyksz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gykse1 = { &area_gykse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gykse2 = { &area_gykse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gykse3 = { &area_gykse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gykse4 = { &area_gykse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_area_gykse5 = { &area_gykse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gykse6 = { &area_gykse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _area_gxksx1 = { &area_gxksx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxksx2 = { &area_gxksx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxksy1 = { &area_gxksy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxksy2 = { &area_gxksy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxksz1 = { &area_gxksz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_area_gxksz2 = { &area_gxksz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxkse1 = { &area_gxkse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxkse2 = { &area_gxkse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxkse3 = { &area_gxkse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxkse4 = { &area_gxkse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },
_area_gxkse5 = { &area_gxkse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gxkse6 = { &area_gxkse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _sp_sattime = { &sp_sattime,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "Total time needed for spatial sat", 0, "" };
_cvint  _sp_satstart = { &sp_satstart,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "Start time for spatial presat", 0, "" };

_cvint  _vrgsat = { &vrgsat,  0, 3, 2,  0, 0, 0, 1, 1, VIS,  "SAT pulse type", 0, "" };
_cvint  _numsatramp = { &numsatramp,  0,  7,  0,  0, 0, 0, 1, 1,  INVIS,  "Number of ramps in sat seq",  0, "" };
_cvint  _had_sat = { &had_sat,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "Hadamard sat flag", 0, "" };

_cvfloat  _rtia3d_sat_flip = { &rtia3d_sat_flip,  1.0, 90.0, 60.0,  0, 0, 0, 1, 1, VIS, 
                          "Flip angle for SAT pulse in FTMRA mode.", 0, "" };

_cvfloat  _rtia3d_sat_pos = { &rtia3d_sat_pos,  1.0, 400.0, 100.0,  0, 0, 0, 1, 1, VIS, 
                                   "SAT pulse +/- position in FTMRA mode.", 0, "" };

_cvint  _sat_pulse_type = { &sat_pulse_type,  REAL_RF,  COMPLEX_RF,  REAL_RF,  0, 0, 0, 1, 1,  INVIS,  "SAT pulse type", 0, "" };


_cvint  _autolock = { &autolock,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1 will autolock raw files", 
0, "" };

_cvint  _blank = { &blank,  
    0, 
    20, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of pixels to remove from cson edge.", 
0, "" };

_cvint  _nograd = { &nograd,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if no gradwarp desired.", 
0, "" };

_cvint  _nofermi = { &nofermi,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if no fermi filter desired.", 
0, "" };

_cvint  _rawdata = { &rawdata,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 for NOREC, 1 for NOPROC.", 
0, "" };

_cvint  _saveinter = { &saveinter,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1 to store all intermed images.", 
0, "" };

_cvint  _zchop = { &zchop,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if data chopped on z, 0 if chopped on y.", 
0, "" };

_cvint  _eepf = { &eepf,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Even Echo Phase Flip", 
0, "" };

_cvint  _oepf = { &oepf,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Odd Echo Phase Flip", 
0, "" };

_cvint  _eeff = { &eeff,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Even Echo Freq Flip", 
0, "" };

_cvint  _oeff = { &oeff,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Odd Echo Freq flip", 
0, "" };

_cvint  _cine_choplet = { &cine_choplet,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "on 1, let pcm do chopping", 
0, "" };


_cvfloat  _fermi_rc = { &fermi_rc,  
    0.0, 
    MAXFLOAT, 
    0.5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi radius coefficient", 
0, "" };

_cvfloat  _fermi_wc = { &fermi_wc,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi window coefficient", 
0, "" };


_cvint  _rcvinput = { &rcvinput,  0,  5,  PSD_RP_SURFACE,  0, 0, 0, 1, 1,  VIS, 
                                    "Receiver input port: 1 = Head,"
                                    " 2 = Body, 3 = Surface, 4 = CERD MC,"
                                    " 5 = Spectro, 0 = Test",  0, "" };
_cvint  _rcvbias = { &rcvbias,  0,  MAXINT,  PSD_RB_SURFACE,  0, 0, 0, 1, 1,  VIS, 
                                    "Receiver Bias Port: 4 = Head,"
                                    " 8 = Body, 16 = Surface, 32 = Test",  0, "" };
_cvint  _trdriver = { &trdriver,  0,  5,  PSD_RP_SURFACE,  0, 0, 0, 1, 1,  VIS, 
                                    "T/R driver port: 1 = Head,"
                                    " 2 = Body, 3 = Surface, 4 = CERD MC,"
                                    " 5 = Spectro, 0 = Test",  0, "" };
_cvint  _rcvband = { &rcvband,  0,  1,  0,  0, 0, 0, 1, 1,  VIS, 
                                     "Broadband receiver flag",  0, "" };

_cvint  _cv_rfupa = { &cv_rfupa,  -1000, 1000, 0, 0, 0, 0, 1, 1, INVIS, "Corresponds to rfupa", 0, "" };
_cvint  _system_type = { &system_type, 0, 2, 0,  0, 0, 0, 1, 1, INVIS, "System Type 0:Standard Signa 1:VMX", 0, "" };
_cvint  _cvlock = { &cvlock,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Lock flag for Modify CVs  0:Off 1:On", 0, "" };
_cvint  _psd_taps = { &psd_taps,  -1, MAXINT, 255,  0, 0, 0, 1, 1, VIS, 
  "for setfilter call -1:for optimized taps   255:for fixed CERD filter taps", 0, "" };
_cvint  _fix_fermi = { &fix_fermi,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
     "use original Fermi filter if 1", 0, "" };
_cvint  _grad_spec_ctrl = { &grad_spec_ctrl, 
 -1, 3, 0,  0, 0, 0, 1, 1, INVIS, "Grad Spec. control bits 1:gmax 2:srate", 0, "" };
_cvfloat  _srate = { &srate,  0.5, 23.0, 1.71,  0, 0, 0, 1, 1, INVIS,  "slewrate", 0, "" };
_cvfloat  _glimit = { &glimit,  0.5, 5.0, 1.0,  0, 0, 0, 1, 1, INVIS,  "g-max", 0, "" };
_cvfloat  _save_gmax = { &save_gmax, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_srate = { &save_srate, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_cfxfull = { &save_cfxfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_cfyfull = { &save_cfyfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_cfzfull = { &save_cfzfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_cfxipeak = { &save_cfxipeak, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_cfyipeak = { &save_cfyipeak, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_cfzipeak = { &save_cfzipeak, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_ramptime = { &save_ramptime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _debug_grad_spec = { &debug_grad_spec,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 to turn on gradient spec debug", 0, "" };
_cvfloat  _act_srate = { &act_srate, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _val15_lock = { &val15_lock, 
 0, 1, 0,  0, 0, 0, 1, 1, INVIS, "Lock out HDMR2/DVMR features for Value 1.5T 0:off 1:on", 0, "" };















_cvfloat  _PSsr_derate_factor = { &PSsr_derate_factor,  1.0,  50.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "PSC SR derating factor", 0, "" };
_cvfloat  _PSassr_derate_factor = { &PSassr_derate_factor,  1.0,  50.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "AutoShim SR derating factor", 0, "" };


_cvfloat  _mpsfov = { &mpsfov,  FOV_MIN, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS,  "mpsfov", 0, "" };

_cvint  _fastprescan = { &fastprescan,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Fast prescan on/off", 0, "" };
_cvint  _pre_slice = { &pre_slice,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "prescan slice number", 0, "" };
_cvint  _PSslice_num = { &PSslice_num, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddAPS1 = { &xmtaddAPS1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddCFL = { &xmtaddCFL, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddCFH = { &xmtaddCFH, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddFTG = { &xmtaddFTG, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtadd = { &xmtadd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddRCVN = { &xmtaddRCVN, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ps1scale = { &ps1scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cflscale = { &cflscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cfhscale = { &cfhscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ftgscale = { &ftgscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _extraScale = { &extraScale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _PSdebugstate = { &PSdebugstate,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Debug flag for Prescan", 0, "" };
_cvint  _PSfield_strength = { &PSfield_strength,  0, MAXINT, 0, 0, 0, 0, 1, 1,  VIS,  "Prescan Field Strength", 0, "" };
_cvint  _PScs_sat = { &PScs_sat,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Prescan Chem-SAT flag", 0, "" };
_cvint  _PSir = { &PSir,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Prescan IR flag", 0, "" };
_cvint  _PSmt = { &PSmt,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Prescan MT flag", 0, "" };
_cvint  _ps1_rxcoil = { &ps1_rxcoil,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "TG PS1 Coil: 1=Rxed coil, 0=default", 0, "" };


_cvint  _tg_1_2_pw = { &tg_1_2_pw,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1:2 pw TG prescan flag", 0, "" };
_cvint  _tg_axial = { &tg_axial,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "0:user plane 2:axial", 0, "" };
_cvfloat  _coeff_pw_tg = { &coeff_pw_tg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _fov_lim_mps = { &fov_lim_mps,  30, 450, 350,  0, 0, 0, 1, 1, VIS, "FOV limt for MPS", 0, "" };


_cvint  _TGspf = { &TGspf,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "TG swap phase/freq. flag",  0, "" };

_cvfloat  _flip_rf2cfh = { &flip_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf3cfh = { &flip_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ps1_tr = { &ps1_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfl_tr = { &cfl_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfh_tr = { &cfh_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rcvn_tr = { &rcvn_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _cfh_ec_position = { &cfh_ec_position,  0.0,  1.0,  (16.0/256.0),  0, 0, 0, 1, 1,  VIS,  "Position of the echo center", 0, "" };

_cvint  _cfl_dda = { &cfl_dda,  0,  4,  4,  0, 0, 0, 1, 1,  VIS,  "Num. disdaqs in cfl", 0, "" };
_cvint  _cfl_nex = { &cfl_nex,  1,  2,  2,  0, 0, 0, 1, 1,  VIS,  "Num. nex in cfl", 0, "" };
_cvint  _cfh_dda = { &cfh_dda,  0,  4,  4,  0, 0, 0, 1, 1,  VIS,  "Num. disdaqs in cfh", 0, "" };
_cvint  _cfh_nex = { &cfh_nex,  1,  2,  2,  0, 0, 0, 1, 1,  VIS,  "Num. nex in cfh", 0, "" };
_cvint  _rcvn_dda = { &rcvn_dda,  0,  4,  4,  0, 0, 0, 1, 1,  VIS,  "Num. disdaqs in RCVN", 0, "" };
_cvint  _rcvn_nex = { &rcvn_nex,  1,  2,  2,  0, 0, 0, 1, 1,  VIS,  "Num. nex in RCVN", 0, "" };








_cvint  _presscfh_override = { &presscfh_override,  0,  PRESSCFH_NONE, 0,  0, 0, 0, 1, 1,  VIS,  "PSD Level Control for Overriding the default CFH selected by opimode", 0, "" };
_cvint  _presscfh = { &presscfh,  1, PRESSCFH_NONE, PRESSCFH_NONE,  0, 0, 0, 1, 1,  VIS,  "PSD Level Control for CFH", 0, "" };
_cvint  _presscfh_ctrl = { &presscfh_ctrl,  1, PRESSCFH_NONE , PRESSCFH_NONE,  0, 0, 0, 1, 1,  VIS,  "Geometry Level control for CFH", 0, "" };
_cvint  _presscfh_outrange = { &presscfh_outrange, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_cgate = { &presscfh_cgate, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_debug = { &presscfh_debug,  0, DEBUG_DEV, 0,  0, 0, 0, 1, 1, VIS, "IR PRESS CFH debugging information", 0, "" };
_cvint  _presscfh_wait_rf12 = { &presscfh_wait_rf12, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_minte = { &presscfh_minte, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_fov = { &presscfh_fov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_fov_ratio = { &presscfh_fov_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_pfov_ratio = { &presscfh_pfov_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_slab_ratio = { &presscfh_slab_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_pfov = { &presscfh_pfov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_slthick = { &presscfh_slthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_ir_slthick = { &presscfh_ir_slthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_ir_noselect = { &presscfh_ir_noselect, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _presscfh_minfov_ratio = { &presscfh_minfov_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _cfh_steam_flag = { &cfh_steam_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _steam_pg_gap = { &steam_pg_gap, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _area_gykcfl = { &area_gykcfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gykcfh = { &area_gykcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_xtgzkiller = { &area_xtgzkiller, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_xtgykiller = { &area_xtgykiller, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _PSoff90 = { &PSoff90, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dummy_pw = { &dummy_pw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min180te = { &min180te, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _PStloc = { &PStloc, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _PSrloc = { &PSrloc, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _PSphasoff = { &PSphasoff, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _PStrigger = { &PStrigger, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _PStloc_mod = { &PStloc_mod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _PSrloc_mod = { &PSrloc_mod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thickPS_mod = { &thickPS_mod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _asx_killer_area = { &asx_killer_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _asz_killer_area = { &asz_killer_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cfhir_killer_area = { &cfhir_killer_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ps_crusher_area = { &ps_crusher_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cfh_crusher_area = { &cfh_crusher_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _target_cfh_crusher = { &target_cfh_crusher, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _target_cfh_crusher2 = { &target_cfh_crusher2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cfh_newmode = { &cfh_newmode, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cfh_rf2freq = { &cfh_rf2freq,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _cfh_rf3freq = { &cfh_rf3freq,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _cfh_rf1freq = { &cfh_rf1freq,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _cfh_fov = { &cfh_fov,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvint  _cfh_ti = { &cfh_ti, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _eff_cfh_te = { &eff_cfh_te, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _FTGslthk = { &FTGslthk,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };

_cvfloat  _FTGopslthickz1 = { &FTGopslthickz1,  MINTHICK, 80, 80,  0, 0, 0, 1, 1, VISONLY, "Slice thickness in mm.", 0, "" };
_cvfloat  _FTGopslthickz2 = { &FTGopslthickz2,  MINTHICK, 80, 80,  0, 0, 0, 1, 1, VISONLY, "Slice thickness in mm.", 0, "" };
_cvfloat  _FTGopslthickz3 = { &FTGopslthickz3,  MINTHICK, 80, 20,  0, 0, 0, 1, 1, VISONLY, "Slice thickness in mm.", 0, "" };
_cvint  _ftgtr = { &ftgtr,  TR_MIN, TR_MAX, 2000000,  0, 0, 0, 1, 1, VISONLY, "Fast TG time of repetition", 0, "" };
_cvfloat  _FTGfov = { &FTGfov,  FOV_MIN, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISONLY, "FastTG fov", 0, "" };
_cvfloat  _FTGau = { &FTGau,  -MAXFLOAT, MAXFLOAT, 4,  0, 0, 0, 1, 1, VISONLY, "Tau scale factor", 0, "" };
_cvfloat  _FTGtecho = { &FTGtecho,  -MAXFLOAT, MAXFLOAT, 4,  0, 0, 0, 1, 1, VISONLY, "", 0, "" };
_cvint  _FTGtau1 = { &FTGtau1,  0, 64000, 8192  ,  0, 0, 0, 1, 1, VISONLY, "Theta1 to Theta2 time (center to center)", 0, "" };
_cvint  _FTGtau2 = { &FTGtau2,  0, 64000, 32768  ,  0, 0, 0, 1, 1, VISONLY,  "Theta1 to Theta3 time (center to center)", 0, "" };
_cvint  _FTGacq1 = { &FTGacq1,  0, 1, 0,  0, 0, 0, 1, 1, VISONLY,  "1=window one active, 0=disabled", 0, "" };
_cvint  _FTGacq2 = { &FTGacq2,  0, 1, 1,  0, 0, 0, 1, 1, VISONLY,  "1=window two active, 0=disabled", 0, "" };
_cvint  _epi_ir_on = { &epi_ir_on,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "1=IR EPI", 0, "" };
_cvint  _ssfse_ir_on = { &ssfse_ir_on,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "1=IR EPI", 0, "" };
_cvint  _ftg_dda = { &ftg_dda,  0, 16, 0,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in fast TG", 0, "" };

_cvfloat  _FTGecho1bw = { &FTGecho1bw,  2, 32, 4,  0, 0, 0, 1, 1, VISONLY,  "Fast TG Echo1 filter bw. in KHz", 0, "" };
_cvint  _FTGtestpulse = { &FTGtestpulse,  0, 1, 0,  0, 0, 0, 1, 1, VISONLY, "Test pulse for gradient moment tests."
, 0, "" };
_cvint  _FTGxres = { &FTGxres,  16, 512, 256,  0, 0, 0, 1, 1, VISONLY,  "X(frequency) resolution", 0, "" };
_cvfloat  _FTGxmtadd = { &FTGxmtadd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftgleft = { &pw_gxw2ftgleft, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _xtgtr = { &xtgtr,  TR_MIN, TR_MAX, 200000,  0, 0, 0, 1, 1, VISONLY, "eXpress TG time of repetition", 0, "" };
_cvint  _XTGtau1 = { &XTGtau1,  0, 64000, 8192  ,  0, 0, 0, 1, 1, VISONLY, "Theta1 to Theta2 time (center to center)", 0, "" };
_cvfloat  _XTGfov = { &XTGfov,  FOV_MIN, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISONLY, "eXpress TG fov", 0, "" };
_cvint  _pw_bsrf = { &pw_bsrf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _xtg_volRecCoil = { &xtg_volRecCoil,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "XTG coil 0=Rx'ed Coil; 1=vol. rec. coil", 0, "" };
_cvint  _xtg_offres_freq = { &xtg_offres_freq, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _XTGecho1bw = { &XTGecho1bw,  2, 32, 15.625,  0, 0, 0, 1, 1, VISONLY,  "eXpress TG Echo1 filter bw. in KHz", 0, "" };
_cvint  _XTGxres = { &XTGxres,  16, 512, 256,  0, 0, 0, 1, 1, VISONLY,  "X(frequency) resolution", 0, "" };
_cvfloat  _xmtaddXTG = { &xmtaddXTG, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xtgscale = { &xtgscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _xtg_dda = { &xtg_dda,  0, 16, 0,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in express TG", 0, "" };
_cvint  _XTGacq1 = { &XTGacq1,  0, 1, 0,  0, 0, 0, 1, 1, VISONLY,  "1=window one active, 0=disabled", 0, "" };
_cvfloat  _XTGopslthick = { &XTGopslthick,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };



_cvint  _CFLxres = { &CFLxres,  16, 4096, 256,  0, 0, 0, 1, 1, VISONLY,  "CFL X(frequency) resolution", 0, "" };

_cvfloat  _echo1bwcfl = { &echo1bwcfl,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 CFL filter bw. in KHz", 0, "" };
_cvfloat  _echo1bwcfh = { &echo1bwcfh,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 CFH filter bw. in KHz", 0, "" };

_cvint  _echo1ptcfh = { &echo1ptcfh,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 CFH filter output points", 0, "" };

_cvfloat  _echo1bwrcvn = { &echo1bwrcvn,  -MAXFLOAT, MAXFLOAT,  15.625,  0, 0, 0, 1, 1,  INVIS,  "Echo1 RCVN filter BW in KHz", 0, "" };
_cvint  _rcvn_xres = { &rcvn_xres,  128,  4096,  4096,  0, 0, 0, 1, 1,  VIS,  "X(frequency) resolution for RCVN filter", 0, "" };
_cvint  _rcvn_loops = { &rcvn_loops, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvfloat  _echo1bwas = { &echo1bwas,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 auto-shim filter bw. in KHz", 0, "" };

_cvint  _off90as = { &off90as,  -MAXINT, MAXINT, 80,  0, 0, 0, 1, 1, INVIS,  "Comp factor for real 90", 0, "" };
_cvint  _td0as = { &td0as,  0, MAXINT, 1,  0, 0, 0, 1, 1, INVIS,  "Init deadtime", 0, "" };
_cvint  _t_exaas = { &t_exaas,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "time from start of 90 to mid 90", 0, "" };
_cvint  _time_ssias = { &time_ssias,  0, MAXINT, 400  ,  0, 0, 0, 1, 1, INVIS,  "time from eos to ssi in intern trig", 0, "" };
_cvint  _tleadas = { &tleadas,  0, MAXINT, 25  ,  0, 0, 0, 1, 1, INVIS,  "Init deadtime", 0, "" };

_cvint  _te_as = { &te_as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_as = { &tr_as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _as_dda = { &as_dda,  0, 4, 4,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in autoshim", 0, "" };



_cvint  _rgfeature_enable = { &rgfeature_enable,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  INVIS,  "Enable RG Reduction Feature (0:No, 1:Yes)", 0, "" };



_cvfloat  _aslenap = { &aslenap,  0,  MAXFLOAT,  200,  0, 0, 0, 1, 1,  VIS,  "AP length of shim voxel (mm)",  0, "" };
_cvfloat  _aslenrl = { &aslenrl,  0,  MAXFLOAT,  200,  0, 0, 0, 1, 1,  VIS,  "RL length of shim voxel (mm)",  0, "" };
_cvfloat  _aslensi = { &aslensi,  0,  MAXFLOAT,  200,  0, 0, 0, 1, 1,  VIS,  "SI length of shim voxel (mm)",  0, "" };

_cvfloat  _aslocap = { &aslocap,   -MAXFLOAT,  MAXFLOAT,  0,  0, 0, 0, 1, 1,  VIS,  "AP location of shim voxel (mm)",  0, "" };
_cvfloat  _aslocrl = { &aslocrl,   -MAXFLOAT,  MAXFLOAT,  0,  0, 0, 0, 1, 1,  VIS,  "RL location of shim voxel (mm)",  0, "" };
_cvfloat  _aslocsi = { &aslocsi,   -MAXFLOAT,  MAXFLOAT,  0,  0, 0, 0, 1, 1,  VIS,  "SI location of shim voxel (mm)",  0, "" };



_cvfloat  _area_gxwas = { &area_gxwas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gz1as = { &area_gz1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_readrampas = { &area_readrampas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_pwgx1as = { &avail_pwgx1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_pwgy1as = { &avail_pwgy1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_pwgz1as = { &avail_pwgz1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _bw_rf1as = { &bw_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _flip_pctas = { &flip_pctas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _dix_timeas = { &dix_timeas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddas = { &xmtaddas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtlogas = { &xmtlogas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ps1obl_debug = { &ps1obl_debug,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
                        "On(=1) to print messages for obloptimize", 0, "" };
_cvint  _asobl_debug = { &asobl_debug,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
                        "On(=1) to print messages for obloptimize", 0, "" };
_cvint  _ps1_newgeo = { &ps1_newgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _as_newgeo = { &as_newgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1as_tot = { &pw_gy1as_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endview_iampas = { &endview_iampas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endview_scaleas = { &endview_scaleas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _cfh_newgeo = { &cfh_newgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfhobl_debug = { &cfhobl_debug,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
                        "On(=1) to print messages for obloptimize", 0, "" };

_cvfloat  _deltf = { &deltf,  -MAXFLOAT, MAXFLOAT, 1.0,  0, 0, 0, 1, 1, VIS, "Frequency shift", 0, "" };

_cvint  _IRinCFH = { &IRinCFH,  0,  0,  0,  0, 0, 0, 1, 1,  INVIS,  "YMS IR in CFH flag",  0, "" };
_cvint  _cfh_each = { &cfh_each,  0,  0,  0,  0, 0, 0, 1, 1,  INVIS,  "YMS CFH per slice flag",  0, "" };
_cvint  _cfh_slquant = { &cfh_slquant,  0,  0,  0,  0, 0, 0, 1, 1,  INVIS,  "YMS CFH slice quantity",  0, "" };

_cvint  _noswitch_slab_psc = { &noswitch_slab_psc,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "No slab switch for psc(sotf)", 0, "" };
_cvint  _noswitch_coil_psc = { &noswitch_coil_psc,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "No coil switch for psc(sotf)", 0, "" };
_cvint  _PStest_slab = { &PStest_slab,  1, 2, 1,  0, 0, 0, 1, 1, INVIS, "Testing slab for psc(sotf)", 0, "" };

_cvint  _pimrsapsflg = { &pimrsapsflg,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "flag for MRS AutoPrescan",  0, "" };
_cvint  _pimrsaps1 = { &pimrsaps1,   0,  116,  1,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 1: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR,"
                                 "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                 "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps2 = { &pimrsaps2,   0,  116,  2,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 2: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                 "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps3 = { &pimrsaps3,    0,  116,  3,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 3: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                 "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps4 = { &pimrsaps4,    0,  116,  4,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 4: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                 "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps5 = { &pimrsaps5,   0,  116,  1,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 5: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                 "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps6 = { &pimrsaps6,  0,  116,  3,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 6: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                 "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps7 = { &pimrsaps7,   0,  116,  3,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 7: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                 "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps8 = { &pimrsaps8,   0,  116,  101,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 8: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                 "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps9 = { &pimrsaps9,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 9: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                 "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps10 = { &pimrsaps10,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 10: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                  "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps11 = { &pimrsaps11,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 11: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                  "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps12 = { &pimrsaps12,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 12: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                  "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps13 = { &pimrsaps13,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 13: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                  "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps14 = { &pimrsaps14,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 14: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                  "104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps15 = { &pimrsaps15,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 15: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 10=APA, 12=RCVN, 101=AWS, 103=SHIM, "
                                  "104=FTG, 116=XTG",  0, "" };





_cvint  _pw_contrfhubsel = { &pw_contrfhubsel,  0,  MAXINT,  4,  0, 0, 0, 1, 1,  INVIS,  "Width of the change hub index packet", 0, "" };
_cvint  _delay_rfhubsel = { &delay_rfhubsel, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_contrfsel = { &pw_contrfsel,  0,  MAXINT,  4,  0, 0, 0, 1, 1,  INVIS,  "Width of the modify receiver port packet", 0, "" };
_cvint  _csw_tr = { &csw_tr,  0,  MAXINT, 0,  0, 0, 0, 1, 1,  VIS, "seq length for receiver coil switch core", 0, "" };
_cvint  _csw_wait_sethubindeximm = { &csw_wait_sethubindeximm, 
    0,  MAXINT,  250000,  0, 0, 0, 1, 1,  VIS,  "Additional time for coil switch when calling sethubindeximm", 0, "" };
_cvint  _csw_wait_setrcvportimm = { &csw_wait_setrcvportimm, 
    0,  MAXINT,  100000,  0, 0, 0, 1, 1,  VIS,  "Additional time for coil switch when calling setrcvportimm ", 0, "" };
_cvint  _csw_wait_before = { &csw_wait_before,  0,  MAXINT,  10000,  0, 0, 0, 1, 1, INVIS, "Delay for coil switching startup", 0, "" };
_cvint  _csw_time_ssi = { &csw_time_ssi, 
    0,  MAXINT,  50000,  0, 0, 0, 1, 1,  VIS,  "time from eos to ssi in intern trig for coil switch", 0, "" };


_cvfloat  _area_gxkrcvn = { &area_gxkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gykrcvn = { &area_gykrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gzkrcvn = { &area_gzkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pre_rcvn_tr = { &pre_rcvn_tr,  0,  MAXINT,  0,  0, 0, 0, 1, 1,  VIS,  "Pre sequence before RCVN", 0, "" };
_cvint  _rcvn_flag = { &rcvn_flag,  0,  2,  1,  0, 0, 0, 1, 1,  VIS,  "0: OFF; 1: crusher; 2: delay b4 RCVN", 0, "" };




_cvfloat  _yk0_killer_area = { &yk0_killer_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ir_on = { &ir_on,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for IR.", 0, "" };
_cvint  _ir_start = { &ir_start,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Start time for IR.", 0, "" };
_cvint  _irk_start = { &irk_start,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Start time for IR killer. ", 0, "" };
_cvint  _ir_grad_time = { &ir_grad_time,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Play time for IR gradients.", 0, "" };
_cvint  _ir_time = { &ir_time,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Total IR time without SATs.", 0, "" };
_cvint  _ir_time_total = { &ir_time_total,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Total IR time with SATs.", 0, "" };
_cvint  _ext_ir_pulse = { &ext_ir_pulse,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for IR pulse selection.", 0, "" };
_cvfloat  _rf0_phase = { &rf0_phase,  0.0, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, INVIS, "Relative phase of 180 in cyc", 0, "" };
_cvint  _non_tetitime = { &non_tetitime,  0.0, MAXINT, 0.0,  0, 0, 0, 1, 1, INVIS, "Time outside TE, TI loop", 0, "" };
_cvint  _irslquant = { &irslquant, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _irinterval = { &irinterval,  0, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "Interval within pulses in inversion pulse chain", 0, "" };
_cvint  _bw_rf0 = { &bw_rf0,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Bandwidth of IR pulse", 0, "" };
_cvint  _hrf0 = { &hrf0,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Half of IR pulse width", 0, "" };
_cvint  _pos_ref = { &pos_ref, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pos_start_rf0 = { &pos_start_rf0,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Start time for inversion sequence. ", 0, "" };


_cvint  _titime = { &titime,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Time delay from IR to the 90 RF pulse.", 0, "" };
_cvint  _seq_shift = { &seq_shift,  -1, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Seq shift for proper TI.", 0, "" };
_cvint  _time_to_rf1 = { &time_to_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _inner_spacing = { &inner_spacing, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _post_spacing = { &post_spacing, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _silver_hoult = { &silver_hoult,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "Type of IR: 1=S-H, 0=SLR", 0, "" };
_cvfloat  _tmpslthick = { &tmpslthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _csf_fact = { &csf_fact, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _invthick = { &invthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _invThickOpt = { &invThickOpt,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "invThickOptimization mode 1==ON ", 0, "" };
_cvint  _invThickOpt_seqtime = { &invThickOpt_seqtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _enht2flairflag = { &enht2flairflag,  0, 1, 0,  0, 0, 0, 1, 1, VISIBLE,  "enh t2flair mode flag 0 = off; 1= ON", 0, "" };
_cvint  _invseqlen = { &invseqlen, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _invseqlen2 = { &invseqlen2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _flair_on = { &flair_on, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ir_index = { &ir_index,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for creating IR in fseps sequence", 0, "" };


_cvint  _ir3t_flag = { &ir3t_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



















_cvint  _ir_rfupa = { &ir_rfupa,  -1000, 1000, 0, 0, 0, 0, 1, 1, INVIS, "Corresponds to rfupa", 0, "" };
_cvint  _ir_sys_type = { &ir_sys_type, 0, 2, 0,  0, 0, 0, 1, 1, INVIS, "System Type 0:Standard Signa 1:VMX", 0, "" };


_cvint  _t2flair_extra_ir_flag = { &t2flair_extra_ir_flag,  0, 1, 0,  0, 0, 0, 1, 1,  INVIS,  "T2FLAIR Extra IR flag", 0, "" };


_cvint  _ss_rf1 = { &ss_rf1,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "on(=1) for spectral spatial excitation.", 0, "" };
_cvint  _fat_flag = { &fat_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "0=water selection, 1=fat selection.", 0, "" };
_cvfloat  _fat_delta = { &fat_delta,  -500.0, MAXFLOAT, -230.0,  0, 0, 0, 1, 1, VIS, 
                               "Frequency offset for fat selection.", 0, "" };
_cvint  _fat_offset = { &fat_offset,  -MAXINT, MAXINT, -386,  0, 0, 0, 1, 1, INVIS,  "Freq offset in TARDIS units.", 0, "" };
_cvint  _sszchop = { &sszchop,  0, 1, 0,  0, 0, 0, 1, 1, VIS, 
                      "Chop the z gradient for better fat suppression.", 0, "" };
_cvint  _pw_gzrf1lobe = { &pw_gzrf1lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_constant = { &pw_constant, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _num_rf1lobe = { &num_rf1lobe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _gradient_mode = { &gradient_mode,  0, 3, 1,  0, 0, 0, 1, 1, VIS, "gradient modes", 0, "" };
_cvint  _ss_rf_wait = { &ss_rf_wait,  -MAXINT, MAXINT, 0,  0, 0, 0, 1, 1, VIS, 
                         "Additional delay between rf and gradient subsystems", 0, "" };
_cvint  _pw_ss_rampz = { &pw_ss_rampz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ss_override = { &ss_override,  0,  99110022,  0,  0, 0, 0, 1, 1,  VIS, "0=off, otherwise use field strength/rise time/full strength code (e.g. 1528822 is 1.5T, 288 ramp, 22 full strength).", 0, "" };
_cvint  _whichss = { &whichss, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _nbw_ssrf = { &nbw_ssrf, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ss_min_slthk = { &ss_min_slthk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ss_maxoff = { &ss_maxoff, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ss_minslthk1 = { &ss_minslthk1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ss_convolution_flag = { &ss_convolution_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "0:Traditional Model; 1:Convolution Model", 0, "" };

_cvint  _breast_spsp_flag = { &breast_spsp_flag,  0,  2,  0,  0, 0, 0, 1, 1,  VIS,  "Spsp pulse for breast scan: 0-product, 1-30248501(XRMB) or 3027633(XRMW), 2-30248502", 0, "" };
_cvint  _ss_fa_scaling_flag = { &ss_fa_scaling_flag,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Scale spsp pulse flip angle: 0-no, 1 yes", 0, "" };
_cvfloat  _max_ss_fa = { &max_ss_fa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ss_maxoffex = { &ss_maxoffex, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off90minor = { &off90minor, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _omega_amp = { &omega_amp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gz1_zero_moment = { &gz1_zero_moment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gz1_first_moment = { &gz1_first_moment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _freqSign = { &freqSign, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };







_cvint  _rtd_on = { &rtd_on,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "0:rtd off; 1: rtd on", 0, "" };



_cvint  _maxwell_flag = { &maxwell_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _maxwell_blip = { &maxwell_blip, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _B0_field = { &B0_field, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pw_gxw_MAX_l = { &pw_gxw_MAX_l, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pw_gxw_MAX_r = { &pw_gxw_MAX_r, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pw_gyb_MAX_l = { &pw_gyb_MAX_l, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pw_gyb_MAX_r = { &pw_gyb_MAX_r, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_debug = { &max_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _nodelay = { &nodelay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _nodelayesp = { &nodelayesp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _b0dither_new = { &b0dither_new,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "b0dither calculation. 0= exponential fitting; 1= interpolation.", 0, "" };

_cvint  _nob0dither = { &nob0dither, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _nob0dither_interpo = { &nob0dither_interpo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




















_cvint  _nobcfile = { &nobcfile, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _number_of_bc_files = { &number_of_bc_files, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _activeReceivers = { &activeReceivers, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _flagWarning = { &flagWarning, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _refScanTe = { &refScanTe, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minTeFrac_ref = { &minTeFrac_ref, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minTeFull_ref = { &minTeFull_ref, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tempTe_ref = { &tempTe_ref, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _se_ref = { &se_ref, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _reMap = { &reMap, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvfloat  _asset_factor = { &asset_factor,  0,  1.0,  0,  0, 0, 0, 1, 1,  VIS,  "ASSET phase encoding reduction factor.", 0, "" };
_cvfloat  _assetsl_factor = { &assetsl_factor,  0,  1.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "ASSET slice  encoding reduction factor.", 0, "" };
_cvint  _assetph_flag = { &assetph_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "ASSET phase acceleration flag .", 0, "" };
_cvint  _assetsl_flag = { &assetsl_flag,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "ASSET slice acceleration flag .", 0, "" };
_cvint  _asset_supported_direction = { &asset_supported_direction,  
    ASSET_SUPPORT_PHASE, 
    ASSET_SUPPORT_SLICE, 
    ASSET_SUPPORT_PHASE,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET direction supported (phase OR slice)", 
0, "" };





_cvint  _rtb0_flag = { &rtb0_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "flag to turn on/off B0drift monitoring", 0, "" };
_cvint  _rtb0_first_skip = { &rtb0_first_skip,  0, 50, 20,  0, 0, 0, 1, 1, INVIS, "number of points skipped in the begining", 0, "" };
_cvint  _rtb0_last_skip = { &rtb0_last_skip,  0, 50, 20,  0, 0, 0, 1, 1, INVIS, "number of points skipped in the end", 0, "" };
_cvint  _rtb0_movAvg = { &rtb0_movAvg,  1, 30, 5,  0, 0, 0, 1, 1, INVIS, "number of points used for moving average", 0, "" };
_cvint  _rtb0_min_points = { &rtb0_min_points,  5, MAXINT, 10,  0, 0, 0, 1, 1, INVIS, "min number of points used for RTP processing", 0, "" };
_cvint  _rtb0DebugFlag = { &rtb0DebugFlag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtb0SaveRaw = { &rtb0SaveRaw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rtb0_comp_flag = { &rtb0_comp_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Flag to realtime b0 drift compensation", 0, "" };
_cvint  _rtb0_acq_delay = { &rtb0_acq_delay,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS,  "Delay time of realtime b0 drift acquisition", 0, "" };
_cvint  _rtb0_midsliceindex = { &rtb0_midsliceindex,  -1, MAXINT, -1,  0, 0, 0, 1, 1,  VIS,  "Index of middle slice (-1: all slices)", 0, "" };
_cvfloat  _rtb0_outlier_threshold = { &rtb0_outlier_threshold,  0.0, MAXFLOAT, 10.0,  0, 0, 0, 1, 1, VIS,  "CF offset outlier threshold in one TR (Hz)", 0, "" };
_cvfloat  _rtb0_outlier_duration = { &rtb0_outlier_duration,  0.0, MAXFLOAT, 30.0,  0, 0, 0, 1, 1, VIS,  "CF offste outlier duration (s)", 0, "" };
_cvint  _rtb0_outlier_nTRs = { &rtb0_outlier_nTRs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtb0_minintervalb4acq = { &rtb0_minintervalb4acq, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _epiespopt_flag = { &epiespopt_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for type-in PSD epiespopt", 0, "" };
_cvint  _epiRTespopt_flag = { &epiRTespopt_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for type-in PSD epiRTespopt", 0, "" };
_cvint  _epiminesp_flag = { &epiminesp_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for type-in PSD epiminesp", 0, "" };
_cvint  _epiRTminesp_flag = { &epiRTminesp_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for type-in PSD epiRTminesp", 0, "" };


_cvint  _epira3_flag = { &epira3_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for type-in PSD epira3", 0, "" };
_cvint  _epiRTra3_flag = { &epiRTra3_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for type-in PSD epiRTra3", 0, "" };


_cvint  _ra3_minesp_flag = { &ra3_minesp_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for legacy or minimized ESP", 0, "" };
_cvint  _ra3_sndpc_flag = { &ra3_sndpc_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "Flag for legacy or new phase correction", 0, "" };

_cvint  _dbdt_model = { &dbdt_model,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "dBdt model: 0-rectangular, 1-convolution", 0, "" };
_cvfloat  _dbdtper_new = { &dbdtper_new, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _esprange_check = { &esprange_check,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Flag to avoid unwanted ESP range: 0-off, 1-on", 0, "" };
_cvint  _espopt = { &espopt,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "Turn on ESP minimization when dbdt_model = 1", 0, "" };
_cvint  _espincway = { &espincway,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Way to increase ESP: 0-regenerate waveform, 1-zero padding", 0, "" };
_cvint  _no_gy1_ol_gxw = { &no_gy1_ol_gxw,  0, 1, 1,  0, 0, 0, 1, 1, INVIS,  "0-gy1 overlapping with gxw, 1-not", 0, "" };

_cvint  _epigradopt_debug = { &epigradopt_debug, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _epigradopt_output = { &epigradopt_output, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _saved_tmin_total = { &saved_tmin_total, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_corr_mode = { &tr_corr_mode,  0,  2,  0,  0, 0, 0, 1, 1,  VIS,  "TR error correction mode: 0-off, 1-distribute among slices, 2-burst at the last slice",  0, "" };


_cvint  _num_passdelay = { &num_passdelay,  1, MAXINT, 1,  0, 0, 0, 1, 1, VIS, "number of pass delay sequence", 0, "" };


_cvint  _temp_rhpcspacial = { &temp_rhpcspacial,  0,  DATA_ACQ_MAX,  0,  0, 0, 0, 1, 1,  VIS,  "temporal variable to set rhpcspacial", 0, "" };


_cvfloat  _taratio = { &taratio,  0.0, 0.90005, 0.0,  0, 0, 0, 1, 1, VIS,  "Minimal top area ratio in readout gradient", 0, "" };
_cvint  _rampopt = { &rampopt,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1: enable ramp sampling optimization", 0, "" };
_cvint  _taratio_override = { &taratio_override,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, "1: override taratio", 0, "" };


_cvfloat  _totarea = { &totarea, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _actratio = { &actratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _fmri_coil_limit = { &fmri_coil_limit, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _iref_etl = { &iref_etl,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS,  "Internal reference echoes for dynamic phase correction", 0, "" };
_cvint  _iref_frames = { &iref_frames, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _MinFram2FramTime = { &MinFram2FramTime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _phase_dither = { &phase_dither,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS,  "B0 phase dither value (degrees)", 0, "" };
_cvint  _spgr_flag = { &spgr_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "SPGR flag", 0, "" };

_cvint  _newyres = { &newyres, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _avmintefull = { &avmintefull,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS,  "Minimum te with full ky coverage", 0, "" };
_cvint  _cvrefindex1 = { &cvrefindex1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avmintetemp = { &avmintetemp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cfh_crusher = { &cfh_crusher,  0, MAXINT, 1,  0, 0, 0, 1, 1, INVIS,  "if 1 autogenerate cfh crushers", 0, "" };

_cvint  _fast_rec = { &fast_rec,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "receiver selected: 0=standard recvr, 1=fast recvr", 0, "" };





_cvint  _bl_acq_tr1 = { &bl_acq_tr1,  1000, 6000000,  10000,  0, 0, 0, 1, 1,  MODIFIABLE,  "Fast Baseline acquisition sequence length", 0, "" };
_cvint  _bl_acq_tr2 = { &bl_acq_tr2,  1000, 6000000,  100000,  0, 0, 0, 1, 1,  MODIFIABLE,  "Baseline acquisition sequence length", 0, "" };

_cvfloat  _fecho_factor = { &fecho_factor, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _tsp = { &tsp,   1.0,  1000.0,  8,  0, 0, 0, 1, 1,  VIS,  "Sampling period (1us).", 0, "" };
_cvint  _intleaves = { &intleaves,   1, 512,  1,  0, 0, 0, 1, 1, VIS, "Interleaves to get yres.", 0, "" };

_cvint  _ky_dir = { &ky_dir,  0, 2, 2,  0, 0, 0, 1, 1, VIS, "Ky samp dir:0=top/down,1=cent/out,2=bottom/up", 0, "" };

_cvint  _dc_chop = { &dc_chop,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Receiver phase chop flag: 1=on,0=off", 0, "" };




_cvint  _kx_dir = { &kx_dir,  0, 3, 0,  0, 0, 0, 1, 1, VIS, "Kx samp dir:0=same,1=alt w/intleave,2=halfset,3=quarterset.", 0, "" };

_cvint  _etot = { &etot,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "Total echoes required to feed MPS.", 0, "" };
_cvint  _emid = { &emid,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "1st echo right of TE midpoint.", 0, "" };
_cvint  _e1st = { &e1st,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "1st echo to turn on.", 0, "" };


_cvint  _seq_data = { &seq_data,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "0=std sorting,1=time seq order.", 0, "" };

_cvfloat  _msamp = { &msamp,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS, "Default echo shift, samp per, +=R,-=L.", 0, "" };
_cvfloat  _dsamp = { &dsamp,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS, "Delta echo shift,   samp per, +=R,-=L.", 0, "" };
_cvfloat  _delpw = { &delpw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _reps = { &reps,  1, 999, 1,  0, 0, 0, 1, 1, VIS, "# scan repetitions.", 0, "" };
_cvint  _pass_reps = { &pass_reps,  1, 999, 1,  0, 0, 0, 1, 1, VIS, "# pass repetitions.", 0, "" };
_cvint  _max_dsht = { &max_dsht,  1, 256, 8,  0, 0, 0, 1, 1, VIS, "# diff grad amps in increment cycle.", 0, "" };

_cvint  _rf_chop = { &rf_chop,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1=chop RF for intleaves>1,0=don't.", 0, "" };


_cvint  _rftype = { &rftype,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1=extern rfpulse, 0=sinc rfpulse", 0, "" };
_cvint  _thetatype = { &thetatype,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1=play extern theta pulse, 0=no theta", 0, "" };
_cvint  _gztype = { &gztype,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1=extern grad, 0=create by macro", 0, "" };

_cvint  _hsdab = { &hsdab,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "0=std dab packets,1=EPI dab packets.", 0, "" };


_cvint  _slice_num = { &slice_num,  1, DATA_ACQ_MAX, 1,  0, 0, 0, 1, 1, VIS, "slice number within rep.", 0, "" };
_cvint  _rep_num = { &rep_num,  1, 999, 1,  0, 0, 0, 1, 1, VIS, "rep number within total reps.", 0, "" };

_cvint  _endview_iamp = { &endview_iamp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endview_scale = { &endview_scale, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _gx1pos = { &gx1pos,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "gx1 placement: 0=pre-180, 1=post-180.", 0, "" };
_cvint  _gy1pos = { &gy1pos,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "gy1 placement: 0=pre-180, 1=post-180.", 0, "" };

_cvint  _eosxkiller = { &eosxkiller,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "eos x killer pulses: 0=off, 1=on.", 0, "" };
_cvint  _eosykiller = { &eosykiller,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "eos y killer pulses: 0=off, 1=on.", 0, "" };
_cvint  _eoszkiller = { &eoszkiller,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "eos z killer pulses: 0=off, 1=on.", 0, "" };
_cvint  _eoskillers = { &eoskillers,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "eos killer pulses: 0=off, 1=on.", 0, "" };
_cvint  _eosrhokiller = { &eosrhokiller,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "eos rho killer pulses: 0=off, 1=on.", 0, "" };

_cvint  _gyctrl = { &gyctrl,  -1, 1, 1,  0, 0, 0, 1, 1, VIS,  "GY Blip control: 1=on, 0=off", 0, "" };
_cvint  _gxctrl = { &gxctrl,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "GX Read control: 1=on, 0=off.", 0, "" };
_cvint  _gzctrl = { &gzctrl,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "GZ control: 1=on, 0=off.", 0, "" };

_cvint  _ygmn_type = { &ygmn_type, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _zgmn_type = { &zgmn_type, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _vrgfsamp = { &vrgfsamp,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "0=std sampling,1=VRGF sampling.", 0, "" };
_cvint  _autovrgf = { &autovrgf,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "1=vrgf program called automatically in predownload, 0=manual mode.", 0, "" };
_cvfloat  _vrgf_targ = { &vrgf_targ,  0.2, 16.0, 2.0,  0, 0, 0, 1, 1, VIS, "vrgf oversampling ratio target value.", 0, "" };

_cvfloat  _fbhw = { &fbhw,  0.0, 1.0, 1.0,  0, 0, 0, 1, 1, VIS, "Fraction of blip half width excluded from sampling.", 0, "" };
_cvint  _vrgf_reorder = { &vrgf_reorder,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "1=vrgf->PC (new), 0=PC->vrgf (old)", 0, "" };


_cvint  _osamp = { &osamp,  0, 1024, 0,  0, 0, 0, 1, 1, VIS, "Fractional echo oversamples.", 0, "" };

_cvint  _esp = { &esp,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "echo spacing", 0, "" };
_cvint  _etl = { &etl,  1, MAXINT, 1,  0, 0, 0, 1, 1, VIS, "echo train length", 0, "" };
_cvint  _eesp = { &eesp,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "effective echo spacing", 0, "" };
_cvint  _nblips = { &nblips, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_blips2cent = { &blips2cent, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ep_alt = { &ep_alt,  0, 2, 0,  0, 0, 0, 1, 1, VIS, "Alt read sign:0=no,1=odd/evn,2=halves,3=pairs", 0, "" };

_cvint  _tia_gx1 = { &tia_gx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tia_gxw = { &tia_gxw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tia_gxk = { &tia_gxk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ta_gxwn = { &ta_gxwn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _rbw = { &rbw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _avminxa = { &avminxa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminxb = { &avminxb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminx = { &avminx, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminya = { &avminya, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminyb = { &avminyb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminy = { &avminy, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avminza = { &avminza, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminzb = { &avminzb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminz = { &avminz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminssp = { &avminssp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _avminfovx = { &avminfovx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_avminfovy = { &avminfovy, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _hrdwr_period = { &hrdwr_period,  4  , 128  , 32  ,  0, 0, 0, 1, 1, VIS,  "Hardware specific base period.", 0, "" };
_cvint  _samp_period = { &samp_period,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS,  "sample period generated by epigradopt.", 0, "" };
_cvint  _pwmin_gap = { &pwmin_gap, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _frqx = { &frqx,  0.0, 1000.0, 200.0,  0, 0, 0, 1, 1, VIS, "Kx sampling freq peak (KHz).", 0, "" };
_cvfloat  _frqy = { &frqy,  0.0, 1000.0, 2.0,  0, 0, 0, 1, 1, VIS, "Ky sampling freq peak (KHz).", 0, "" };

_cvint  _dacq_offset = { &dacq_offset,  0, MAXINT, 0  ,  0, 0, 0, 1, 1, VIS, "dacq packet offset relative to gxw (us)", 0, "" };
_cvint  _pepolar = { &pepolar,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1= flip phase encoding polarity, 0=don't.", 0, "" };

_cvint  _tdaqhxa = { &tdaqhxa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tdaqhxb = { &tdaqhxb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _delt = { &delt, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _tfon = { &tfon,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Time shift interleaves:0=off,1=on.", 0, "" };


_cvint  _fract_ky = { &fract_ky,  PSD_FULL_KY, PSD_FRACT_KY, PSD_FULL_KY,  0, 0, 0, 1, 1, VIS, "Fractional ky space acquisition flag:0=off,1=on", 0, "" };
_cvfloat  _ky_offset = { &ky_offset,  -256, 256, 0,  0, 0, 0, 1, 1, VIS, "# Ky lines to offset echo peak, -=early, +=later", 0, "" };
_cvfloat  _gy1_offset = { &gy1_offset,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS, "gy1 dephaser area difference for ky shift", 0, "" };
_cvint  _rhhnover_max = { &rhhnover_max, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rhhnover_min = { &rhhnover_min, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _num_overscan = { &num_overscan, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _fract_ky_topdown = { &fract_ky_topdown,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Fractional ky space acquisition flag for top-down view order:0=off,1=on", 0, "" };

_cvint  _smart_numoverscan = { &smart_numoverscan,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "flag for smart number of over-scan lines", 0, "" };


_cvint  _ky_offset_save = { &ky_offset_save, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rhhnover_save = { &rhhnover_save, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rhnframes_tmp = { &rhnframes_tmp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _satdelay = { &satdelay,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "Delay between last SAT and 90", 0, "" };

_cvint  _td0 = { &td0,  0, MAXINT, 1,  0, 0, 0, 1, 1, INVIS,  "Init deadtime", 0, "" };
_cvint  _t_exa = { &t_exa,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "time from start of 90 to mid 90", 0, "" };
_cvint  _te_time = { &te_time,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, " te * opnecho ", 0, "" };
_cvint  _pos_start = { &pos_start,  0, MAXINT,  0, 0, 0, 0, 1, 1, INVIS,  "Start time for sequence. ", 0, "" };
_cvint  _post_echo_time = { &post_echo_time,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "time from te to end of seq", 0, "" };
_cvint  _psd_tseq = { &psd_tseq,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  " intersequence delay time for cardiac", 0, "" };
_cvint  _time_ssi = { &time_ssi,  0, MAXINT, 8000  ,  0, 0, 0, 1, 1, INVIS, "time from eos to ssi in intern trig", 0, "" };

_cvfloat  _dacq_adjust = { &dacq_adjust,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS,  "dacq starting time fine tuning adjustment", 0, "" };

_cvint  _watchdogcount = { &watchdogcount, 1, 15, 15,  0, 0, 0, 1, 1, INVIS, "Pulsegen execution time (x5sec) before timeout", 0, "" };

_cvint  _dabdelay = { &dabdelay,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Extra time for dab packet (negative is more)", 0, "" };

_cvint  _long_hrdwr_period = { &long_hrdwr_period,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1: hrdwr_period=96us for sr20; 0: hrdwr_period=64us for sr20. ", 0, "" };

_cvint  _tlead = { &tlead,  0, MAXINT, 25  ,  0, 0, 0, 1, 1, INVIS,  "Init deadtime", 0, "" };
_cvint  _tleadssp = { &tleadssp,  0, MAXINT, 25  ,  0, 0, 0, 1, 1, INVIS,  "SSP Init deadtime", 0, "" };
_cvint  _act_tr = { &act_tr,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "actual tr", 0, "" };


_cvint  _rfconf = { &rfconf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ctlend = { &ctlend,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "card deadtime when next slice in intern gated", 0, "" };
_cvint  _ctlend_last = { &ctlend_last,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "deadtime for last slice in a cardiac scan", 0, "" };
_cvint  _ctlend_fill = { &ctlend_fill,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "deadtime for last slice in a filled R-R", 0, "" };
_cvint  _ctlend_unfill = { &ctlend_unfill,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "deadtime for last slice in a unfilled R-R", 0, "" };
_cvint  _dda = { &dda,  0, MAXINT, 4,  0, 0, 0, 1, 1, INVIS, " number of disdaqs in scan (not pairs)", 0, "" };
_cvint  _debug = { &debug,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 if debug is on ", 0, "" };
_cvint  _debugipg = { &debugipg,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 if debugipg is on ", 0, "" };
_cvint  _debugepc = { &debugepc,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Phase debug flag (1 = ON)", 0, "" };
_cvint  _debugRecvFrqPhs = { &debugRecvFrqPhs,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 to turn on exciter phase debug", 0, "" };
_cvint  _debugdither = { &debugdither,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 to turn on b0dither debug", 0, "" };
_cvint  _debugdelay = { &debugdelay,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 to turn on delay debug", 0, "" };
_cvint  _debugileave = { &debugileave,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 to turn on ileaveinit debug", 0, "" };
_cvint  _dex = { &dex,  -MAXINT, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "num of discarded excitations", 0, "" };
_cvint  _gating = { &gating,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "gating - TRIG_INTERN, TRIG_LINE, etc.", 0, "" };
_cvint  _ipg_trigtest = { &ipg_trigtest,  0, 1, 1,  0, 0, 0, 1, 1, INVIS,  "if 0 use internal trig always", 0, "" };
_cvint  _gxktime = { &gxktime,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "x Killer Time.", 0, "" };
_cvint  _gyktime = { &gyktime,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "y Killer Time.", 0, "" };
_cvint  _gzktime = { &gzktime,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "z Killer Time.", 0, "" };
_cvint  _gktime = { &gktime,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "Max Killer Time.", 0, "" };
_cvint  _gkdelay = { &gkdelay,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS, "Time to delay killers from end of readout train.", 0, "" };

_cvint  _scanslot = { &scanslot,  0, 7, 4,  0, 0, 0, 1, 1, VIS,  "Scan filter slot number", 0, "" };


_cvfloat  _gx1_area = { &gx1_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gz1 = { &area_gz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_area_gzrf2l1 = { &area_gzrf2l1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_std = { &area_std, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _avail_pwgz1 = { &avail_pwgz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _prescan1_tr = { &prescan1_tr,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS, "1st pass prescan time", 0, "" };
_cvint  _ps2_dda = { &ps2_dda,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS, "Number of disdaq in 2nd pass prescan.", 0, "" };
_cvint  _avail_pwgx1 = { &avail_pwgx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_image_time = { &avail_image_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_zflow_time = { &avail_zflow_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _test_getecg = { &test_getecg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _premid_rf90 = { &premid_rf90,  -MAXINT, MAXINT, 0,  0, 0, 0, 1, 1,  INVIS, "Time from beg. of seq. to mid 90",  0, "" };

_cvint  _sar_amp = { &sar_amp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sar_cycle = { &sar_cycle, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sar_width = { &sar_width, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _max_seqtime = { &max_seqtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_slicesar = { &max_slicesar, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _myrloc = { &myrloc,  0, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Value for scan_info[0].oprloc", 0, "" };
_cvint  _other_slice_limit = { &other_slice_limit, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _target_area = { &target_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _start_amp = { &start_amp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _end_amp = { &end_amp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pre_pass = { &pre_pass,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "prescan slice pass number", 0, "" };
_cvint  _nreps = { &nreps,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "number of sequences played out", 0, "" };
_cvint  _max_num_pass = { &max_num_pass,  0, 999, 512,  0, 0, 0, 1, 1, VIS,  "maximum number of passes", 0, "" };


_cvfloat  _xmtaddScan = { &xmtaddScan, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _rfscale = { &rfscale,  -MAXFLOAT, MAXFLOAT, 1.0,  0, 0, 0, 1, 1, INVIS, "Rf pulse width scaling factor", 0, "" };


_cvint  _rfExIso = { &rfExIso, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _innerVol = { &innerVol,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Inner volume flag", 0, "" };
_cvfloat  _ivslthick = { &ivslthick,  1,  FOV_MAX_EPI,  480,  0, 0, 0, 1, 1,  VIS,  "Inner Volume Slice thickness in mm.", 0, "" };


_cvint  _psd_mantrig = { &psd_mantrig,  0, 1, 0,  0, 0, 0, 1, 1,  INVIS,  "manual trigger override", 0, "" };
_cvint  _trig_mps2 = { &trig_mps2,  0, MAXINT, TRIG_INTERN,  0, 0, 0, 1, 1,  VIS,  " mps2 trigger", 0, "" };
_cvint  _trig_aps2 = { &trig_aps2,  0, MAXINT, TRIG_INTERN,  0, 0, 0, 1, 1,  VIS,  " aps2 trigger", 0, "" };
_cvint  _trig_scan = { &trig_scan,  0, MAXINT, TRIG_INTERN,  0, 0, 0, 1, 1,  VIS,  " scan trigger", 0, "" };
_cvint  _trig_prescan = { &trig_prescan,  0, MAXINT, TRIG_INTERN,  0, 0, 0, 1, 1,  INVIS, "prescan trigger", 0, "" };
_cvint  _read_truncate = { &read_truncate,  0, MAXINT, 1,  0, 0, 0, 1, 1, INVIS,  "Truncate extra readout on fract echo", 0, "" };

_cvint  _trigger_time = { &trigger_time,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "Time for cardiac trigger window", 0, "" };
_cvint  _use_myscan = { &use_myscan,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "On(=1) to use my scan setup", 0, "" };


_cvint  _t_postreadout = { &t_postreadout, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _initnewgeo = { &initnewgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _obl_debug = { &obl_debug,   0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "On(=1) to print messages for obloptimize_epi", 0, "" };
_cvint  _obl_method = { &obl_method,  0, 1, 1,  0, 0, 0, 1, 1, INVIS, "1=optimal, 0=to force targets to worst case", 0, "" };
_cvint  _debug_order = { &debug_order,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "On(=1) to print data acq order table", 0, "" };
_cvint  _debug_tdel = { &debug_tdel,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "On(=1) to print ihtdeltab table", 0, "" };
_cvint  _debug_scan = { &debug_scan,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "On(=1) to print scan & rsp info tables", 0, "" };
_cvint  _postsat = { &postsat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _order_routine = { &order_routine,  -MAXINT, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  " slice ordering routine", 0, "" };
_cvint  _scan_offset = { &scan_offset, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _dither_control = { &dither_control, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dither_value = { &dither_value,  0, 15, 6,  0, 0, 0, 1, 1, VIS,  "Value for dither", 0, "" };

_cvint  _slquant_per_trig = { &slquant_per_trig,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "slices in first pass or slices in first R-R for XRR scans", 0, "" };
_cvint  _xtr_offset = { &xtr_offset,  -MAXINT, MAXINT, -30,  0, 0, 0, 1, 1, VIS,  "Value for xtr_offset", 0, "" };

_cvint  _non_tetime = { &non_tetime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _slice_size = { &slice_size, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _max_bamslice = { &max_bamslice, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _bw_rf1 = { &bw_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_bw_rf2 = { &bw_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx1 = { &a_gx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1 = { &ia_gx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1a = { &pw_gx1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1d = { &pw_gx1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1 = { &pw_gx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _single_ramp_gx1d = { &single_ramp_gx1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _area_gy1 = { &area_gy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _area_gyb = { &area_gyb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_omega = { &a_omega, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_omega = { &ia_omega, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pw_dummy = { &pw_dummy, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _bline_time = { &bline_time, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _scan_time = { &scan_time, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gx1_tot = { &pw_gx1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1_tot = { &pw_gy1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn1_tot = { &pw_gymn1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_pw_gymn2_tot = { &pw_gymn2_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gyb_tot_0thmoment = { &gyb_tot_0thmoment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gyb_tot_1stmoment = { &gyb_tot_1stmoment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gz1_tot = { &pw_gz1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2l1_tot = { &pw_gzrf2l1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2r1_tot = { &pw_gzrf2r1_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _ia_hyperdab = { &ia_hyperdab, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_hyperdabbl = { &ia_hyperdabbl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _dab_offset = { &dab_offset, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rcvr_ub_off = { &rcvr_ub_off, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _temprhfrsize = { &temprhfrsize, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _zeromoment = { &zeromoment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _firstmoment = { &firstmoment, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _zeromomentsum = { &zeromomentsum, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _firstmomentsum = { &firstmomentsum, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pulsepos = { &pulsepos, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _invertphase = { &invertphase, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _xtarg = { &xtarg,  0.0, 10.0, 1.0,  0, 0, 0, 1, 1, VIS,  "EPI read train logical x target", 0, "" };
_cvfloat  _ytarg = { &ytarg,  0.0, 10.0, 1.0,  0, 0, 0, 1, 1, VIS,  "EPI read train logical y target", 0, "" };



_cvint  _slice_reset = { &slice_reset,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Perform multi-slice at single location, 0=off,1=on", 0, "" };
_cvfloat  _slice_loc = { &slice_loc,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS, "Slice offset (mm), when slice_reset=1.", 0, "" };

_cvint  _ditheron = { &ditheron,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1=use b0 values from /usr/g/caldir/b0_dither.cal, 0=don't", 0, "" };
_cvfloat  _dx = { &dx,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS, "phys X dither in deg (dx shift to + readout, -dx shift to -", 0, "" };
_cvfloat  _dy = { &dy,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS, "phys Y dither in deg (dy shift to + readout, -dy shift to -", 0, "" };
_cvfloat  _dz = { &dz,  -MAXFLOAT, MAXFLOAT, 0.0,  0, 0, 0, 1, 1, VIS, "phys Z dither in deg (dz shift to + readout, -dz shift to -", 0, "" };

_cvint  _b0calmode = { &b0calmode,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1=enable 3-axis b0 test mode, 0=disabled", 0, "" };
_cvint  _delayon = { &delayon,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1=use delay values from /usr/g/caldir/delay.dat, 0=don't", 0, "" };

_cvint  _pkt_delay = { &pkt_delay,  0, 1000, 0,  0, 0, 0, 1, 1, VIS, "Hrdwr Delay between RBA & 1st Sample Acquired (us).", 0, "" };
_cvint  _gxdelay = { &gxdelay,  -1000, 1000, -40  ,  0, 0, 0, 1, 1, VIS, "X grad delay (us).", 0, "" };
_cvint  _gydelay = { &gydelay,  -1000, 1000, -40  ,  0, 0, 0, 1, 1, VIS, "Y grad delay (us).", 0, "" };
_cvfloat  _gldelayx = { &gldelayx,  -10000 , 10000 ,  0.0,  0, 0, 0, 1, 1, VIS,  "Acq. Window delay wrt X Grad (us).", 0, "" };
_cvfloat  _gldelayy = { &gldelayy,  -10000 , 10000 ,  0.0,  0, 0, 0, 1, 1, VIS,  "Acq. Window delay wrt Y Grad (us).", 0, "" };
_cvfloat  _gldelayz = { &gldelayz,  -10000 , 10000 ,  0.0,  0, 0, 0, 1, 1, VIS,  "Acq. Window delay wrt Z Grad (us).", 0, "" };
_cvfloat  _pckeeppct = { &pckeeppct,  0.0,  100.0,  100.0,  0, 0, 0, 1, 1,  VIS, "Percentange of post-RFT array to use in phase correction", 0, "" };


_cvint  _mph_flag = { &mph_flag,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "on(=1) flag for FAST Multi-Phase option", 0, "" };
_cvint  _acqmode = { &acqmode,  0, MAXINT, 0, 0, 0, 0, 1, 1, INVIS,  "acq. mode, 0=interleave, 1=sequential", 0, "" };
_cvint  _max_phases = { &max_phases,  0, 512, 0, 0, 0, 0, 1, 1, INVIS, "Maximum number of phases", 0, "" };
_cvint  _opslquant_old = { &opslquant_old,  1, SLTAB_MAX, 1,  0, 0, 0, 1, 1, VISONLY,  "Slice quantity", 0, "" };
_cvint  _piphases = { &piphases,  0, 512, 0, 0, 0, 0, 1, 1, INVIS, "Number of phases", 0, "" };


_cvint  _reqesp = { &reqesp,  0, MAXINT, 0,  0, 0, 0, 1, 1, VIS, "Requested echo spacing: 0=auto, nonzero=explicit", 0, "" };
_cvint  _autogap = { &autogap,  0, 2, 0,  0, 0, 0, 1, 1, VIS, "1:auto set read gap = blip duration, 0:don't, 2:compute dB/dt sep.", 0, "" };
_cvint  _minesp = { &minesp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _fft_xsize = { &fft_xsize,  0, 1024, 0,  0, 0, 0, 1, 1, VIS,  "Row FT size", 0, "" };
_cvint  _fft_ysize = { &fft_ysize,  0, 1024, 0,  0, 0, 0, 1, 1, VIS,  "Column FT size", 0, "" };
_cvint  _image_size = { &image_size,  0, 1024, 0,  0, 0, 0, 1, 1, VIS,  "Image size", 0, "" };


_cvfloat  _xtr_rba_control = { &xtr_rba_control,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "XTR-RBA Timing: 1=measured, 0=calculated.", 0, "" };
_cvfloat  _xtr_rba_time = { &xtr_rba_time,  -MAXFLOAT, MAXFLOAT, XTRSETLNG + XTR_TAIL,  0, 0, 0, 1, 1, VIS,  "phase accumulation interval for off-center FOV (usec)", 0, "" };
_cvfloat  _frtime = { &frtime,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "read window phase accumulation interval for off-center FOV (usec)", 0, "" };
_cvint  _readpolar = { &readpolar,  -1, 1, 1,  0, 0, 0, 1, 1, VIS, "readout gradient base polarity: 1=positive, -1=negative.", 0, "" };
_cvint  _blippolar = { &blippolar,  -1, 1, 1,  0, 0, 0, 1, 1, VIS, "blipo gradient base polarity: 1=positive, -1=negative.", 0, "" };


_cvint  _ref_mode = { &ref_mode,  0, 2, 0,  0, 0, 0, 1, 1, VIS,  "Ref Mode: 0=loop over all slices, 1=loop to ioscenter slc, 2=isocenter slc only", 0, "" };
_cvint  _refnframes = { &refnframes,  1, YRES_MAX, 256,  0, 0, 0, 1, 1, INVIS, "# of recon frames for ref scan.", 0, "" };




_cvint  _ref_with_xoffset = { &ref_with_xoffset,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "Ref Correction: 0=off, 1 = include freq offset x.", 0, "" };
_cvint  _RefDatCorrection = { &RefDatCorrection,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Ref Pre Correction: 0=off, 1 = calc phase split", 0, "" };
_cvfloat  _phaseScale = { &phaseScale,  -4.0, 4.0, 2.0,  0, 0, 0, 1, 1, VIS,  "Phase Split Scale", 0, "" };
_cvint  _setDataAcqDelays = { &setDataAcqDelays,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "Turn ON SSP delays (0 = no setperiod() in core )", 0, "" };
_cvint  _xtr_calibration = { &xtr_calibration,  0, 2, 0,  0, 0, 0, 1, 1, VIS,  "Calibrate XTR-RBA phase accumulation", 0, "" };
_cvint  _refSliceNum = { &refSliceNum,  -1, 256, -1,  0, 0, 0, 1, 1, VIS,  "Spatial Ref Scan Slc (0=all,-1=isocenter slc)", 0, "" };


_cvint  _ghost_check = { &ghost_check,  0, 2, 0,  0, 0, 0, 1, 1, VIS, "0:off 1:phase cor. off mode(check for epi calibration) 2:phase cor. on mode", 0, "" };
_cvint  _gck_offset_fov = { &gck_offset_fov,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1/4 FOV offset in ghost_check 0:off 1:on", 0, "" };

_cvint  _core_shots = { &core_shots, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _disdaq_shots = { &disdaq_shots, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pass_shots = { &pass_shots, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _passr_shots = { &passr_shots, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pass_time = { &pass_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pw_gxwl1 = { &pw_gxwl1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwl2 = { &pw_gxwl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwr1 = { &pw_gxwr1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwr2 = { &pw_gxwr2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw_total = { &pw_gxw_total,  0000, MAXINT, 0000,  0, 0, 0, 1, 1, VIS,  "pw_gxwl + pw_gxw + pw_gxwr", 0, "" };

_cvint  _pass_delay = { &pass_delay,  1  , MAXINT, 1  ,  0, 0, 0, 1, 1, VIS,  "ssp delay prior to sending pass packet(us)", 0, "" };

_cvint  _nshots_locks = { &nshots_locks,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "1=lockout opnshots<min_nshots, 0=allow all opnshots values.", 0, "" };
_cvint  _min_nshots = { &min_nshots,  1, 8, 1,  0, 0, 0, 1, 1, VIS,  "Minium number of shots allowed.", 0, "" };


_cvfloat  _da_gyboc = { &da_gyboc,  0.0, 2.2, 0.0,  0, 0, 0, 1, 1, VIS,  "Tweaking value for a_gyboc.", 0, "" };
_cvfloat  _oc_fact = { &oc_fact,  -10.0, 10.0, 1.0,  0, 0, 0, 1, 1, VIS,  "Multiplication factor for a_gyboc.", 0, "" };
_cvint  _oblcorr_on = { &oblcorr_on,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "Control switch for use of oblique plane  blip correction [0=off,1=on].", 0, "" };




_cvint  _oblcorr_perslice = { &oblcorr_perslice,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Perform oblique correction on per slice basis [0=off,1=on].", 0, "" };
_cvint  _debug_oblcorr = { &debug_oblcorr,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Debug switch for phase-encoding blip correction [0=off,1=on].", 0, "" };
_cvfloat  _bc_delx = { &bc_delx,  -1000.0, 1000.0, 0.0,  0, 0, 0, 1, 1, VIS,  "Interpolated x delay for blip correction.", 0, "" };
_cvfloat  _bc_dely = { &bc_dely,  -1000.0, 1000.0, 0.0,  0, 0, 0, 1, 1, VIS,  "Interpolated y delay for blip correction.", 0, "" };
_cvfloat  _bc_delz = { &bc_delz,  -1000.0, 1000.0, 0.0,  0, 0, 0, 1, 1, VIS,  "Interpolated z delay for blip correction.", 0, "" };
_cvfloat  _percentBlipMod = { &percentBlipMod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cvxfull = { &cvxfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cvyfull = { &cvyfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cvzfull = { &cvzfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _bw_flattop = { &bw_flattop, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_usedramp = { &area_usedramp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pw_usedramp = { &pw_usedramp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_usedtotal = { &area_usedtotal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _epispec_flag = { &epispec_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Enable short RF & no Chem Sat.", 0, "" };


_cvfloat  _omega_scale = { &omega_scale,  1.0, 4096, 256,  0, 0, 0, 1, 1, VIS,  "Instruction amplitude scaling", 0, "" };
_cvint  _start_pulse = { &start_pulse, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _my_alpha = { &my_alpha,  -360.0,  360.0,  0.0,  0, 0, 0, 1, 1,  VIS,  "Rotation around X-axis",  0, "" };
_cvfloat  _my_beta = { &my_beta,  -360.0,  360.0,  0.0,  0, 0, 0, 1, 1,  VIS,  "Rotation around Y-axis",  0, "" };
_cvfloat  _my_gamma = { &my_gamma,  -360.0,  360.0,  0.0,  0, 0, 0, 1, 1,  VIS,  "Rotation around Z-axis",  0, "" };


_cvint  _ext_trig = { &ext_trig,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, "Externally Triggered Scan (1=ON, 0=OFF)", 0, "" };

_cvfloat  _rup_factor = { &rup_factor, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _override_fatsat_high_weight = { &override_fatsat_high_weight,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, "Override forcicng fat sat use for high patient weight (1=ON, 0=OFF)", 0, "" };
_cvint  _bigpat_warning_flag = { &bigpat_warning_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _epigradspec_flag = { &epigradspec_flag,  0, 1, 0,  0, 0, 0, 1, 1, VIS,  "Enable DVw gradient test.", 0, "" };
_cvint  _dvw_grad_test = { &dvw_grad_test,  0, 2, 0,  0, 0, 0, 1, 1, INVIS, "Select DVw gradient test (0=DEFAULT, 1=SR150, 2=GMAX34)", 0, "" };

_cvint  _fullk_nframes = { &fullk_nframes, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _specspat_temp = { &specspat_temp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_temp = { &res_temp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _nom_pw_temp = { &nom_pw_temp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _nom_flip_temp = { &nom_flip_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abswidth_temp = { &abswidth_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _effwidth_temp = { &effwidth_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_temp = { &area_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _dtycyc_temp = { &dtycyc_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _maxpw_temp = { &maxpw_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _max_b1_temp = { &max_b1_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _max_int_b1_sqr_temp = { &max_int_b1_sqr_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _max_rms_b1_temp = { &max_rms_b1_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _nom_bw_temp = { &nom_bw_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _isodelay_temp = { &isodelay_temp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzs_temp = { &a_gzs_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _nom_thk_temp = { &nom_thk_temp, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _extgradfile_temp = { &extgradfile_temp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _nom_thk_rf1 = { &nom_thk_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _target = { &target, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _thetaflag = { &thetaflag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _phase_mod = { &phase_mod,  -1000, 1000, 10.5,  0, 0, 0, 1, 1, VIS, "Factor for phase modulation to account for off-resonance", 0, "" };


_cvfloat  _sw_freq = { &sw_freq,  0, 2000, 0,  0, 0, 0, 1, 1, VIS, "Spectral bandwidth for SPSP RF, needed for shifting passbands", 0, "" };
_cvfloat  _sw = { &sw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _user_bw = { &user_bw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _enable_iref_etl = { &enable_iref_etl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _vfa_flag = { &vfa_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _sake_flag = { &sake_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sake_max_blip = { &sake_max_blip, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rtime = { &rtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ftime = { &ftime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _df1 = { &df1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_df2 = { &df2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_df3 = { &df3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_df4 = { &df4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_df5 = { &df5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _df1_ppm = { &df1_ppm,  -10000,  10000,  0,  0, 0, 0, 1, 1,  VIS,  "Frequency offset for pyruvate (ppm)" , 0, "" };
_cvfloat  _df2_ppm = { &df2_ppm,  -10000,  10000,  1000,  0, 0, 0, 1, 1,  VIS,  "Frequency offset for lactate (ppm)" , 0, "" };
_cvfloat  _df3_ppm = { &df3_ppm,  -10000,  10000,  1000,  0, 0, 0, 1, 1,  VIS,  "Frequency offset for urea (ppm)" , 0, "" };
_cvfloat  _df4_ppm = { &df4_ppm,  -10000,  10000,  8,  0, 0, 0, 1, 1,  VIS,  "Frequency offset for compound 4 (ppm)" , 0, "" };
_cvfloat  _df5_ppm = { &df5_ppm,  -10000,  10000,  8,  0, 0, 0, 1, 1,  VIS,  "Frequency offset for compound 5 (ppm)" , 0, "" };
_cvfloat  _met_ppm = { &met_ppm, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _num_frames = { &num_frames, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _num_mets = { &num_mets, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _wg_omegaro1 = { &wg_omegaro1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvint  _touch_flag = { &touch_flag,   PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "flag to turn on MR-Touch",  0, "" };
_cvfloat  _touch_target = { &touch_target,   0,  5.0,  2.2,  0, 0, 0, 1, 1,  INVIS,  "common derated target",  0, "" };
_cvint  _touch_rt = { &touch_rt,   4,  10000,  4,  0, 0, 0, 1, 1,  INVIS,  "common derated rise time",  0, "" };
_cvint  _touch_time = { &touch_time,   0,  25000000,  0,  0, 0, 0, 1, 1,  VIS,  "Total Duration of the MEG",  0, "" };
_cvint  _touch_gnum = { &touch_gnum,   0,  100,  1,  0, 0, 0, 1, 1,  VIS,  "Number of MEG",  0, "" };
_cvint  _touch_period = { &touch_period,   0,  50000,  0,  0, 0, 0, 1, 1,  VIS,  "1/freq in us",  0, "" };
_cvint  _touch_lobe = { &touch_lobe,   0,  25000,  0,  0, 0, 0, 1, 1,  VIS,  "Half Period",  0, "" };
_cvint  _touch_delta = { &touch_delta,   0,  25000,  0,  0, 0, 0, 1, 1,  VIS,  "Time Between Offsets",  0, "" };
_cvfloat  _touch_act_freq = { &touch_act_freq,   0.0,  5050.6,  60.0,  0, 0, 0, 1, 1,  VIS,  "actual freq used based on gradient resolution", 0, "" };
_cvint  _touch_pwcon = { &touch_pwcon,   0,  25000,  0,  0, 0, 0, 1, 1,  VIS,  "Width of Flat Top for MEG", 0, "" };
_cvint  _touch_pwramp = { &touch_pwramp,   0,  25000,  0,  0, 0, 0, 1, 1,  VIS,  "Ramp Time for MEG",  0, "" };
_cvfloat  _touch_gdrate = { &touch_gdrate,   0.0,  1.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "scale down from max amp of encoding gradients",  0, "" };
_cvfloat  _touch_gamp = { &touch_gamp,   0.0,  5.0,  1.76,  0, 0, 0, 1, 1,  VIS,  "Amplitude of MEG in g/cm",  0, "" };
_cvfloat  _touch_gamp2 = { &touch_gamp2,   -1,  0,  -1,  0, 0, 0, 1, 1,  VIS,  "0 for 1-sided encoding; -1 for 2-sided encoding ",  0, "" };
_cvint  _touch_xdir = { &touch_xdir,   PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "MEG in X Direction",  0, "" };
_cvint  _touch_ydir = { &touch_ydir,   PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "MEG in Y Direction",  0, "" };
_cvint  _touch_zdir = { &touch_zdir,   PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "MEG in Z Direction",  0, "" };
_cvint  _touch_burst_count = { &touch_burst_count,   1,  500,  60,  0, 0, 0, 1, 1,  VIS,  "Resoundant Cycles per Trigger",  0, "" };
_cvint  _touch_ndir = { &touch_ndir,   2,  2,  2,  0, 0, 0, 1, 1,  INVIS,  "Number of MEG Polarities: 2 for bi-polar",  0, "" };
_cvint  _touch_sync_pw = { &touch_sync_pw,   0,  200,  50,  0, 0, 0, 1, 1,  VIS,  "Trigger Width in us",  0, "" };
_cvint  _touch_fcomp = { &touch_fcomp,   0,  2,  2,  0, 0, 0, 1, 1,  VIS,  "Flow Comp MEG Pulses. 1: Bipolar Pulse, 2: 1-2-1 Pulse",  0, "" };
_cvfloat  _touch_menc = { &touch_menc,   0,  50000,  0,  0, 0, 0, 1, 1,  VIS,  "Phase to Displacement Conversion Factor",  0, "" };
_cvint  _touch_tr_time = { &touch_tr_time,   0,  30000000,  0,  0, 0, 0, 1, 1,  VIS,  "Default TR for MR-Touch",  0, "" };
_cvint  _touch_driver_amp = { &touch_driver_amp,   0,  100,  30,  0, 0, 0, 1, 1,  VIS,  "Resoundant Driver Amplitude",  0, "" };

_cvint  _touch_period_motion = { &touch_period_motion, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _touch_period_meg = { &touch_period_meg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _touch_lobe_motion = { &touch_lobe_motion, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _touch_lobe_meg = { &touch_lobe_meg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _touch_act_freq_motion = { &touch_act_freq_motion, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _touch_act_freq_meg = { &touch_act_freq_meg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _touch_pos_sync = { &touch_pos_sync, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _touch_pos_encode = { &touch_pos_encode, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cont_drive_ssp_delay = { &cont_drive_ssp_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _multiphase_flag = { &multiphase_flag,   0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "0=OFF, 1=Support for sequential single slice multiphase",  0, "" };
_cvint  _multi_phases = { &multi_phases,   1,  256,  1,  0, 0, 0, 1, 1,  VIS,  "Number of phases when multiphase is ON",  0, "" };

_cvint  _rf2_time = { &rf2_time, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2_tot = { &pw_gz2_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _M_half_periods = { &M_half_periods, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _meg_mode = { &meg_mode, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _grad_axis = { &grad_axis, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _touch_maxshots = { &touch_maxshots, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };






#define MAX_NUM_TOUCH_MOTION_DIRS 2
_cvint  _pw_x_td0 = { &pw_x_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_x_td0 = { &wg_x_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_y_td0 = { &pw_y_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_y_td0 = { &wg_y_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_z_td0 = { &pw_z_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_z_td0 = { &wg_z_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rho_td0 = { &pw_rho_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rho_td0 = { &wg_rho_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_theta_td0 = { &pw_theta_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_theta_td0 = { &wg_theta_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_omega_td0 = { &pw_omega_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_omega_td0 = { &wg_omega_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_ssp_td0 = { &pw_ssp_td0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ssp_td0 = { &wg_ssp_td0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf0 = { &a_gzrf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf0 = { &ia_gzrf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0a = { &pw_gzrf0a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0d = { &pw_gzrf0d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0 = { &pw_gzrf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzrf0 = { &res_gzrf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf0 = { &a_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf0 = { &ia_rf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf0 = { &pw_rf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf0 = { &res_rf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf0 = { &cyc_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf0 = { &off_rf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf0 = { &alpha_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf0 = { &thk_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf0 = { &gscale_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf0 = { &flip_rf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf0 = { &wg_rf0,  0,  WF_MAX_PROCESSORS*2-1, 
                                             TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_omegarf0 = { &a_omegarf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_omegarf0 = { &ia_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_omegarf0 = { &pw_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_omegarf0 = { &res_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_omegarf0 = { &off_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_omegarf0 = { &rfslot_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_omegarf0 = { &gscale_omegarf0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_omegarf0 = { &n_omegarf0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_omegarf0 = { &wg_omegarf0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyk0 = { &a_gyk0, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyk0 = { &ia_gyk0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk0a = { &pw_gyk0a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk0d = { &pw_gyk0d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk0 = { &pw_gyk0, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyk0 = { &wg_gyk0,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1 = { &a_gzrf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1 = { &ia_gzrf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1a = { &pw_gzrf1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1d = { &pw_gzrf1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1 = { &pw_gzrf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzrf1 = { &res_gzrf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1 = { &a_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1 = { &ia_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1 = { &pw_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1 = { &res_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1 = { &cyc_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1 = { &off_rf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1 = { &alpha_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1 = { &thk_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1 = { &gscale_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1 = { &flip_rf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_thetarf1 = { &a_thetarf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thetarf1 = { &ia_thetarf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarf1 = { &pw_thetarf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_thetarf1 = { &res_thetarf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_thetarf1 = { &off_thetarf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1 = { &wg_rf1,  0,  WF_MAX_PROCESSORS*2-1, 
                                             TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };
_cvint  _wg_omegarf1 = { &wg_omegarf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_phaserf1 = { &a_phaserf1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_phaserf1 = { &ia_phaserf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_phaserf1 = { &pw_phaserf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_phaserf1 = { &res_phaserf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_phaserf1 = { &off_phaserf1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_phaserf1 = { &wg_phaserf1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2 = { &a_gzrf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2 = { &ia_gzrf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2a = { &pw_gzrf2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2d = { &pw_gzrf2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2 = { &pw_gzrf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2 = { &a_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2 = { &ia_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2 = { &pw_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2 = { &res_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2 = { &cyc_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2 = { &off_rf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2 = { &alpha_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2 = { &thk_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2 = { &gscale_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2 = { &flip_rf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2 = { &wg_rf2,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_rf2se1b4 = { &res_rf2se1b4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2se1b4 = { &wg_rf2se1b4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf2iv = { &a_gyrf2iv, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf2iv = { &ia_gyrf2iv, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2iva = { &pw_gyrf2iva, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2ivd = { &pw_gyrf2ivd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2iv = { &pw_gyrf2iv, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf2iv = { &wg_gyrf2iv,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2l1 = { &a_gzrf2l1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2l1 = { &ia_gzrf2l1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2l1a = { &pw_gzrf2l1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2l1d = { &pw_gzrf2l1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2l1 = { &pw_gzrf2l1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2l1 = { &wg_gzrf2l1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2r1 = { &a_gzrf2r1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2r1 = { &ia_gzrf2r1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2r1a = { &pw_gzrf2r1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2r1d = { &pw_gzrf2r1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2r1 = { &pw_gzrf2r1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2r1 = { &wg_gzrf2r1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxcl = { &a_gxcl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gxw = { &a_gxw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gxcr = { &a_gxcr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gyb = { &a_gyb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxcl = { &ia_gxcl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw = { &ia_gxw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxcr = { &ia_gxcr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyb = { &ia_gyb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcla = { &pw_gxcla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcl = { &pw_gxcl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcld = { &pw_gxcld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwl = { &pw_gxwl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw = { &pw_gxw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwr = { &pw_gxwr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwad = { &pw_gxwad, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxgap = { &pw_gxgap, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcra = { &pw_gxcra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcr = { &pw_gxcr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxcrd = { &pw_gxcrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyba = { &pw_gyba, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyb = { &pw_gyb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gybd = { &pw_gybd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_iref_gxwait = { &pw_iref_gxwait, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_rec_unblank = { &ia_rec_unblank, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _filter_rtb0echo = { &filter_rtb0echo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_rec_unblank2 = { &ia_rec_unblank2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvfloat  _a_gy1 = { &a_gy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1a = { &a_gy1a, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1b = { &a_gy1b, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1 = { &ia_gy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1wa = { &ia_gy1wa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1wb = { &ia_gy1wb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1a = { &pw_gy1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1d = { &pw_gy1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1 = { &pw_gy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1 = { &wg_gy1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gymn2 = { &a_gymn2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gymn2 = { &ia_gymn2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn2a = { &pw_gymn2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn2d = { &pw_gymn2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn2 = { &pw_gymn2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gymn2 = { &wg_gymn2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gymn1 = { &a_gymn1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gymn1 = { &ia_gymn1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn1a = { &pw_gymn1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn1d = { &pw_gymn1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gymn1 = { &pw_gymn1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gymn1 = { &wg_gymn1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1 = { &a_gz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1 = { &ia_gz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1a = { &pw_gz1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1d = { &pw_gz1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1 = { &pw_gz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1 = { &wg_gz1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzmn = { &a_gzmn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzmn = { &ia_gzmn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzmna = { &pw_gzmna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzmnd = { &pw_gzmnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzmn = { &pw_gzmn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzmn = { &wg_gzmn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_rf2se1 = { &res_rf2se1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2se1 = { &wg_rf2se1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxk = { &a_gxk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxk = { &ia_gxk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxka = { &pw_gxka, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkd = { &pw_gxkd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxk = { &pw_gxk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxk = { &wg_gxk,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyk = { &a_gyk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyk = { &ia_gyk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyka = { &pw_gyka, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykd = { &pw_gykd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk = { &pw_gyk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyk = { &wg_gyk,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzk = { &a_gzk, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzk = { &ia_gzk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzka = { &pw_gzka, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkd = { &pw_gzkd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzk = { &pw_gzk, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzk = { &wg_gzk,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_sync_on_2 = { &ia_sync_on_2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_sync_off_2 = { &ia_sync_off_2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pw_wgx = { &pw_wgx, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_wgx = { &wg_wgx,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_wgy = { &pw_wgy, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_wgy = { &wg_wgy,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_wgz = { &pw_wgz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_wgz = { &wg_wgz,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_wssp = { &pw_wssp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_wssp = { &wg_wssp,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_sspdelay = { &pw_sspdelay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sspdelay = { &wg_sspdelay,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_omegadelay = { &pw_omegadelay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_omegadelay = { &wg_omegadelay,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_womega = { &pw_womega, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_womega = { &wg_womega,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_sspshift = { &pw_sspshift, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sspshift = { &wg_sspshift,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_ssp_pass_delay = { &pw_ssp_pass_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ssp_pass_delay = { &wg_ssp_pass_delay,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_jwg_delay = { &pw_jwg_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_jwg_delay = { &wg_jwg_delay,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_touch_wssp = { &pw_touch_wssp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_touch_wssp = { &wg_touch_wssp,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_rec_unblankref = { &ia_rec_unblankref, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _refa_gxcl = { &refa_gxcl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _refa_gxw = { &refa_gxw, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _refa_gxcr = { &refa_gxcr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _refa_gyb = { &refa_gyb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refia_gxcl = { &refia_gxcl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refia_gxw = { &refia_gxw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refia_gxcr = { &refia_gxcr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refia_gyb = { &refia_gyb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gxcla = { &refpw_gxcla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gxcl = { &refpw_gxcl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gxcld = { &refpw_gxcld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gxwl = { &refpw_gxwl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gxw = { &refpw_gxw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gxwr = { &refpw_gxwr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gxwad = { &refpw_gxwad, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gxgap = { &refpw_gxgap, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gxcra = { &refpw_gxcra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gxcr = { &refpw_gxcr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gxcrd = { &refpw_gxcrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gyba = { &refpw_gyba, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gyb = { &refpw_gyb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _refpw_gybd = { &refpw_gybd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvint  _ia_bline_unblank = { &ia_bline_unblank, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _filter_blineacq1 = { &filter_blineacq1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvfloat  _a_gxtouchu2 = { &a_gxtouchu2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxtouchu2 = { &ia_gxtouchu2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchu2a = { &pw_gxtouchu2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchu2d = { &pw_gxtouchu2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchu2 = { &pw_gxtouchu2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxtouchu2 = { &wg_gxtouchu2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gytouchu2 = { &a_gytouchu2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gytouchu2 = { &ia_gytouchu2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchu2a = { &pw_gytouchu2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchu2d = { &pw_gytouchu2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchu2 = { &pw_gytouchu2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gytouchu2 = { &wg_gytouchu2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gztouchu2 = { &a_gztouchu2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gztouchu2 = { &ia_gztouchu2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchu2a = { &pw_gztouchu2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchu2d = { &pw_gztouchu2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchu2 = { &pw_gztouchu2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gztouchu2 = { &wg_gztouchu2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxtouchu = { &a_gxtouchu, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxtouchu = { &ia_gxtouchu, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchua = { &pw_gxtouchua, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchud = { &pw_gxtouchud, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchu = { &pw_gxtouchu, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxtouchu = { &wg_gxtouchu,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gytouchu = { &a_gytouchu, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gytouchu = { &ia_gytouchu, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchua = { &pw_gytouchua, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchud = { &pw_gytouchud, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchu = { &pw_gytouchu, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gytouchu = { &wg_gytouchu,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gztouchu = { &a_gztouchu, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gztouchu = { &ia_gztouchu, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchua = { &pw_gztouchua, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchud = { &pw_gztouchud, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchu = { &pw_gztouchu, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gztouchu = { &wg_gztouchu,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxtouchd2 = { &a_gxtouchd2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxtouchd2 = { &ia_gxtouchd2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchd2a = { &pw_gxtouchd2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchd2d = { &pw_gxtouchd2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchd2 = { &pw_gxtouchd2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxtouchd2 = { &wg_gxtouchd2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gytouchd2 = { &a_gytouchd2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gytouchd2 = { &ia_gytouchd2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchd2a = { &pw_gytouchd2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchd2d = { &pw_gytouchd2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchd2 = { &pw_gytouchd2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gytouchd2 = { &wg_gytouchd2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gztouchd2 = { &a_gztouchd2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gztouchd2 = { &ia_gztouchd2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchd2a = { &pw_gztouchd2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchd2d = { &pw_gztouchd2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchd2 = { &pw_gztouchd2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gztouchd2 = { &wg_gztouchd2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxtouchd = { &a_gxtouchd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxtouchd = { &ia_gxtouchd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchda = { &pw_gxtouchda, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchdd = { &pw_gxtouchdd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchd = { &pw_gxtouchd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxtouchd = { &wg_gxtouchd,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gytouchd = { &a_gytouchd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gytouchd = { &ia_gytouchd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchda = { &pw_gytouchda, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchdd = { &pw_gytouchdd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchd = { &pw_gytouchd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gytouchd = { &wg_gytouchd,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gztouchd = { &a_gztouchd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gztouchd = { &ia_gztouchd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchda = { &pw_gztouchda, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchdd = { &pw_gztouchdd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchd = { &pw_gztouchd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gztouchd = { &wg_gztouchd,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxtouchf2 = { &a_gxtouchf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxtouchf2 = { &ia_gxtouchf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchf2a = { &pw_gxtouchf2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchf2d = { &pw_gxtouchf2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchf2 = { &pw_gxtouchf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxtouchf2 = { &wg_gxtouchf2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gytouchf2 = { &a_gytouchf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gytouchf2 = { &ia_gytouchf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchf2a = { &pw_gytouchf2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchf2d = { &pw_gytouchf2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchf2 = { &pw_gytouchf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gytouchf2 = { &wg_gytouchf2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gztouchf2 = { &a_gztouchf2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gztouchf2 = { &ia_gztouchf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchf2a = { &pw_gztouchf2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchf2d = { &pw_gztouchf2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchf2 = { &pw_gztouchf2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gztouchf2 = { &wg_gztouchf2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxtouchf = { &a_gxtouchf, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxtouchf = { &ia_gxtouchf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchfa = { &pw_gxtouchfa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchfd = { &pw_gxtouchfd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxtouchf = { &pw_gxtouchf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxtouchf = { &wg_gxtouchf,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gytouchf = { &a_gytouchf, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gytouchf = { &ia_gytouchf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchfa = { &pw_gytouchfa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchfd = { &pw_gytouchfd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gytouchf = { &pw_gytouchf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gytouchf = { &wg_gytouchf,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gztouchf = { &a_gztouchf, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gztouchf = { &ia_gztouchf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchfa = { &pw_gztouchfa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchfd = { &pw_gztouchfd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gztouchf = { &pw_gztouchf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gztouchf = { &wg_gztouchf,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_rfcssat = { &res_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfcssat = { &wg_rfcssat,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_omega_hs_rfcssat = { &res_omega_hs_rfcssat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_omega_hs_rfcssat = { &wg_omega_hs_rfcssat,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfcs = { &a_gzrfcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfcs = { &ia_gzrfcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcsa = { &pw_gzrfcsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcsd = { &pw_gzrfcsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfcs = { &pw_gzrfcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrfcs = { &wg_gzrfcs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykcs = { &a_gykcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykcs = { &ia_gykcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcsa = { &pw_gykcsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcsd = { &pw_gykcsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcs = { &pw_gykcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykcs = { &wg_gykcs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkcs = { &a_gxkcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkcs = { &ia_gxkcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkcsa = { &pw_gxkcsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkcsd = { &pw_gxkcsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkcs = { &pw_gxkcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkcs = { &wg_gxkcs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkcs = { &a_gzkcs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkcs = { &ia_gzkcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkcsa = { &pw_gzkcsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkcsd = { &pw_gzkcsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkcs = { &pw_gzkcs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkcs = { &wg_gzkcs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_cardiacsat = { &pw_isi_cardiacsat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_cardiacsat = { &wg_isi_cardiacsat,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_cardiacsat = { &pw_rot_update_cardiacsat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_cardiacsat = { &wg_rot_update_cardiacsat,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse1 = { &a_gzrfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse1 = { &ia_gzrfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse1a = { &pw_gzrfse1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse1d = { &pw_gzrfse1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse1 = { &pw_gzrfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse1 = { &a_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse1 = { &ia_rfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse1 = { &pw_rfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse1 = { &res_rfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse1 = { &temp_res_rfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse1 = { &cyc_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse1 = { &off_rfse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse1 = { &alpha_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse1 = { &thk_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse1 = { &gscale_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse1 = { &flip_rfse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse1 = { &wg_rfse1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate1 = { &pw_isi_sate1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate1 = { &wg_isi_sate1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e1 = { &pw_rot_update_e1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e1 = { &wg_rot_update_e1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse1 = { &a_gykse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse1 = { &ia_gykse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse1a = { &pw_gykse1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse1d = { &pw_gykse1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse1 = { &pw_gykse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse1 = { &wg_gykse1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse1 = { &a_gxkse1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse1 = { &ia_gxkse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse1a = { &pw_gxkse1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse1d = { &pw_gxkse1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse1 = { &pw_gxkse1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse1 = { &wg_gxkse1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek1 = { &pw_isi_satek1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek1 = { &wg_isi_satek1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek1 = { &pw_rot_update_ek1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek1 = { &wg_rot_update_ek1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse2 = { &a_gzrfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse2 = { &ia_gzrfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse2a = { &pw_gzrfse2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse2d = { &pw_gzrfse2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse2 = { &pw_gzrfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse2 = { &a_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse2 = { &ia_rfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse2 = { &pw_rfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse2 = { &res_rfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse2 = { &temp_res_rfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse2 = { &cyc_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse2 = { &off_rfse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse2 = { &alpha_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse2 = { &thk_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse2 = { &gscale_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse2 = { &flip_rfse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse2 = { &wg_rfse2,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate2 = { &pw_isi_sate2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate2 = { &wg_isi_sate2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e2 = { &pw_rot_update_e2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e2 = { &wg_rot_update_e2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse2 = { &a_gykse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse2 = { &ia_gykse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse2a = { &pw_gykse2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse2d = { &pw_gykse2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse2 = { &pw_gykse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse2 = { &wg_gykse2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse2 = { &a_gxkse2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse2 = { &ia_gxkse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse2a = { &pw_gxkse2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse2d = { &pw_gxkse2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse2 = { &pw_gxkse2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse2 = { &wg_gxkse2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek2 = { &pw_isi_satek2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek2 = { &wg_isi_satek2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek2 = { &pw_rot_update_ek2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek2 = { &wg_rot_update_ek2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse3 = { &a_gzrfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse3 = { &ia_gzrfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse3a = { &pw_gzrfse3a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse3d = { &pw_gzrfse3d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse3 = { &pw_gzrfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse3 = { &a_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse3 = { &ia_rfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse3 = { &pw_rfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse3 = { &res_rfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse3 = { &temp_res_rfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse3 = { &cyc_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse3 = { &off_rfse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse3 = { &alpha_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse3 = { &thk_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse3 = { &gscale_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse3 = { &flip_rfse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse3 = { &wg_rfse3,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate3 = { &pw_isi_sate3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate3 = { &wg_isi_sate3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e3 = { &pw_rot_update_e3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e3 = { &wg_rot_update_e3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse3 = { &a_gykse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse3 = { &ia_gykse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse3a = { &pw_gykse3a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse3d = { &pw_gykse3d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse3 = { &pw_gykse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse3 = { &wg_gykse3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse3 = { &a_gxkse3, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse3 = { &ia_gxkse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse3a = { &pw_gxkse3a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse3d = { &pw_gxkse3d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse3 = { &pw_gxkse3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse3 = { &wg_gxkse3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek3 = { &pw_isi_satek3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek3 = { &wg_isi_satek3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek3 = { &pw_rot_update_ek3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek3 = { &wg_rot_update_ek3,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse4 = { &a_gzrfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse4 = { &ia_gzrfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse4a = { &pw_gzrfse4a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse4d = { &pw_gzrfse4d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse4 = { &pw_gzrfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse4 = { &a_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse4 = { &ia_rfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse4 = { &pw_rfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse4 = { &res_rfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse4 = { &temp_res_rfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse4 = { &cyc_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse4 = { &off_rfse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse4 = { &alpha_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse4 = { &thk_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse4 = { &gscale_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse4 = { &flip_rfse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse4 = { &wg_rfse4,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate4 = { &pw_isi_sate4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate4 = { &wg_isi_sate4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e4 = { &pw_rot_update_e4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e4 = { &wg_rot_update_e4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse4 = { &a_gykse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse4 = { &ia_gykse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse4a = { &pw_gykse4a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse4d = { &pw_gykse4d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse4 = { &pw_gykse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse4 = { &wg_gykse4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse4 = { &a_gxkse4, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse4 = { &ia_gxkse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse4a = { &pw_gxkse4a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse4d = { &pw_gxkse4d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse4 = { &pw_gxkse4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse4 = { &wg_gxkse4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek4 = { &pw_isi_satek4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek4 = { &wg_isi_satek4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek4 = { &pw_rot_update_ek4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek4 = { &wg_rot_update_ek4,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse5 = { &a_gzrfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse5 = { &ia_gzrfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse5a = { &pw_gzrfse5a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse5d = { &pw_gzrfse5d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse5 = { &pw_gzrfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse5 = { &a_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse5 = { &ia_rfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse5 = { &pw_rfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse5 = { &res_rfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse5 = { &temp_res_rfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse5 = { &cyc_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse5 = { &off_rfse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse5 = { &alpha_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse5 = { &thk_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse5 = { &gscale_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse5 = { &flip_rfse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse5 = { &wg_rfse5,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate5 = { &pw_isi_sate5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate5 = { &wg_isi_sate5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e5 = { &pw_rot_update_e5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e5 = { &wg_rot_update_e5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse5 = { &a_gykse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse5 = { &ia_gykse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse5a = { &pw_gykse5a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse5d = { &pw_gykse5d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse5 = { &pw_gykse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse5 = { &wg_gykse5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse5 = { &a_gxkse5, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse5 = { &ia_gxkse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse5a = { &pw_gxkse5a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse5d = { &pw_gxkse5d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse5 = { &pw_gxkse5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse5 = { &wg_gxkse5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek5 = { &pw_isi_satek5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek5 = { &wg_isi_satek5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek5 = { &pw_rot_update_ek5, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek5 = { &wg_rot_update_ek5,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfse6 = { &a_gzrfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfse6 = { &ia_gzrfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse6a = { &pw_gzrfse6a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse6d = { &pw_gzrfse6d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfse6 = { &pw_gzrfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfse6 = { &a_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfse6 = { &ia_rfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfse6 = { &pw_rfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfse6 = { &res_rfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfse6 = { &temp_res_rfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfse6 = { &cyc_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfse6 = { &off_rfse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfse6 = { &alpha_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfse6 = { &thk_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfse6 = { &gscale_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfse6 = { &flip_rfse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfse6 = { &wg_rfse6,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_sate6 = { &pw_isi_sate6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_sate6 = { &wg_isi_sate6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_e6 = { &pw_rot_update_e6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_e6 = { &wg_rot_update_e6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykse6 = { &a_gykse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykse6 = { &ia_gykse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse6a = { &pw_gykse6a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse6d = { &pw_gykse6d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykse6 = { &pw_gykse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykse6 = { &wg_gykse6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkse6 = { &a_gxkse6, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkse6 = { &ia_gxkse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse6a = { &pw_gxkse6a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse6d = { &pw_gxkse6d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkse6 = { &pw_gxkse6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkse6 = { &wg_gxkse6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satek6 = { &pw_isi_satek6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satek6 = { &wg_isi_satek6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_ek6 = { &pw_rot_update_ek6, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_ek6 = { &wg_rot_update_ek6,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxrfsx1 = { &a_gxrfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxrfsx1 = { &ia_gxrfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx1a = { &pw_gxrfsx1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx1d = { &pw_gxrfsx1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx1 = { &pw_gxrfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsx1 = { &a_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsx1 = { &ia_rfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsx1 = { &pw_rfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsx1 = { &res_rfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsx1 = { &temp_res_rfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsx1 = { &cyc_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsx1 = { &off_rfsx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsx1 = { &alpha_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsx1 = { &gscale_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsx1 = { &thk_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsx1 = { &flip_rfsx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsx1 = { &wg_rfsx1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satx1 = { &pw_isi_satx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satx1 = { &wg_isi_satx1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_x1 = { &pw_rot_update_x1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_x1 = { &wg_rot_update_x1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksx1 = { &a_gyksx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksx1 = { &ia_gyksx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx1a = { &pw_gyksx1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx1d = { &pw_gyksx1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx1 = { &pw_gyksx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksx1 = { &wg_gyksx1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksx1 = { &a_gxksx1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksx1 = { &ia_gxksx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx1a = { &pw_gxksx1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx1d = { &pw_gxksx1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx1 = { &pw_gxksx1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksx1 = { &wg_gxksx1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satxk1 = { &pw_isi_satxk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satxk1 = { &wg_isi_satxk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_xk1 = { &pw_rot_update_xk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_xk1 = { &wg_rot_update_xk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxrfsx2 = { &a_gxrfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxrfsx2 = { &ia_gxrfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx2a = { &pw_gxrfsx2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx2d = { &pw_gxrfsx2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrfsx2 = { &pw_gxrfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsx2 = { &a_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsx2 = { &ia_rfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsx2 = { &pw_rfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsx2 = { &res_rfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsx2 = { &temp_res_rfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsx2 = { &cyc_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsx2 = { &off_rfsx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsx2 = { &alpha_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsx2 = { &gscale_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsx2 = { &thk_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsx2 = { &flip_rfsx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsx2 = { &wg_rfsx2,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satx2 = { &pw_isi_satx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satx2 = { &wg_isi_satx2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_x2 = { &pw_rot_update_x2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_x2 = { &wg_rot_update_x2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksx2 = { &a_gyksx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksx2 = { &ia_gyksx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx2a = { &pw_gyksx2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx2d = { &pw_gyksx2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksx2 = { &pw_gyksx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksx2 = { &wg_gyksx2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksx2 = { &a_gxksx2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksx2 = { &ia_gxksx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx2a = { &pw_gxksx2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx2d = { &pw_gxksx2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksx2 = { &pw_gxksx2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksx2 = { &wg_gxksx2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satxk2 = { &pw_isi_satxk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satxk2 = { &wg_isi_satxk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_xk2 = { &pw_rot_update_xk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_xk2 = { &wg_rot_update_xk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrfsy1 = { &a_gyrfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrfsy1 = { &ia_gyrfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy1a = { &pw_gyrfsy1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy1d = { &pw_gyrfsy1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy1 = { &pw_gyrfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsy1 = { &a_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsy1 = { &ia_rfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsy1 = { &pw_rfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsy1 = { &res_rfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsy1 = { &temp_res_rfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsy1 = { &cyc_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsy1 = { &off_rfsy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsy1 = { &alpha_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsy1 = { &thk_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsy1 = { &gscale_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsy1 = { &flip_rfsy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsy1 = { &wg_rfsy1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_saty1 = { &pw_isi_saty1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_saty1 = { &wg_isi_saty1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_y1 = { &pw_rot_update_y1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_y1 = { &wg_rot_update_y1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksy1 = { &a_gyksy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksy1 = { &ia_gyksy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy1a = { &pw_gyksy1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy1d = { &pw_gyksy1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy1 = { &pw_gyksy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksy1 = { &wg_gyksy1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksy1 = { &a_gxksy1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksy1 = { &ia_gxksy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy1a = { &pw_gxksy1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy1d = { &pw_gxksy1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy1 = { &pw_gxksy1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksy1 = { &wg_gxksy1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satyk1 = { &pw_isi_satyk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satyk1 = { &wg_isi_satyk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_yk1 = { &pw_rot_update_yk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_yk1 = { &wg_rot_update_yk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrfsy2 = { &a_gyrfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrfsy2 = { &ia_gyrfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy2a = { &pw_gyrfsy2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy2d = { &pw_gyrfsy2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrfsy2 = { &pw_gyrfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsy2 = { &a_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsy2 = { &ia_rfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsy2 = { &pw_rfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsy2 = { &res_rfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsy2 = { &temp_res_rfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsy2 = { &cyc_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsy2 = { &off_rfsy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsy2 = { &alpha_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsy2 = { &thk_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsy2 = { &gscale_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsy2 = { &flip_rfsy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsy2 = { &wg_rfsy2,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_saty2 = { &pw_isi_saty2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_saty2 = { &wg_isi_saty2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_y2 = { &pw_rot_update_y2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_y2 = { &wg_rot_update_y2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksy2 = { &a_gyksy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksy2 = { &ia_gyksy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy2a = { &pw_gyksy2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy2d = { &pw_gyksy2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksy2 = { &pw_gyksy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksy2 = { &wg_gyksy2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksy2 = { &a_gxksy2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksy2 = { &ia_gxksy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy2a = { &pw_gxksy2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy2d = { &pw_gxksy2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksy2 = { &pw_gxksy2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksy2 = { &wg_gxksy2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satyk2 = { &pw_isi_satyk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satyk2 = { &wg_isi_satyk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_yk2 = { &pw_rot_update_yk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_yk2 = { &wg_rot_update_yk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfsz1 = { &a_gzrfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfsz1 = { &ia_gzrfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz1a = { &pw_gzrfsz1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz1d = { &pw_gzrfsz1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz1 = { &pw_gzrfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsz1 = { &a_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsz1 = { &ia_rfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsz1 = { &pw_rfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsz1 = { &res_rfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsz1 = { &temp_res_rfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsz1 = { &cyc_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsz1 = { &off_rfsz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsz1 = { &alpha_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsz1 = { &thk_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsz1 = { &gscale_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsz1 = { &flip_rfsz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsz1 = { &wg_rfsz1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satz1 = { &pw_isi_satz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satz1 = { &wg_isi_satz1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_z1 = { &pw_rot_update_z1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_z1 = { &wg_rot_update_z1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksz1 = { &a_gyksz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksz1 = { &ia_gyksz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz1a = { &pw_gyksz1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz1d = { &pw_gyksz1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz1 = { &pw_gyksz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksz1 = { &wg_gyksz1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksz1 = { &a_gxksz1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksz1 = { &ia_gxksz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz1a = { &pw_gxksz1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz1d = { &pw_gxksz1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz1 = { &pw_gxksz1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksz1 = { &wg_gxksz1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satzk1 = { &pw_isi_satzk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satzk1 = { &wg_isi_satzk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_zk1 = { &pw_rot_update_zk1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_zk1 = { &wg_rot_update_zk1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrfsz2 = { &a_gzrfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrfsz2 = { &ia_gzrfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz2a = { &pw_gzrfsz2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz2d = { &pw_gzrfsz2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrfsz2 = { &pw_gzrfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rfsz2 = { &a_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfsz2 = { &ia_rfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfsz2 = { &pw_rfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfsz2 = { &res_rfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rfsz2 = { &temp_res_rfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rfsz2 = { &cyc_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfsz2 = { &off_rfsz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rfsz2 = { &alpha_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rfsz2 = { &thk_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rfsz2 = { &gscale_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rfsz2 = { &flip_rfsz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfsz2 = { &wg_rfsz2,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satz2 = { &pw_isi_satz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satz2 = { &wg_isi_satz2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_z2 = { &pw_rot_update_z2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_z2 = { &wg_rot_update_z2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyksz2 = { &a_gyksz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyksz2 = { &ia_gyksz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz2a = { &pw_gyksz2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz2d = { &pw_gyksz2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyksz2 = { &pw_gyksz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyksz2 = { &wg_gyksz2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxksz2 = { &a_gxksz2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxksz2 = { &ia_gxksz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz2a = { &pw_gxksz2a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz2d = { &pw_gxksz2d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxksz2 = { &pw_gxksz2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxksz2 = { &wg_gxksz2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_satzk2 = { &pw_isi_satzk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_satzk2 = { &wg_isi_satzk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_update_zk2 = { &pw_rot_update_zk2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_update_zk2 = { &wg_rot_update_zk2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_y_ccs_null = { &pw_y_ccs_null, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_y_ccs_null = { &wg_y_ccs_null,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1mps1 = { &a_gzrf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1mps1 = { &ia_gzrf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mps1a = { &pw_gzrf1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mps1d = { &pw_gzrf1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mps1 = { &pw_gzrf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1mps1 = { &a_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1mps1 = { &ia_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1mps1 = { &pw_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1mps1 = { &res_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1mps1 = { &temp_res_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1mps1 = { &cyc_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1mps1 = { &off_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1mps1 = { &alpha_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1mps1 = { &thk_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1mps1 = { &gscale_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1mps1 = { &flip_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1mps1 = { &wg_rf1mps1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1mps1 = { &a_gz1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1mps1 = { &ia_gz1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mps1a = { &pw_gz1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mps1d = { &pw_gz1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mps1 = { &pw_gz1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1mps1 = { &wg_gz1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1mps1 = { &a_gx1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1mps1 = { &ia_gx1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mps1a = { &pw_gx1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mps1d = { &pw_gx1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mps1 = { &pw_gx1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1mps1 = { &wg_gx1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2mps1 = { &a_gzrf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2mps1 = { &ia_gzrf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2mps1a = { &pw_gzrf2mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2mps1d = { &pw_gzrf2mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2mps1 = { &pw_gzrf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2mps1 = { &a_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2mps1 = { &ia_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2mps1 = { &pw_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2mps1 = { &res_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf2mps1 = { &temp_res_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2mps1 = { &cyc_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2mps1 = { &off_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2mps1 = { &alpha_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2mps1 = { &thk_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2mps1 = { &gscale_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2mps1 = { &flip_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2mps1 = { &wg_rf2mps1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2lmps1 = { &a_gzrf2lmps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2lmps1 = { &ia_gzrf2lmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lmps1a = { &pw_gzrf2lmps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lmps1d = { &pw_gzrf2lmps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lmps1 = { &pw_gzrf2lmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2lmps1 = { &wg_gzrf2lmps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2rmps1 = { &a_gzrf2rmps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2rmps1 = { &ia_gzrf2rmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rmps1a = { &pw_gzrf2rmps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rmps1d = { &pw_gzrf2rmps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rmps1 = { &pw_gzrf2rmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2rmps1 = { &wg_gzrf2rmps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwmps1 = { &a_gxwmps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwmps1 = { &ia_gxwmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmps1a = { &pw_gxwmps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmps1d = { &pw_gxwmps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmps1 = { &pw_gxwmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwmps1 = { &wg_gxwmps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1mps1 = { &filter_echo1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrf1cfl = { &a_gzrf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1cfl = { &ia_gzrf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfla = { &pw_gzrf1cfla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfld = { &pw_gzrf1cfld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfl = { &pw_gzrf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1cfl = { &a_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1cfl = { &ia_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1cfl = { &pw_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1cfl = { &res_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1cfl = { &temp_res_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1cfl = { &cyc_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1cfl = { &off_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1cfl = { &alpha_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1cfl = { &thk_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1cfl = { &gscale_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1cfl = { &flip_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1cfl = { &wg_rf1cfl,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1cfl = { &a_gz1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1cfl = { &ia_gz1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1cfla = { &pw_gz1cfla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1cfld = { &pw_gz1cfld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1cfl = { &pw_gz1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1cfl = { &wg_gz1cfl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_cfl_fid = { &filter_cfl_fid, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gykcfl = { &a_gykcfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykcfl = { &ia_gykcfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfla = { &pw_gykcfla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfld = { &pw_gykcfld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfl = { &pw_gykcfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykcfl = { &wg_gykcfl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkrcvn = { &a_gxkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkrcvn = { &ia_gxkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrcvna = { &pw_gxkrcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrcvnd = { &pw_gxkrcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrcvn = { &pw_gxkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkrcvn = { &wg_gxkrcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykrcvn = { &a_gykrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykrcvn = { &ia_gykrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykrcvna = { &pw_gykrcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykrcvnd = { &pw_gykrcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykrcvn = { &pw_gykrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykrcvn = { &wg_gykrcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkrcvn = { &a_gzkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkrcvn = { &ia_gzkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrcvna = { &pw_gzkrcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrcvnd = { &pw_gzkrcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrcvn = { &pw_gzkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkrcvn = { &wg_gzkrcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rcvn_wait = { &pw_rcvn_wait, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rcvn_wait = { &wg_rcvn_wait,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_rcvrbl = { &ia_rcvrbl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _filter_rcvn_fid = { &filter_rcvn_fid, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_rcvrbl2 = { &ia_rcvrbl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrf0cfh = { &a_gzrf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf0cfh = { &ia_gzrf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0cfha = { &pw_gzrf0cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0cfhd = { &pw_gzrf0cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0cfh = { &pw_gzrf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzrf0cfh = { &res_gzrf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf0cfh = { &a_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf0cfh = { &ia_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf0cfh = { &pw_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf0cfh = { &res_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf0cfh = { &cyc_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf0cfh = { &off_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf0cfh = { &alpha_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf0cfh = { &thk_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf0cfh = { &gscale_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf0cfh = { &flip_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf0cfh = { &wg_rf0cfh,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_omegarf0cfh = { &a_omegarf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_omegarf0cfh = { &ia_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_omegarf0cfh = { &pw_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_omegarf0cfh = { &res_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_omegarf0cfh = { &off_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_omegarf0cfh = { &rfslot_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_omegarf0cfh = { &gscale_omegarf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_omegarf0cfh = { &n_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_omegarf0cfh = { &wg_omegarf0cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf0kcfh = { &a_gyrf0kcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf0kcfh = { &ia_gyrf0kcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf0kcfha = { &pw_gyrf0kcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf0kcfhd = { &pw_gyrf0kcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf0kcfh = { &pw_gyrf0kcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf0kcfh = { &wg_gyrf0kcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_zticfh = { &pw_zticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_zticfh = { &wg_zticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rticfh = { &pw_rticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rticfh = { &wg_rticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_xticfh = { &pw_xticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xticfh = { &wg_xticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_yticfh = { &pw_yticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_yticfh = { &wg_yticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_sticfh = { &pw_sticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sticfh = { &wg_sticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1cfh = { &a_gzrf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1cfh = { &ia_gzrf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfha = { &pw_gzrf1cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfhd = { &pw_gzrf1cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfh = { &pw_gzrf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1cfh = { &a_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1cfh = { &ia_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1cfh = { &pw_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1cfh = { &res_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1cfh = { &temp_res_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1cfh = { &cyc_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1cfh = { &off_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1cfh = { &alpha_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1cfh = { &thk_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1cfh = { &gscale_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1cfh = { &flip_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1cfh = { &wg_rf1cfh,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf2cfh = { &a_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2cfh = { &ia_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2cfh = { &pw_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2cfh = { &res_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2cfh = { &cyc_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2cfh = { &off_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2cfh = { &alpha_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2cfh = { &wg_rf2cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf3cfh = { &a_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf3cfh = { &ia_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf3cfh = { &pw_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf3cfh = { &res_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf3cfh = { &cyc_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf3cfh = { &off_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf3cfh = { &alpha_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf3cfh = { &wg_rf3cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxrf2cfh = { &a_gxrf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxrf2cfh = { &ia_gxrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrf2cfha = { &pw_gxrf2cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrf2cfhd = { &pw_gxrf2cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrf2cfh = { &pw_gxrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxrf2cfh = { &wg_gxrf2cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf2cfh = { &a_gyrf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf2cfh = { &ia_gyrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2cfha = { &pw_gyrf2cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2cfhd = { &pw_gyrf2cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2cfh = { &pw_gyrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf2cfh = { &wg_gyrf2cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2lcfh = { &a_gzrf2lcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2lcfh = { &ia_gzrf2lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lcfha = { &pw_gzrf2lcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lcfhd = { &pw_gzrf2lcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lcfh = { &pw_gzrf2lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2lcfh = { &wg_gzrf2lcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2rcfh = { &a_gzrf2rcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2rcfh = { &ia_gzrf2rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rcfha = { &pw_gzrf2rcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rcfhd = { &pw_gzrf2rcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rcfh = { &pw_gzrf2rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2rcfh = { &wg_gzrf2rcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf3cfh = { &a_gyrf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf3cfh = { &ia_gyrf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf3cfha = { &pw_gyrf3cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf3cfhd = { &pw_gyrf3cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf3cfh = { &pw_gyrf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf3cfh = { &wg_gyrf3cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf3lcfh = { &a_gzrf3lcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf3lcfh = { &ia_gzrf3lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3lcfha = { &pw_gzrf3lcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3lcfhd = { &pw_gzrf3lcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3lcfh = { &pw_gzrf3lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf3lcfh = { &wg_gzrf3lcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf3rcfh = { &a_gzrf3rcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf3rcfh = { &ia_gzrf3rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3rcfha = { &pw_gzrf3rcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3rcfhd = { &pw_gzrf3rcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3rcfh = { &pw_gzrf3rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf3rcfh = { &wg_gzrf3rcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1cfh = { &a_gy1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1cfh = { &ia_gy1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cfha = { &pw_gy1cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cfhd = { &pw_gy1cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cfh = { &pw_gy1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1cfh = { &wg_gy1cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1cfh = { &a_gx1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1cfh = { &ia_gx1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cfha = { &pw_gx1cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cfhd = { &pw_gx1cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cfh = { &pw_gx1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1cfh = { &wg_gx1cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_cfh_fid = { &filter_cfh_fid, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gykcfh = { &a_gykcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykcfh = { &ia_gykcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfha = { &pw_gykcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfhd = { &pw_gykcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfh = { &pw_gykcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykcfh = { &wg_gykcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_contrfhubsel = { &ia_contrfhubsel, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_contrfsel = { &ia_contrfsel, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pw_csw_wait = { &pw_csw_wait, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_csw_wait = { &wg_csw_wait,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1ftg = { &a_gzrf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1ftg = { &ia_gzrf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1ftga = { &pw_gzrf1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1ftgd = { &pw_gzrf1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1ftg = { &pw_gzrf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1ftg = { &a_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1ftg = { &ia_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1ftg = { &pw_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1ftg = { &res_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1ftg = { &temp_res_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1ftg = { &cyc_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1ftg = { &off_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1ftg = { &alpha_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1ftg = { &thk_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1ftg = { &gscale_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1ftg = { &flip_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1ftg = { &wg_rf1ftg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1ftg = { &a_gz1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1ftg = { &ia_gz1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1ftga = { &pw_gz1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1ftgd = { &pw_gz1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1ftg = { &pw_gz1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1ftg = { &wg_gz1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2ftg = { &a_gzrf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2ftg = { &ia_gzrf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2ftga = { &pw_gzrf2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2ftgd = { &pw_gzrf2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2ftg = { &pw_gzrf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2ftg = { &a_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2ftg = { &ia_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2ftg = { &pw_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2ftg = { &res_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf2ftg = { &temp_res_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2ftg = { &cyc_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2ftg = { &off_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2ftg = { &alpha_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2ftg = { &thk_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2ftg = { &gscale_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2ftg = { &flip_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2ftg = { &wg_rf2ftg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz2ftg = { &a_gz2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz2ftg = { &ia_gz2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2ftga = { &pw_gz2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2ftgd = { &pw_gz2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2ftg = { &pw_gz2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz2ftg = { &wg_gz2ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf3ftg = { &a_gzrf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf3ftg = { &ia_gzrf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3ftga = { &pw_gzrf3ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3ftgd = { &pw_gzrf3ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3ftg = { &pw_gzrf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf3ftg = { &a_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf3ftg = { &ia_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf3ftg = { &pw_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf3ftg = { &res_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf3ftg = { &temp_res_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf3ftg = { &cyc_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf3ftg = { &off_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf3ftg = { &alpha_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf3ftg = { &thk_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf3ftg = { &gscale_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf3ftg = { &flip_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf3ftg = { &wg_rf3ftg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz3ftg = { &a_gz3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz3ftg = { &ia_gz3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz3ftga = { &pw_gz3ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz3ftgd = { &pw_gz3ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz3ftg = { &pw_gz3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz3ftg = { &wg_gz3ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1ftg = { &a_gx1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1ftg = { &ia_gx1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1ftga = { &pw_gx1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1ftgd = { &pw_gx1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1ftg = { &pw_gx1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1ftg = { &wg_gx1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1bftg = { &a_gx1bftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1bftg = { &ia_gx1bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bftga = { &pw_gx1bftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bftgd = { &pw_gx1bftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bftg = { &pw_gx1bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1bftg = { &wg_gx1bftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw1ftg = { &a_gxw1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw1ftg = { &ia_gxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1ftga = { &pw_gxw1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1ftgd = { &pw_gxw1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1ftg = { &pw_gxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw1ftg = { &wg_gxw1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_postgxw1ftg = { &a_postgxw1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_postgxw1ftg = { &ia_postgxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_postgxw1ftga = { &pw_postgxw1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_postgxw1ftgd = { &pw_postgxw1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_postgxw1ftg = { &pw_postgxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_postgxw1ftg = { &wg_postgxw1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1ftg = { &filter_echo1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gz2bftg = { &a_gz2bftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz2bftg = { &ia_gz2bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2bftga = { &pw_gz2bftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2bftgd = { &pw_gz2bftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2bftg = { &pw_gz2bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz2bftg = { &wg_gz2bftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx2ftg = { &a_gx2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx2ftg = { &ia_gx2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2ftga = { &pw_gx2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2ftgd = { &pw_gx2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2ftg = { &pw_gx2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx2ftg = { &wg_gx2ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw2ftg = { &a_gxw2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw2ftg = { &ia_gxw2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftga = { &pw_gxw2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftgd = { &pw_gxw2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftg = { &pw_gxw2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw2ftg = { &wg_gxw2ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx2test = { &a_gx2test, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx2test = { &ia_gx2test, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2testa = { &pw_gx2testa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2testd = { &pw_gx2testd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2test = { &pw_gx2test, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx2test = { &wg_gx2test,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo2ftg = { &filter_echo2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrf1xtg = { &a_gzrf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1xtg = { &ia_gzrf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1xtga = { &pw_gzrf1xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1xtgd = { &pw_gzrf1xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1xtg = { &pw_gzrf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1xtg = { &a_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1xtg = { &ia_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1xtg = { &pw_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1xtg = { &res_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1xtg = { &temp_res_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1xtg = { &cyc_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1xtg = { &off_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1xtg = { &alpha_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1xtg = { &thk_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1xtg = { &gscale_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1xtg = { &flip_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1xtg = { &wg_rf1xtg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykxtgl = { &a_gykxtgl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykxtgl = { &ia_gykxtgl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgla = { &pw_gykxtgla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgld = { &pw_gykxtgld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgl = { &pw_gykxtgl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykxtgl = { &wg_gykxtgl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };



_cvfloat  _a_rf3xtg = { &a_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf3xtg = { &ia_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf3xtg = { &pw_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf3xtg = { &res_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf3xtg = { &off_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf3xtg = { &alpha_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf3xtg = { &gscale_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf3xtg = { &flip_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_phs_rf3xtg = { &ia_phs_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf3xtg = { &wg_rf3xtg,  0,  WF_MAX_PROCESSORS*2-1,  
                                            TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1xtg = { &a_gz1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1xtg = { &ia_gz1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1xtga = { &pw_gz1xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1xtgd = { &pw_gz1xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1xtg = { &pw_gz1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1xtg = { &wg_gz1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2xtg = { &a_gzrf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2xtg = { &ia_gzrf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2xtga = { &pw_gzrf2xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2xtgd = { &pw_gzrf2xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2xtg = { &pw_gzrf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2xtg = { &a_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2xtg = { &ia_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2xtg = { &pw_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2xtg = { &res_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf2xtg = { &temp_res_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2xtg = { &cyc_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2xtg = { &off_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2xtg = { &alpha_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2xtg = { &thk_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2xtg = { &gscale_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2xtg = { &flip_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2xtg = { &wg_rf2xtg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz2xtg = { &a_gz2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz2xtg = { &ia_gz2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2xtga = { &pw_gz2xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2xtgd = { &pw_gz2xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2xtg = { &pw_gz2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz2xtg = { &wg_gz2xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };



_cvfloat  _a_rf4xtg = { &a_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf4xtg = { &ia_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf4xtg = { &pw_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf4xtg = { &res_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf4xtg = { &off_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf4xtg = { &alpha_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf4xtg = { &gscale_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf4xtg = { &flip_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_phs_rf4xtg = { &ia_phs_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf4xtg = { &wg_rf4xtg,  0,  WF_MAX_PROCESSORS*2-1,  
                                            TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykxtgr = { &a_gykxtgr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykxtgr = { &ia_gykxtgr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgra = { &pw_gykxtgra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgrd = { &pw_gykxtgrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgr = { &pw_gykxtgr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykxtgr = { &wg_gykxtgr,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1bxtg = { &a_gx1bxtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1bxtg = { &ia_gx1bxtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bxtga = { &pw_gx1bxtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bxtgd = { &pw_gx1bxtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bxtg = { &pw_gx1bxtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1bxtg = { &wg_gx1bxtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw1xtg = { &a_gxw1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw1xtg = { &ia_gxw1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1xtga = { &pw_gxw1xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1xtgd = { &pw_gxw1xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1xtg = { &pw_gxw1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw1xtg = { &wg_gxw1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1xtg = { &filter_echo1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrf1as = { &a_gzrf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1as = { &ia_gzrf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1asa = { &pw_gzrf1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1asd = { &pw_gzrf1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1as = { &pw_gzrf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1as = { &a_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1as = { &ia_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1as = { &pw_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1as = { &res_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1as = { &temp_res_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1as = { &cyc_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1as = { &off_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1as = { &alpha_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1as = { &thk_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1as = { &gscale_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1as = { &flip_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1as = { &wg_rf1as,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1as = { &a_gz1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1as = { &ia_gz1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1asa = { &pw_gz1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1asd = { &pw_gz1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1as = { &pw_gz1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1as = { &wg_gz1as,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwas = { &a_gxwas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwas = { &ia_gxwas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwasa = { &pw_gxwasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwasd = { &pw_gxwasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwas = { &pw_gxwas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwas = { &wg_gxwas,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1as = { &filter_echo1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx1as = { &a_gx1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1as = { &ia_gx1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1asa = { &pw_gx1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1asd = { &pw_gx1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1as = { &pw_gx1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1as = { &wg_gx1as,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1as = { &a_gy1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1asa = { &a_gy1asa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1asb = { &a_gy1asb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1as = { &ia_gy1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1aswa = { &ia_gy1aswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1aswb = { &ia_gy1aswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1asa = { &pw_gy1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1asd = { &pw_gy1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1as = { &pw_gy1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1as = { &wg_gy1as,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1ras = { &a_gy1ras, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rasa = { &a_gy1rasa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rasb = { &a_gy1rasb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1ras = { &ia_gy1ras, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1raswa = { &ia_gy1raswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1raswb = { &ia_gy1raswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rasa = { &pw_gy1rasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rasd = { &pw_gy1rasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1ras = { &pw_gy1ras, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1ras = { &wg_gy1ras,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkas = { &a_gxkas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkas = { &ia_gxkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkasa = { &pw_gxkasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkasd = { &pw_gxkasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkas = { &pw_gxkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkas = { &wg_gxkas,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkas = { &a_gzkas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkas = { &ia_gzkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkasa = { &pw_gzkasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkasd = { &pw_gzkasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkas = { &pw_gzkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkas = { &wg_gzkas,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_xdixon = { &a_xdixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_xdixon = { &ia_xdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xdixon = { &pw_xdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xdixon = { &wg_xdixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_ydixon = { &a_ydixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_ydixon = { &ia_ydixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ydixon = { &pw_ydixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ydixon = { &wg_ydixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_zdixon = { &a_zdixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_zdixon = { &ia_zdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_zdixon = { &pw_zdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_zdixon = { &wg_zdixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_sdixon = { &a_sdixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_sdixon = { &ia_sdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_sdixon = { &pw_sdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sdixon = { &wg_sdixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_sdixon2 = { &a_sdixon2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_sdixon2 = { &ia_sdixon2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_sdixon2 = { &pw_sdixon2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sdixon2 = { &wg_sdixon2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };

int _temp0_grad_spec_ctrl;
float _temp1_glimit;
float _temp2_srate;
int _temp3_initnewgeo;
int _temp4_initnewgeo;
float _temp5_a_gxw;
int _temp6_pw_gxw;
int _temp7_pw_gxwad;
float _temp8_a_gyb;
int _temp9_pw_gyb;
int _temp10_pw_gyba;
int _temp11_temprhfrsize;
int _temp12_samp_period;
int _temp13_pw_gxgap;
int _temp14_pw_rfsx1;
float _temp15_a_rfsx1;
float _temp16_flip_rfsx1;
int _temp17_pw_rfsx2;
float _temp18_a_rfsx2;
float _temp19_flip_rfsx2;
int _temp20_pw_rfsy1;
float _temp21_a_rfsy1;
float _temp22_flip_rfsy1;
int _temp23_pw_rfsy2;
float _temp24_a_rfsy2;
float _temp25_flip_rfsy2;
int _temp26_pw_rfsz1;
float _temp27_a_rfsz1;
float _temp28_flip_rfsz1;
int _temp29_pw_rfsz2;
float _temp30_a_rfsz2;
float _temp31_flip_rfsz2;
int _temp32_pw_rfse1;
float _temp33_a_rfse1;
float _temp34_flip_rfse1;
int _temp35_pw_rfse2;
float _temp36_a_rfse2;
float _temp37_flip_rfse2;
int _temp38_pw_rfse3;
float _temp39_a_rfse3;
float _temp40_flip_rfse3;
int _temp41_pw_rfse4;
float _temp42_a_rfse4;
float _temp43_flip_rfse4;
int _temp44_pw_rfse5;
float _temp45_a_rfse5;
float _temp46_flip_rfse5;
int _temp47_pw_rfse6;
float _temp48_a_rfse6;
float _temp49_flip_rfse6;
int _temp50_pw_rfsx1;
float _temp51_a_rfsx1;
float _temp52_flip_rfsx1;
int _temp53_pw_rfsx2;
float _temp54_a_rfsx2;
float _temp55_flip_rfsx2;
int _temp56_pw_rfsy1;
float _temp57_a_rfsy1;
float _temp58_flip_rfsy1;
int _temp59_pw_rfsy2;
float _temp60_a_rfsy2;
float _temp61_flip_rfsy2;
int _temp62_pw_rfsz1;
float _temp63_a_rfsz1;
float _temp64_flip_rfsz1;
int _temp65_pw_rfsz2;
float _temp66_a_rfsz2;
float _temp67_flip_rfsz2;
int _temp68_pw_rfse1;
float _temp69_a_rfse1;
float _temp70_flip_rfse1;
int _temp71_pw_rfse2;
float _temp72_a_rfse2;
float _temp73_flip_rfse2;
int _temp74_pw_rfse3;
float _temp75_a_rfse3;
float _temp76_flip_rfse3;
int _temp77_pw_rfse4;
float _temp78_a_rfse4;
float _temp79_flip_rfse4;
int _temp80_pw_rfse5;
float _temp81_a_rfse5;
float _temp82_flip_rfse5;
int _temp83_pw_rfse6;
float _temp84_a_rfse6;
float _temp85_flip_rfse6;
int _temp86_pw_rfsx1;
float _temp87_a_rfsx1;
float _temp88_flip_rfsx1;
int _temp89_pw_rfsx2;
float _temp90_a_rfsx2;
float _temp91_flip_rfsx2;
int _temp92_pw_rfsy1;
float _temp93_a_rfsy1;
float _temp94_flip_rfsy1;
int _temp95_pw_rfsy2;
float _temp96_a_rfsy2;
float _temp97_flip_rfsy2;
int _temp98_pw_rfsz1;
float _temp99_a_rfsz1;
float _temp100_flip_rfsz1;
int _temp101_pw_rfsz2;
float _temp102_a_rfsz2;
float _temp103_flip_rfsz2;
int _temp104_pw_rfse1;
float _temp105_a_rfse1;
float _temp106_flip_rfse1;
int _temp107_pw_rfse2;
float _temp108_a_rfse2;
float _temp109_flip_rfse2;
int _temp110_pw_rfse3;
float _temp111_a_rfse3;
float _temp112_flip_rfse3;
int _temp113_pw_rfse4;
float _temp114_a_rfse4;
float _temp115_flip_rfse4;
int _temp116_pw_rfse5;
float _temp117_a_rfse5;
float _temp118_flip_rfse5;
int _temp119_pw_rfse6;
float _temp120_a_rfse6;
float _temp121_flip_rfse6;
int _temp122_pw_gxkse1a;
int _temp123_pw_gxkse2a;
int _temp124_pw_gxkse3a;
int _temp125_pw_gxkse4a;
int _temp126_pw_gxkse5a;
int _temp127_pw_gxkse6a;
int _temp128_pw_gxksx1a;
int _temp129_pw_gxksx2a;
int _temp130_pw_gxksy1a;
int _temp131_pw_gxksy2a;
int _temp132_pw_gxksz1a;
int _temp133_pw_gxksz2a;
int _temp134_pw_gxkse1d;
int _temp135_pw_gxkse2d;
int _temp136_pw_gxkse3d;
int _temp137_pw_gxkse4d;
int _temp138_pw_gxkse5d;
int _temp139_pw_gxkse6d;
int _temp140_pw_gxksx1d;
int _temp141_pw_gxksx2d;
int _temp142_pw_gxksy1d;
int _temp143_pw_gxksy2d;
int _temp144_pw_gxksz1d;
int _temp145_pw_gxksz2d;
int _temp146_pw_gxkse1;
int _temp147_pw_gxkse2;
int _temp148_pw_gxkse3;
int _temp149_pw_gxkse4;
int _temp150_pw_gxkse5;
int _temp151_pw_gxkse6;
int _temp152_pw_gxksx1;
int _temp153_pw_gxksx2;
int _temp154_pw_gxksy1;
int _temp155_pw_gxksy2;
int _temp156_pw_gxksz1;
int _temp157_pw_gxksz2;
float _temp158_a_gxkse1;
float _temp159_a_gxkse2;
float _temp160_a_gxkse3;
float _temp161_a_gxkse4;
float _temp162_a_gxkse5;
float _temp163_a_gxkse6;
float _temp164_a_gxksx1;
float _temp165_a_gxksx2;
float _temp166_a_gxksy1;
float _temp167_a_gxksy2;
float _temp168_a_gxksz1;
float _temp169_a_gxksz2;
int _temp170_pw_rf1;
float _temp171_a_rf1;
float _temp172_flip_rf1;
int _temp173_res_rf1;
int _temp174_wg_rf1;
int _temp175_pw_rf1;
float _temp176_a_rf1;
float _temp177_flip_rf1;
int _temp178_res_rf1;
int _temp179_wg_rf1;
int _temp180_pw_rf1;
float _temp181_a_rf1;
float _temp182_flip_rf1;
int _temp183_res_rf1;
int _temp184_wg_rf1;
int _temp185_pw_rf1;
float _temp186_a_rf1;
float _temp187_flip_rf1;
int _temp188_res_rf1;
int _temp189_wg_rf1;
int _temp190_pw_rf1;
float _temp191_a_rf1;
float _temp192_flip_rf1;
int _temp193_res_rf1;
int _temp194_wg_rf1;
int _temp195_pw_rf1;
float _temp196_a_rf1;
float _temp197_flip_rf1;
int _temp198_res_rf1;
int _temp199_wg_rf1;
int _temp200_pw_rf1;
float _temp201_a_rf1;
float _temp202_flip_rf1;
int _temp203_res_rf1;
int _temp204_wg_rf1;
int _temp205_pw_rf1;
float _temp206_a_rf1;
float _temp207_flip_rf1;
int _temp208_res_rf1;
int _temp209_wg_rf1;
int _temp210_pw_rf1;
float _temp211_a_rf1;
float _temp212_flip_rf1;
int _temp213_res_rf1;
int _temp214_wg_rf1;
int _temp215_pw_rf1;
float _temp216_a_rf1;
float _temp217_flip_rf1;
int _temp218_res_rf1;
int _temp219_wg_rf1;
int _temp220_pw_rf1;
float _temp221_a_rf1;
float _temp222_flip_rf1;
int _temp223_res_rf1;
int _temp224_wg_rf1;
int _temp225_pw_rf1;
float _temp226_a_rf1;
float _temp227_flip_rf1;
int _temp228_res_rf1;
int _temp229_wg_rf1;
int _temp230_pw_rf1;
float _temp231_a_rf1;
float _temp232_flip_rf1;
int _temp233_res_rf1;
int _temp234_wg_rf1;
int _temp235_pw_rf1;
float _temp236_a_rf1;
float _temp237_flip_rf1;
int _temp238_res_rf1;
int _temp239_wg_rf1;
int _temp240_pw_rf1;
float _temp241_a_rf1;
float _temp242_flip_rf1;
int _temp243_res_rf1;
int _temp244_wg_rf1;
int _temp245_pw_rf1;
float _temp246_a_rf1;
float _temp247_flip_rf1;
int _temp248_res_rf1;
int _temp249_wg_rf1;
int _temp250_pw_rf1;
float _temp251_a_rf1;
float _temp252_flip_rf1;
int _temp253_res_rf1;
int _temp254_wg_rf1;
int _temp255_pw_rf1;
float _temp256_a_rf1;
float _temp257_flip_rf1;
int _temp258_res_rf1;
int _temp259_wg_rf1;
int _temp260_pw_rf1;
float _temp261_a_rf1;
float _temp262_flip_rf1;
int _temp263_res_rf1;
int _temp264_wg_rf1;
int _temp265_pw_rf1;
float _temp266_a_rf1;
float _temp267_flip_rf1;
int _temp268_res_rf1;
int _temp269_wg_rf1;
int _temp270_pw_rf1;
float _temp271_a_rf1;
float _temp272_flip_rf1;
int _temp273_res_rf1;
int _temp274_wg_rf1;
int _temp275_pw_rf1;
float _temp276_a_rf1;
float _temp277_flip_rf1;
int _temp278_res_rf1;
int _temp279_wg_rf1;
int _temp280_pw_rf1;
float _temp281_a_rf1;
float _temp282_flip_rf1;
int _temp283_res_rf1;
int _temp284_wg_rf1;
int _temp285_pw_rf1;
float _temp286_a_rf1;
float _temp287_flip_rf1;
int _temp288_res_rf1;
int _temp289_wg_rf1;
int _temp290_pw_rf1;
float _temp291_a_rf1;
float _temp292_flip_rf1;
int _temp293_res_rf1;
int _temp294_wg_rf1;
int _temp295_pw_rf1;
float _temp296_a_rf1;
float _temp297_flip_rf1;
int _temp298_res_rf1;
int _temp299_wg_rf1;
int _temp300_pw_rf1;
float _temp301_a_rf1;
float _temp302_flip_rf1;
int _temp303_res_rf1;
int _temp304_wg_rf1;
int _temp305_pw_rf1;
float _temp306_a_rf1;
float _temp307_flip_rf1;
int _temp308_res_rf1;
int _temp309_wg_rf1;
int _temp310_pw_rf1;
float _temp311_a_rf1;
float _temp312_flip_rf1;
int _temp313_res_rf1;
int _temp314_wg_rf1;
int _temp315_pw_rf1;
float _temp316_a_rf1;
float _temp317_flip_rf1;
int _temp318_res_rf1;
int _temp319_wg_rf1;
int _temp320_pw_rf1;
float _temp321_a_rf1;
float _temp322_flip_rf1;
int _temp323_res_rf1;
int _temp324_wg_rf1;
int _temp325_grad_spec_ctrl;
float _temp326_glimit;
float _temp327_srate;
float _temp328_flip_rf0;
float _temp329_flip_rf0;
int _temp330_specspat_temp;
int _temp331_res_temp;
int _temp332_nom_pw_temp;
float _temp333_nom_flip_temp;
float _temp334_abswidth_temp;
float _temp335_effwidth_temp;
float _temp336_area_temp;
float _temp337_dtycyc_temp;
float _temp338_maxpw_temp;
float _temp339_max_b1_temp;
float _temp340_max_int_b1_sqr_temp;
float _temp341_max_rms_b1_temp;
float _temp342_nom_bw_temp;
int _temp343_isodelay_temp;
float _temp344_a_gzs_temp;
float _temp345_nom_thk_temp;
int _temp346_specspat_temp;
int _temp347_res_temp;
int _temp348_nom_pw_temp;
float _temp349_nom_flip_temp;
float _temp350_abswidth_temp;
float _temp351_effwidth_temp;
float _temp352_area_temp;
float _temp353_dtycyc_temp;
float _temp354_maxpw_temp;
float _temp355_max_b1_temp;
float _temp356_max_int_b1_sqr_temp;
float _temp357_max_rms_b1_temp;
float _temp358_nom_bw_temp;
int _temp359_isodelay_temp;
float _temp360_a_gzs_temp;
float _temp361_nom_thk_temp;
int _temp362_specspat_temp;
int _temp363_res_temp;
int _temp364_nom_pw_temp;
float _temp365_nom_flip_temp;
float _temp366_abswidth_temp;
float _temp367_effwidth_temp;
float _temp368_area_temp;
float _temp369_dtycyc_temp;
float _temp370_maxpw_temp;
float _temp371_max_b1_temp;
float _temp372_max_int_b1_sqr_temp;
float _temp373_max_rms_b1_temp;
float _temp374_nom_bw_temp;
int _temp375_isodelay_temp;
float _temp376_a_gzs_temp;
float _temp377_nom_thk_temp;
int _temp378_specspat_temp;
int _temp379_res_temp;
int _temp380_nom_pw_temp;
float _temp381_nom_flip_temp;
float _temp382_abswidth_temp;
float _temp383_effwidth_temp;
float _temp384_area_temp;
float _temp385_dtycyc_temp;
float _temp386_maxpw_temp;
float _temp387_max_b1_temp;
float _temp388_max_int_b1_sqr_temp;
float _temp389_max_rms_b1_temp;
float _temp390_nom_bw_temp;
int _temp391_isodelay_temp;
float _temp392_a_gzs_temp;
float _temp393_nom_thk_temp;
int _temp394_pw_rf1;
float _temp395_a_rf1;
float _temp396_flip_rf1;
int _temp397_res_rf1;
int _temp398_wg_rf1;
int _temp399_pw_rf2;
float _temp400_a_rf2;
float _temp401_flip_rf2;
int _temp402_res_rf2;
int _temp403_wg_rf2;
int _temp404_pw_rf1;
float _temp405_a_rf1;
float _temp406_flip_rf1;
int _temp407_res_rf1;
int _temp408_wg_rf1;
int _temp409_pw_rf1;
float _temp410_a_rf1;
float _temp411_flip_rf1;
float _temp412_target;
int _temp413_pw_rf2;
float _temp414_a_rf2;
float _temp415_flip_rf2;
int _temp416_res_rf2;
int _temp417_wg_rf2;
int _temp418_pw_rf1;
float _temp419_a_rf1;
float _temp420_flip_rf1;
int _temp421_res_rf1;
int _temp422_wg_rf1;
float _temp423_target;
int _temp424_seq_type;
float _temp425_a_gzrf1;
int _temp426_pw_gzrf1d;
float _temp427_a_gzrf2;
float _temp428_a_gyrf2iv;
int _temp429_pw_gyrf2iva;
int _temp430_pw_gzrf2l1a;
int _temp431_pw_gzrf2l1d;
float _temp432_target;
int _temp433_pulsepos;
float _temp434_zeromoment;
float _temp435_firstmoment;
float _temp436_zeromomentsum;
float _temp437_firstmomentsum;
int _temp438_pulsepos;
float _temp439_zeromoment;
float _temp440_firstmoment;
float _temp441_zeromomentsum;
float _temp442_firstmomentsum;
int _temp443_pulsepos;
float _temp444_zeromoment;
float _temp445_firstmoment;
float _temp446_zeromomentsum;
float _temp447_firstmomentsum;
int _temp448_pulsepos;
float _temp449_zeromoment;
float _temp450_firstmoment;
float _temp451_zeromomentsum;
float _temp452_firstmomentsum;
int _temp453_pulsepos;
float _temp454_zeromoment;
float _temp455_firstmoment;
float _temp456_zeromomentsum;
float _temp457_firstmomentsum;
int _temp458_pulsepos;
float _temp459_zeromoment;
float _temp460_firstmoment;
float _temp461_zeromomentsum;
float _temp462_firstmomentsum;
int _temp463_pulsepos;
float _temp464_zeromoment;
float _temp465_firstmoment;
float _temp466_zeromomentsum;
float _temp467_firstmomentsum;
int _temp468_pulsepos;
float _temp469_zeromoment;
float _temp470_firstmoment;
float _temp471_zeromomentsum;
float _temp472_firstmomentsum;
int _temp473_pulsepos;
float _temp474_zeromoment;
float _temp475_firstmoment;
float _temp476_zeromomentsum;
float _temp477_firstmomentsum;
int _temp478_pulsepos;
float _temp479_zeromoment;
float _temp480_firstmoment;
float _temp481_zeromomentsum;
float _temp482_firstmomentsum;
float _temp483_a_gz1;
int _temp484_pw_gz1a;
int _temp485_pw_gz1;
int _temp486_pw_gz1d;
float _temp487_a_gzmn;
int _temp488_pw_gzmna;
int _temp489_pw_gzmn;
int _temp490_pw_gzmnd;
float _temp491_a_gz1;
int _temp492_pw_gz1;
int _temp493_pw_gz1a;
int _temp494_pw_gz1d;
int _temp495_pw_gzrf2a;
int _temp496_cs_sattime;
int _temp497_sp_sattime;
int _temp498_minesp;
float _temp499_touch_menc;
float _temp500_target;
int _temp501_rtime;
int _temp502_ftime;
float _temp503_a_gyb;
int _temp504_pw_gyba;
int _temp505_pw_gyb;
int _temp506_pw_gybd;
float _temp507_a_gy1a;
float _temp508_a_gy1b;
int _temp509_pw_gy1;
int _temp510_pw_gy1a;
int _temp511_pw_gy1d;
float _temp512_a_gy1a;
float _temp513_a_gy1b;
int _temp514_pw_gy1;
int _temp515_pw_gy1a;
int _temp516_pw_gy1d;
int _temp517_pulsepos;
float _temp518_zeromoment;
float _temp519_firstmoment;
float _temp520_zeromomentsum;
float _temp521_firstmomentsum;
int _temp522_pulsepos;
float _temp523_zeromoment;
float _temp524_firstmoment;
float _temp525_zeromomentsum;
float _temp526_firstmomentsum;
int _temp527_pulsepos;
float _temp528_zeromoment;
float _temp529_firstmoment;
float _temp530_zeromomentsum;
float _temp531_firstmomentsum;
int _temp532_pw_gymn2a;
int _temp533_pw_gymn2;
int _temp534_pw_gymn2d;
float _temp535_a_gymn2;
float _temp536_a_gzrf0;
int _temp537_pw_gzrf0a;
float _temp538_a_gyk0;
int _temp539_pw_gyk0a;
int _temp540_pw_gyk0;
int _temp541_pw_gyk0d;
int _temp542_avail_image_time;
int _temp543_max_bamslice;
float _temp544_ta_gxwn;
int _temp545_pw_gy1a;
int _temp546_pw_gy1d;
int _temp547_pw_gy1;
float _temp548_GAM;
int _temp549_pibbandfilt;
int _temp550_pixmtband;
float _temp551_GAM;
int _temp552_pibbandfilt;
int _temp553_pixmtband;
int _temp554_wg_rf1;
int _temp555_wg_omegarf1;
int _temp556_wg_omegaro1;
int _temp557_wg_phaserf1;
int _temp558_wg_rf1mps1;
int _temp559_wg_rf2mps1;
int _temp560_wg_rf1cfl;
int _temp561_wg_rf0cfh;
int _temp562_wg_omegarf0cfh;
int _temp563_wg_rf1cfh;
int _temp564_wg_rf2cfh;
int _temp565_wg_rf3cfh;
int _temp566_wg_rf1ftg;
int _temp567_wg_rf2ftg;
int _temp568_wg_rf3ftg;
int _temp569_wg_rf1as;
int _temp570_min_seqgrad;
int _temp571_min_seqrfamp;
int _temp572_max_slicesar;
int _temp573_tmin_total;
int _temp574_tmin_total;
int _temp575_acqs;
int _temp576_slquant_per_trig;
int _temp577_psd_tseq;
int _temp578_max_seqtime;
float _temp579_max_ss_fa;
float _temp580_a_gzrf1;
int _temp581_pulsepos;
float _temp582_gz1_zero_moment;
float _temp583_gz1_first_moment;
int _temp584_pulsepos;
float _temp585_gz1_zero_moment;
float _temp586_gz1_first_moment;
int _temp587_pw_gzrf1a;
int _temp588_pw_gzrf1d;
int _temp589_pw_gzrf1;
int _temp590_pw_ss_rampz;
int _temp591_pw_ss_rampz;
int _temp592_pw_constant;
float _temp593_a_gy1a;
float _temp594_a_gy1b;
int _temp595_pw_gy1;
int _temp596_pw_gy1a;
int _temp597_pw_gy1d;
int _temp598_pulsepos;
float _temp599_zeromoment;
float _temp600_firstmoment;
float _temp601_zeromomentsum;
float _temp602_firstmomentsum;
int _temp603_pulsepos;
float _temp604_zeromoment;
float _temp605_firstmoment;
float _temp606_zeromomentsum;
float _temp607_firstmomentsum;
int _temp608_pulsepos;
float _temp609_zeromoment;
float _temp610_firstmoment;
float _temp611_zeromomentsum;
float _temp612_firstmomentsum;
int _temp613_pw_gymn2a;
int _temp614_pw_gymn2;
int _temp615_pw_gymn2d;
float _temp616_a_gymn2;
float _temp617_a_gy1a;
float _temp618_a_gy1b;
int _temp619_pw_gy1;
int _temp620_pw_gy1a;
int _temp621_pw_gy1d;
int _temp622_pulsepos;
float _temp623_zeromoment;
float _temp624_firstmoment;
float _temp625_zeromomentsum;
float _temp626_firstmomentsum;
int _temp627_pulsepos;
float _temp628_zeromoment;
float _temp629_firstmoment;
float _temp630_zeromomentsum;
float _temp631_firstmomentsum;
int _temp632_pulsepos;
float _temp633_zeromoment;
float _temp634_firstmoment;
float _temp635_zeromomentsum;
float _temp636_firstmomentsum;
int _temp637_pw_gymn2a;
int _temp638_pw_gymn2;
int _temp639_pw_gymn2d;
float _temp640_a_gymn2;
int _temp641_rhdacqctrl;
int _temp642_rhdacqctrl;
int _temp643_pre_pass;
int _temp644_pre_slice;
int _temp645_sar_amp;
int _temp646_sar_width;
int _temp647_sar_cycle;
float _temp648_bc_delx;
float _temp649_bc_dely;
float _temp650_bc_delz;
float _temp651_a_gzrfcssat;
float _temp652_a_gzrfcs;
int _temp653_pw_gzrfcssat_rampz;
int _temp654_pw_gzrfcssat_rampz;
int _temp655_pw_gzrfcssat_constant;
float _temp656_a_gzrfcssat_wrf;
int _temp657_pw_gzrfcssat_rampz_norf;
int _temp658_pw_gzrfcssat_rampz_norf;
int _temp659_pw_gzrfcssat_constant_norf;
float _temp660_a_gzrfcssat;
int _temp661_pw_rfse1;
int _temp662_sat_newgeo;
int _temp663_res_rfse1;
int _temp664_pw_rfse1;
int _temp665_pw_gzrfse1;
int _temp666_pw_gzrfse1a;
int _temp667_pw_gzrfse1d;
float _temp668_a_gzrfse1;
int _temp669_sat_newgeo;
int _temp670_res_rfse2;
int _temp671_pw_rfse2;
int _temp672_pw_gzrfse2;
int _temp673_pw_gzrfse2a;
int _temp674_pw_gzrfse2d;
float _temp675_a_gzrfse2;
int _temp676_pw_rfse3;
int _temp677_sat_newgeo;
int _temp678_res_rfse3;
int _temp679_pw_rfse3;
int _temp680_pw_gzrfse3;
int _temp681_pw_gzrfse3a;
int _temp682_pw_gzrfse3d;
float _temp683_a_gzrfse3;
int _temp684_sat_newgeo;
int _temp685_res_rfse4;
int _temp686_pw_rfse4;
int _temp687_pw_gzrfse4;
int _temp688_pw_gzrfse4a;
int _temp689_pw_gzrfse4d;
float _temp690_a_gzrfse4;
int _temp691_pw_rfse5;
int _temp692_sat_newgeo;
int _temp693_res_rfse5;
int _temp694_pw_rfse5;
int _temp695_pw_gzrfse5;
int _temp696_pw_gzrfse5a;
int _temp697_pw_gzrfse5d;
float _temp698_a_gzrfse5;
int _temp699_sat_newgeo;
int _temp700_res_rfse6;
int _temp701_pw_rfse6;
int _temp702_pw_gzrfse6;
int _temp703_pw_gzrfse6a;
int _temp704_pw_gzrfse6d;
float _temp705_a_gzrfse6;
int _temp706_pw_rfsx1;
int _temp707_res_rfsx1;
int _temp708_pw_rfsx1;
int _temp709_res_rfsx2;
int _temp710_pw_rfsx2;
int _temp711_pw_gxrfsx1;
int _temp712_pw_gxrfsx1a;
int _temp713_pw_gxrfsx1d;
float _temp714_a_gxrfsx1;
int _temp715_pw_gxrfsx2;
int _temp716_pw_gxrfsx2a;
int _temp717_pw_gxrfsx2d;
float _temp718_a_gxrfsx2;
int _temp719_pw_rfsy1;
int _temp720_res_rfsy1;
int _temp721_pw_rfsy1;
int _temp722_res_rfsy2;
int _temp723_pw_rfsy2;
int _temp724_pw_gyrfsy1;
int _temp725_pw_gyrfsy1a;
int _temp726_pw_gyrfsy1d;
float _temp727_a_gyrfsy1;
int _temp728_pw_gyrfsy2;
int _temp729_pw_gyrfsy2a;
int _temp730_pw_gyrfsy2d;
float _temp731_a_gyrfsy2;
int _temp732_pw_rfsz1;
int _temp733_res_rfsz1;
int _temp734_pw_rfsz1;
int _temp735_res_rfsz2;
int _temp736_pw_rfsz2;
int _temp737_pw_gzrfsz1;
int _temp738_pw_gzrfsz1a;
int _temp739_pw_gzrfsz1d;
float _temp740_a_gzrfsz1;
int _temp741_pw_gzrfsz2;
int _temp742_pw_gzrfsz2a;
int _temp743_pw_gzrfsz2d;
float _temp744_a_gzrfsz2;
int _temp745_off_rfsz1;
int _temp746_off_rfsz2;
int _temp747_off_rfsz1;
int _temp748_off_rfsz2;
float _temp749_GAM;
int _temp750_pibbandfilt;
int _temp751_pixmtband;
int _temp752_ps1_newgeo;
int _temp753_pw_rfcssatcfh;
float _temp754_a_rfcssatcfh;
float _temp755_flip_rfcssatcfh;
int _temp756_pw_rf1cfh;
float _temp757_a_rf1cfh;
float _temp758_flip_rf1cfh;
int _temp759_res_rf1cfh;
int _temp760_wg_rf1cfh;
int _temp761_pw_rf2cfh;
float _temp762_a_rf2cfh;
float _temp763_flip_rf2cfh;
int _temp764_res_rf2cfh;
int _temp765_wg_rf2cfh;
int _temp766_pw_rf3cfh;
float _temp767_a_rf3cfh;
float _temp768_flip_rf3cfh;
int _temp769_res_rf3cfh;
int _temp770_wg_rf3cfh;
int _temp771_pw_rf1cfh;
float _temp772_a_rf1cfh;
float _temp773_flip_rf1cfh;
int _temp774_res_rf1cfh;
int _temp775_wg_rf1cfh;
int _temp776_pw_rf2cfh;
float _temp777_a_rf2cfh;
float _temp778_flip_rf2cfh;
int _temp779_res_rf2cfh;
int _temp780_wg_rf2cfh;
int _temp781_pw_rf3cfh;
float _temp782_a_rf3cfh;
float _temp783_flip_rf3cfh;
int _temp784_res_rf3cfh;
int _temp785_wg_rf3cfh;
int _temp786_pimrsaps1;
int _temp787_pimrsaps2;
int _temp788_pimrsaps3;
int _temp789_pimrsaps4;
int _temp790_pimrsaps5;
int _temp791_pimrsaps6;
int _temp792_pimrsaps7;
int _temp793_pimrsaps8;
int _temp794_pimrsaps9;
int _temp795_pimrsaps10;
int _temp796_pimrsaps11;
int _temp797_pimrsaps12;
int _temp798_pimrsaps13;
int _temp799_pimrsaps14;
int _temp800_pimrsaps15;
int _temp801_as_newgeo;
float _temp802_a_gxkas;
int _temp803_pw_gxkasa;
int _temp804_pw_gxkas;
int _temp805_pw_gxkasd;
float _temp806_a_gzkas;
int _temp807_pw_gzkasa;
int _temp808_pw_gzkas;
int _temp809_pw_gzkasd;
float _temp810_a_gzrf1as;
int _temp811_pw_gzrf1asa;
float _temp812_a_gz1as;
int _temp813_pw_gz1as;
int _temp814_pw_gz1asa;
int _temp815_pw_gz1asd;
float _temp816_a_gxwas;
int _temp817_pw_gxwasa;
float _temp818_a_gx1as;
int _temp819_pw_gx1as;
int _temp820_pw_gx1asa;
int _temp821_pw_gx1asd;
int _temp822_endview_iampas;
float _temp823_a_gy1asa;
float _temp824_a_gy1asb;
int _temp825_pw_gy1as;
int _temp826_pw_gy1asa;
int _temp827_pw_gy1asd;
float _temp828_a_gzrf1mps1;
int _temp829_pw_gzrf1mps1a;
float _temp830_a_gz1mps1;
int _temp831_pw_gz1mps1;
int _temp832_pw_gz1mps1a;
int _temp833_pw_gz1mps1d;
float _temp834_a_gzrf2lmps1;
int _temp835_pw_gzrf2lmps1a;
int _temp836_pw_gzrf2lmps1;
int _temp837_pw_gzrf2lmps1d;
float _temp838_a_gzrf2mps1;
float _temp839_a_gxwmps1;
int _temp840_pw_gxwmps1a;
float _temp841_a_gx1mps1;
int _temp842_pw_gx1mps1;
int _temp843_pw_gx1mps1a;
int _temp844_pw_gx1mps1d;
float _temp845_a_gzrf1cfl;
int _temp846_pw_gzrf1cfla;
float _temp847_a_gz1cfl;
int _temp848_pw_gz1cfl;
int _temp849_pw_gz1cfla;
int _temp850_pw_gz1cfld;
float _temp851_a_gykcfl;
int _temp852_pw_gykcfla;
int _temp853_pw_gykcfl;
int _temp854_pw_gykcfld;
float _temp855_a_gxkrcvn;
int _temp856_pw_gxkrcvna;
int _temp857_pw_gxkrcvn;
int _temp858_pw_gxkrcvnd;
float _temp859_a_gykrcvn;
int _temp860_pw_gykrcvna;
int _temp861_pw_gykrcvn;
int _temp862_pw_gykrcvnd;
float _temp863_a_gzkrcvn;
int _temp864_pw_gzkrcvna;
int _temp865_pw_gzkrcvn;
int _temp866_pw_gzkrcvnd;
int _temp867_pw_gzrf2lcfha;
int _temp868_pw_gzrf2lcfhd;
int _temp869_pw_gzrf2lcfh;
float _temp870_a_gzrf2lcfh;
int _temp871_pw_gzrf2rcfha;
int _temp872_pw_gzrf2rcfhd;
int _temp873_pw_gzrf2rcfh;
float _temp874_a_gzrf2rcfh;
int _temp875_pw_gzrf3rcfha;
int _temp876_pw_gzrf3rcfhd;
int _temp877_pw_gzrf3rcfh;
float _temp878_a_gzrf3rcfh;
int _temp879_pw_rf1cfh;
float _temp880_a_rf1cfh;
float _temp881_flip_rf1cfh;
int _temp882_res_rf1cfh;
int _temp883_wg_rf1cfh;
int _temp884_pw_rf2cfh;
float _temp885_a_rf2cfh;
float _temp886_flip_rf2cfh;
int _temp887_res_rf2cfh;
int _temp888_wg_rf2cfh;
int _temp889_pw_rf3cfh;
float _temp890_a_rf3cfh;
float _temp891_flip_rf3cfh;
int _temp892_res_rf3cfh;
int _temp893_wg_rf3cfh;
int _temp894_pw_rf1cfh;
float _temp895_a_rf1cfh;
float _temp896_flip_rf1cfh;
int _temp897_res_rf1cfh;
int _temp898_wg_rf1cfh;
int _temp899_pw_rf2cfh;
float _temp900_a_rf2cfh;
float _temp901_flip_rf2cfh;
int _temp902_res_rf2cfh;
int _temp903_wg_rf2cfh;
int _temp904_pw_rf3cfh;
float _temp905_a_rf3cfh;
float _temp906_flip_rf3cfh;
int _temp907_res_rf3cfh;
int _temp908_wg_rf3cfh;
float _temp909_a_gyrf0kcfh;
int _temp910_pw_gyrf0kcfha;
int _temp911_pw_gyrf0kcfh;
int _temp912_pw_gyrf0kcfhd;
float _temp913_a_gzrf0cfh;
int _temp914_pw_gzrf0cfha;
float _temp915_a_gzrf1cfh;
int _temp916_pw_gzrf1cfha;
int _temp917_pw_gxrf2cfha;
int _temp918_pw_gyrf3cfha;
float _temp919_a_gzrf2rcfh;
int _temp920_pw_gzrf2rcfha;
int _temp921_pw_gzrf2rcfh;
int _temp922_pw_gzrf2rcfhd;
float _temp923_a_gzrf3rcfh;
int _temp924_pw_gzrf3rcfha;
int _temp925_pw_gzrf3rcfh;
int _temp926_pw_gzrf3rcfhd;
float _temp927_a_gzrf3rcfh;
int _temp928_pw_gzrf3rcfha;
int _temp929_pw_gzrf3rcfh;
int _temp930_pw_gzrf3rcfhd;
float _temp931_a_gzrf3lcfh;
int _temp932_pw_gzrf3lcfha;
int _temp933_pw_gzrf3lcfh;
int _temp934_pw_gzrf3lcfhd;
float _temp935_a_gzrf2rcfh;
int _temp936_pw_gzrf2rcfha;
int _temp937_pw_gzrf2rcfh;
int _temp938_pw_gzrf2rcfhd;
float _temp939_a_gzrf3lcfh;
int _temp940_pw_gzrf3lcfha;
int _temp941_pw_gzrf3lcfh;
int _temp942_pw_gzrf3lcfhd;
int _temp943_pw_gxrf2cfha;
int _temp944_pw_gyrf2cfha;
float _temp945_a_gzrf2rcfh;
int _temp946_pw_gzrf2rcfha;
int _temp947_pw_gzrf2rcfh;
int _temp948_pw_gzrf2rcfhd;
int _temp949_dummy_pw;
float _temp950_a_gx1cfh;
int _temp951_pw_gx1cfha;
int _temp952_pw_gx1cfh;
int _temp953_pw_gx1cfhd;
float _temp954_a_gy1cfh;
int _temp955_pw_gy1cfha;
int _temp956_pw_gy1cfh;
int _temp957_pw_gy1cfhd;
float _temp958_a_gykcfh;
int _temp959_pw_gykcfha;
int _temp960_pw_gykcfh;
int _temp961_pw_gykcfhd;
int _temp962_cfh_newgeo;
float _temp963_a_gzrf1ftg;
float _temp964_a_gzrf2ftg;
float _temp965_a_gzrf3ftg;
int _temp966_pw_gzrf1ftga;
int _temp967_pw_gzrf2ftga;
float _temp968_a_gz1ftg;
int _temp969_pw_gz1ftg;
int _temp970_pw_gz1ftga;
int _temp971_pw_gz1ftgd;
float _temp972_a_gz2ftg;
int _temp973_pw_gz2ftg;
int _temp974_pw_gz2ftga;
int _temp975_pw_gz2ftgd;
int _temp976_pw_gzrf3ftga;
float _temp977_a_gz2bftg;
int _temp978_pw_gz2bftg;
int _temp979_pw_gz2bftga;
int _temp980_pw_gz2bftgd;
float _temp981_a_gz3ftg;
int _temp982_pw_gz3ftg;
int _temp983_pw_gz3ftga;
int _temp984_pw_gz3ftgd;
float _temp985_a_gxw1ftg;
float _temp986_a_gx1ftg;
int _temp987_pw_gx1ftg;
int _temp988_pw_gx1ftga;
int _temp989_pw_gx1ftgd;
float _temp990_a_gx2test;
int _temp991_pw_gx2test;
int _temp992_pw_gx2testa;
int _temp993_pw_gx2testd;
float _temp994_a_gx1bftg;
int _temp995_pw_gx1bftg;
int _temp996_pw_gx1bftga;
int _temp997_pw_gx1bftgd;
int _temp998_pw_gxw1ftga;
float _temp999_a_postgxw1ftg;
int _temp1000_pw_postgxw1ftg;
int _temp1001_pw_postgxw1ftga;
int _temp1002_pw_postgxw1ftgd;
float _temp1003_a_gxw2ftg;
int _temp1004_pw_gxw2ftga;
float _temp1005_a_gx2ftg;
int _temp1006_pw_gx2ftga;
int _temp1007_pw_gx2ftg;
int _temp1008_pw_gx2ftgd;
float _temp1009_a_gzrf1xtg;
float _temp1010_a_gzrf2xtg;
int _temp1011_pw_gzrf1xtga;
int _temp1012_pw_gzrf2xtga;
float _temp1013_a_gz2xtg;
int _temp1014_pw_gz2xtga;
int _temp1015_pw_gz2xtg;
int _temp1016_pw_gz2xtgd;
float _temp1017_a_gz1xtg;
int _temp1018_pw_gz1xtga;
int _temp1019_pw_gz1xtg;
int _temp1020_pw_gz1xtgd;
float _temp1021_a_gxw1xtg;
int _temp1022_pw_gxw1xtga;
float _temp1023_a_gx1bxtg;
int _temp1024_pw_gx1bxtg;
int _temp1025_pw_gx1bxtga;
int _temp1026_pw_gx1bxtgd;
float _temp1027_a_gykxtgl;
int _temp1028_pw_gykxtgla;
int _temp1029_pw_gykxtgl;
int _temp1030_pw_gykxtgld;
float _temp1031_a_gykxtgr;
int _temp1032_pw_gykxtgra;
int _temp1033_pw_gykxtgr;
int _temp1034_pw_gykxtgrd;
int _temp1035_tgcap;
int _temp1036_tgwindow;
int _temp1037_min_seqgrad;
int _temp1038_min_seqgrad;
int _temp1039_min_seqgrad;
int _temp1040_min_seqgrad;
int _temp1041_min_seqgrad;
int _temp1042_min_seqgrad;
int _temp1043_min_seqgrad;
int _temp1044_pw_gymn1a;
int _temp1045_pw_gymn1;
int _temp1046_pw_gymn1d;
float _temp1047_a_gzrf0;
int _temp1048_pw_gzrf0a;
int _temp1049_pw_gzrf0d;
float _temp1050_target;
int _temp1051_rtime;
int _temp1052_ftime;
float _temp1053_a_gyk0;
int _temp1054_pw_gyk0a;
int _temp1055_pw_gyk0;
int _temp1056_pw_gyk0d;
int _temp1057_pw_gzrf1a;
int _temp1058_pw_gzrf1d;
float _temp1059_target;
float _temp1060_a_gzrf2;
int _temp1061_pw_gzrf2a;
int _temp1062_pw_gzrf2d;
float _temp1063_target;
int _temp1064_rtime;
int _temp1065_ftime;
float _temp1066_a_gyrf2iv;
int _temp1067_pw_gyrf2iva;
int _temp1068_pw_gyrf2iv;
int _temp1069_pw_gyrf2ivd;
float _temp1070_target;
int _temp1071_rtime;
int _temp1072_ftime;
float _temp1073_a_gzrf2l1;
int _temp1074_pw_gzrf2l1a;
int _temp1075_pw_gzrf2l1;
int _temp1076_pw_gzrf2l1d;
float _temp1077_target;
int _temp1078_rtime;
int _temp1079_ftime;
float _temp1080_a_gzrf2r1;
int _temp1081_pw_gzrf2r1a;
int _temp1082_pw_gzrf2r1;
int _temp1083_pw_gzrf2r1d;
float _temp1084_target;
float _temp1085_target;
int _temp1086_rtime;
int _temp1087_ftime;
float _temp1088_a_gymn2;
int _temp1089_pw_gymn2a;
int _temp1090_pw_gymn2;
int _temp1091_pw_gymn2d;
float _temp1092_target;
int _temp1093_rtime;
int _temp1094_ftime;
float _temp1095_a_gymn1;
int _temp1096_pw_gymn1a;
int _temp1097_pw_gymn1;
int _temp1098_pw_gymn1d;
float _temp1099_target;
int _temp1100_rtime;
int _temp1101_ftime;
float _temp1102_a_gz1;
int _temp1103_pw_gz1a;
int _temp1104_pw_gz1;
int _temp1105_pw_gz1d;
float _temp1106_target;
int _temp1107_rtime;
int _temp1108_ftime;
float _temp1109_a_gzmn;
int _temp1110_pw_gzmna;
int _temp1111_pw_gzmn;
int _temp1112_pw_gzmnd;
float _temp1113_target;
int _temp1114_rtime;
int _temp1115_ftime;
float _temp1116_a_gxk;
int _temp1117_pw_gxka;
int _temp1118_pw_gxk;
int _temp1119_pw_gxkd;
float _temp1120_target;
int _temp1121_rtime;
int _temp1122_ftime;
float _temp1123_a_gyk;
int _temp1124_pw_gyka;
int _temp1125_pw_gyk;
int _temp1126_pw_gykd;
float _temp1127_target;
int _temp1128_rtime;
int _temp1129_ftime;
float _temp1130_a_gzk;
int _temp1131_pw_gzka;
int _temp1132_pw_gzk;
int _temp1133_pw_gzkd;
float _temp1134_target;
int _temp1135_rtime;
int _temp1136_ftime;
float _temp1137_a_gxtouchu2;
int _temp1138_pw_gxtouchu2a;
int _temp1139_pw_gxtouchu2;
int _temp1140_pw_gxtouchu2d;
float _temp1141_target;
int _temp1142_rtime;
int _temp1143_ftime;
float _temp1144_a_gytouchu2;
int _temp1145_pw_gytouchu2a;
int _temp1146_pw_gytouchu2;
int _temp1147_pw_gytouchu2d;
float _temp1148_target;
int _temp1149_rtime;
int _temp1150_ftime;
float _temp1151_a_gztouchu2;
int _temp1152_pw_gztouchu2a;
int _temp1153_pw_gztouchu2;
int _temp1154_pw_gztouchu2d;
float _temp1155_target;
int _temp1156_rtime;
int _temp1157_ftime;
float _temp1158_a_gxtouchu;
int _temp1159_pw_gxtouchua;
int _temp1160_pw_gxtouchu;
int _temp1161_pw_gxtouchud;
float _temp1162_target;
int _temp1163_rtime;
int _temp1164_ftime;
float _temp1165_a_gytouchu;
int _temp1166_pw_gytouchua;
int _temp1167_pw_gytouchu;
int _temp1168_pw_gytouchud;
float _temp1169_target;
int _temp1170_rtime;
int _temp1171_ftime;
float _temp1172_a_gztouchu;
int _temp1173_pw_gztouchua;
int _temp1174_pw_gztouchu;
int _temp1175_pw_gztouchud;
float _temp1176_target;
int _temp1177_rtime;
int _temp1178_ftime;
float _temp1179_a_gxtouchd2;
int _temp1180_pw_gxtouchd2a;
int _temp1181_pw_gxtouchd2;
int _temp1182_pw_gxtouchd2d;
float _temp1183_target;
int _temp1184_rtime;
int _temp1185_ftime;
float _temp1186_a_gytouchd2;
int _temp1187_pw_gytouchd2a;
int _temp1188_pw_gytouchd2;
int _temp1189_pw_gytouchd2d;
float _temp1190_target;
int _temp1191_rtime;
int _temp1192_ftime;
float _temp1193_a_gztouchd2;
int _temp1194_pw_gztouchd2a;
int _temp1195_pw_gztouchd2;
int _temp1196_pw_gztouchd2d;
float _temp1197_target;
int _temp1198_rtime;
int _temp1199_ftime;
float _temp1200_a_gxtouchd;
int _temp1201_pw_gxtouchda;
int _temp1202_pw_gxtouchd;
int _temp1203_pw_gxtouchdd;
float _temp1204_target;
int _temp1205_rtime;
int _temp1206_ftime;
float _temp1207_a_gytouchd;
int _temp1208_pw_gytouchda;
int _temp1209_pw_gytouchd;
int _temp1210_pw_gytouchdd;
float _temp1211_target;
int _temp1212_rtime;
int _temp1213_ftime;
float _temp1214_a_gztouchd;
int _temp1215_pw_gztouchda;
int _temp1216_pw_gztouchd;
int _temp1217_pw_gztouchdd;
float _temp1218_target;
int _temp1219_rtime;
int _temp1220_ftime;
float _temp1221_a_gxtouchf2;
int _temp1222_pw_gxtouchf2a;
int _temp1223_pw_gxtouchf2;
int _temp1224_pw_gxtouchf2d;
float _temp1225_target;
int _temp1226_rtime;
int _temp1227_ftime;
float _temp1228_a_gytouchf2;
int _temp1229_pw_gytouchf2a;
int _temp1230_pw_gytouchf2;
int _temp1231_pw_gytouchf2d;
float _temp1232_target;
int _temp1233_rtime;
int _temp1234_ftime;
float _temp1235_a_gztouchf2;
int _temp1236_pw_gztouchf2a;
int _temp1237_pw_gztouchf2;
int _temp1238_pw_gztouchf2d;
float _temp1239_target;
int _temp1240_rtime;
int _temp1241_ftime;
float _temp1242_a_gxtouchf;
int _temp1243_pw_gxtouchfa;
int _temp1244_pw_gxtouchf;
int _temp1245_pw_gxtouchfd;
float _temp1246_target;
int _temp1247_rtime;
int _temp1248_ftime;
float _temp1249_a_gytouchf;
int _temp1250_pw_gytouchfa;
int _temp1251_pw_gytouchf;
int _temp1252_pw_gytouchfd;
float _temp1253_target;
int _temp1254_rtime;
int _temp1255_ftime;
float _temp1256_a_gztouchf;
int _temp1257_pw_gztouchfa;
int _temp1258_pw_gztouchf;
int _temp1259_pw_gztouchfd;
float _temp1260_target;
int _temp1261_rtime;
int _temp1262_ftime;
float _temp1263_a_gzrfcs;
int _temp1264_pw_gzrfcsa;
int _temp1265_pw_gzrfcs;
int _temp1266_pw_gzrfcsd;
float _temp1267_target;
int _temp1268_rtime;
int _temp1269_ftime;
float _temp1270_a_gykcs;
int _temp1271_pw_gykcsa;
int _temp1272_pw_gykcs;
int _temp1273_pw_gykcsd;
float _temp1274_target;
int _temp1275_rtime;
int _temp1276_ftime;
float _temp1277_a_gxkcs;
int _temp1278_pw_gxkcsa;
int _temp1279_pw_gxkcs;
int _temp1280_pw_gxkcsd;
float _temp1281_target;
int _temp1282_rtime;
int _temp1283_ftime;
float _temp1284_a_gzkcs;
int _temp1285_pw_gzkcsa;
int _temp1286_pw_gzkcs;
int _temp1287_pw_gzkcsd;
float _temp1288_a_gzrfse1;
int _temp1289_pw_gzrfse1a;
int _temp1290_pw_gzrfse1d;
float _temp1291_target;
int _temp1292_rtime;
int _temp1293_ftime;
float _temp1294_a_gykse1;
int _temp1295_pw_gykse1a;
int _temp1296_pw_gykse1;
int _temp1297_pw_gykse1d;
float _temp1298_target;
int _temp1299_rtime;
int _temp1300_ftime;
float _temp1301_a_gxkse1;
int _temp1302_pw_gxkse1a;
int _temp1303_pw_gxkse1;
int _temp1304_pw_gxkse1d;
float _temp1305_a_gzrfse2;
int _temp1306_pw_gzrfse2a;
int _temp1307_pw_gzrfse2d;
float _temp1308_target;
int _temp1309_rtime;
int _temp1310_ftime;
float _temp1311_a_gykse2;
int _temp1312_pw_gykse2a;
int _temp1313_pw_gykse2;
int _temp1314_pw_gykse2d;
float _temp1315_target;
int _temp1316_rtime;
int _temp1317_ftime;
float _temp1318_a_gxkse2;
int _temp1319_pw_gxkse2a;
int _temp1320_pw_gxkse2;
int _temp1321_pw_gxkse2d;
float _temp1322_a_gzrfse3;
int _temp1323_pw_gzrfse3a;
int _temp1324_pw_gzrfse3d;
float _temp1325_target;
int _temp1326_rtime;
int _temp1327_ftime;
float _temp1328_a_gykse3;
int _temp1329_pw_gykse3a;
int _temp1330_pw_gykse3;
int _temp1331_pw_gykse3d;
float _temp1332_target;
int _temp1333_rtime;
int _temp1334_ftime;
float _temp1335_a_gxkse3;
int _temp1336_pw_gxkse3a;
int _temp1337_pw_gxkse3;
int _temp1338_pw_gxkse3d;
float _temp1339_a_gzrfse4;
int _temp1340_pw_gzrfse4a;
int _temp1341_pw_gzrfse4d;
float _temp1342_target;
int _temp1343_rtime;
int _temp1344_ftime;
float _temp1345_a_gykse4;
int _temp1346_pw_gykse4a;
int _temp1347_pw_gykse4;
int _temp1348_pw_gykse4d;
float _temp1349_target;
int _temp1350_rtime;
int _temp1351_ftime;
float _temp1352_a_gxkse4;
int _temp1353_pw_gxkse4a;
int _temp1354_pw_gxkse4;
int _temp1355_pw_gxkse4d;
float _temp1356_a_gzrfse5;
int _temp1357_pw_gzrfse5a;
int _temp1358_pw_gzrfse5d;
float _temp1359_target;
int _temp1360_rtime;
int _temp1361_ftime;
float _temp1362_a_gykse5;
int _temp1363_pw_gykse5a;
int _temp1364_pw_gykse5;
int _temp1365_pw_gykse5d;
float _temp1366_target;
int _temp1367_rtime;
int _temp1368_ftime;
float _temp1369_a_gxkse5;
int _temp1370_pw_gxkse5a;
int _temp1371_pw_gxkse5;
int _temp1372_pw_gxkse5d;
float _temp1373_a_gzrfse6;
int _temp1374_pw_gzrfse6a;
int _temp1375_pw_gzrfse6d;
float _temp1376_target;
int _temp1377_rtime;
int _temp1378_ftime;
float _temp1379_a_gykse6;
int _temp1380_pw_gykse6a;
int _temp1381_pw_gykse6;
int _temp1382_pw_gykse6d;
float _temp1383_target;
int _temp1384_rtime;
int _temp1385_ftime;
float _temp1386_a_gxkse6;
int _temp1387_pw_gxkse6a;
int _temp1388_pw_gxkse6;
int _temp1389_pw_gxkse6d;
float _temp1390_a_gxrfsx1;
int _temp1391_pw_gxrfsx1a;
int _temp1392_pw_gxrfsx1d;
float _temp1393_target;
int _temp1394_rtime;
int _temp1395_ftime;
float _temp1396_a_gyksx1;
int _temp1397_pw_gyksx1a;
int _temp1398_pw_gyksx1;
int _temp1399_pw_gyksx1d;
float _temp1400_target;
int _temp1401_rtime;
int _temp1402_ftime;
float _temp1403_a_gxksx1;
int _temp1404_pw_gxksx1a;
int _temp1405_pw_gxksx1;
int _temp1406_pw_gxksx1d;
float _temp1407_a_gxrfsx2;
int _temp1408_pw_gxrfsx2a;
int _temp1409_pw_gxrfsx2d;
float _temp1410_target;
int _temp1411_rtime;
int _temp1412_ftime;
float _temp1413_a_gyksx2;
int _temp1414_pw_gyksx2a;
int _temp1415_pw_gyksx2;
int _temp1416_pw_gyksx2d;
float _temp1417_target;
int _temp1418_rtime;
int _temp1419_ftime;
float _temp1420_a_gxksx2;
int _temp1421_pw_gxksx2a;
int _temp1422_pw_gxksx2;
int _temp1423_pw_gxksx2d;
float _temp1424_a_gyrfsy1;
int _temp1425_pw_gyrfsy1a;
int _temp1426_pw_gyrfsy1d;
float _temp1427_target;
int _temp1428_rtime;
int _temp1429_ftime;
float _temp1430_a_gyksy1;
int _temp1431_pw_gyksy1a;
int _temp1432_pw_gyksy1;
int _temp1433_pw_gyksy1d;
float _temp1434_target;
int _temp1435_rtime;
int _temp1436_ftime;
float _temp1437_a_gxksy1;
int _temp1438_pw_gxksy1a;
int _temp1439_pw_gxksy1;
int _temp1440_pw_gxksy1d;
float _temp1441_a_gyrfsy2;
int _temp1442_pw_gyrfsy2a;
int _temp1443_pw_gyrfsy2d;
float _temp1444_target;
int _temp1445_rtime;
int _temp1446_ftime;
float _temp1447_a_gyksy2;
int _temp1448_pw_gyksy2a;
int _temp1449_pw_gyksy2;
int _temp1450_pw_gyksy2d;
float _temp1451_target;
int _temp1452_rtime;
int _temp1453_ftime;
float _temp1454_a_gxksy2;
int _temp1455_pw_gxksy2a;
int _temp1456_pw_gxksy2;
int _temp1457_pw_gxksy2d;
float _temp1458_a_gzrfsz1;
int _temp1459_pw_gzrfsz1a;
int _temp1460_pw_gzrfsz1d;
float _temp1461_target;
int _temp1462_rtime;
int _temp1463_ftime;
float _temp1464_a_gyksz1;
int _temp1465_pw_gyksz1a;
int _temp1466_pw_gyksz1;
int _temp1467_pw_gyksz1d;
float _temp1468_target;
int _temp1469_rtime;
int _temp1470_ftime;
float _temp1471_a_gxksz1;
int _temp1472_pw_gxksz1a;
int _temp1473_pw_gxksz1;
int _temp1474_pw_gxksz1d;
float _temp1475_a_gzrfsz2;
int _temp1476_pw_gzrfsz2a;
int _temp1477_pw_gzrfsz2d;
float _temp1478_target;
int _temp1479_rtime;
int _temp1480_ftime;
float _temp1481_a_gyksz2;
int _temp1482_pw_gyksz2a;
int _temp1483_pw_gyksz2;
int _temp1484_pw_gyksz2d;
float _temp1485_target;
int _temp1486_rtime;
int _temp1487_ftime;
float _temp1488_a_gxksz2;
int _temp1489_pw_gxksz2a;
int _temp1490_pw_gxksz2;
int _temp1491_pw_gxksz2d;
float _temp1492_a_gzrf1mps1;
int _temp1493_pw_gzrf1mps1a;
int _temp1494_pw_gzrf1mps1d;
float _temp1495_target;
int _temp1496_rtime;
int _temp1497_ftime;
float _temp1498_a_gz1mps1;
int _temp1499_pw_gz1mps1a;
int _temp1500_pw_gz1mps1;
int _temp1501_pw_gz1mps1d;
float _temp1502_target;
int _temp1503_rtime;
int _temp1504_ftime;
float _temp1505_a_gx1mps1;
int _temp1506_pw_gx1mps1a;
int _temp1507_pw_gx1mps1;
int _temp1508_pw_gx1mps1d;
float _temp1509_a_gzrf2mps1;
int _temp1510_pw_gzrf2mps1a;
int _temp1511_pw_gzrf2mps1d;
float _temp1512_target;
int _temp1513_rtime;
int _temp1514_ftime;
float _temp1515_a_gzrf2lmps1;
int _temp1516_pw_gzrf2lmps1a;
int _temp1517_pw_gzrf2lmps1;
int _temp1518_pw_gzrf2lmps1d;
float _temp1519_target;
int _temp1520_rtime;
int _temp1521_ftime;
float _temp1522_a_gzrf2rmps1;
int _temp1523_pw_gzrf2rmps1a;
int _temp1524_pw_gzrf2rmps1;
int _temp1525_pw_gzrf2rmps1d;
float _temp1526_target;
int _temp1527_rtime;
int _temp1528_ftime;
float _temp1529_a_gxwmps1;
int _temp1530_pw_gxwmps1a;
int _temp1531_pw_gxwmps1;
int _temp1532_pw_gxwmps1d;
float _temp1533_a_gzrf1cfl;
int _temp1534_pw_gzrf1cfla;
int _temp1535_pw_gzrf1cfld;
float _temp1536_target;
int _temp1537_rtime;
int _temp1538_ftime;
float _temp1539_a_gz1cfl;
int _temp1540_pw_gz1cfla;
int _temp1541_pw_gz1cfl;
int _temp1542_pw_gz1cfld;
float _temp1543_target;
int _temp1544_rtime;
int _temp1545_ftime;
float _temp1546_a_gykcfl;
int _temp1547_pw_gykcfla;
int _temp1548_pw_gykcfl;
int _temp1549_pw_gykcfld;
float _temp1550_target;
int _temp1551_rtime;
int _temp1552_ftime;
float _temp1553_a_gxkrcvn;
int _temp1554_pw_gxkrcvna;
int _temp1555_pw_gxkrcvn;
int _temp1556_pw_gxkrcvnd;
float _temp1557_target;
int _temp1558_rtime;
int _temp1559_ftime;
float _temp1560_a_gykrcvn;
int _temp1561_pw_gykrcvna;
int _temp1562_pw_gykrcvn;
int _temp1563_pw_gykrcvnd;
float _temp1564_target;
int _temp1565_rtime;
int _temp1566_ftime;
float _temp1567_a_gzkrcvn;
int _temp1568_pw_gzkrcvna;
int _temp1569_pw_gzkrcvn;
int _temp1570_pw_gzkrcvnd;
float _temp1571_a_gzrf0cfh;
int _temp1572_pw_gzrf0cfha;
int _temp1573_pw_gzrf0cfhd;
float _temp1574_target;
int _temp1575_rtime;
int _temp1576_ftime;
float _temp1577_a_gyrf0kcfh;
int _temp1578_pw_gyrf0kcfha;
int _temp1579_pw_gyrf0kcfh;
int _temp1580_pw_gyrf0kcfhd;
float _temp1581_a_gzrf1cfh;
int _temp1582_pw_gzrf1cfha;
int _temp1583_pw_gzrf1cfhd;
float _temp1584_target;
float _temp1585_target;
float _temp1586_target;
int _temp1587_rtime;
int _temp1588_ftime;
float _temp1589_a_gxrf2cfh;
int _temp1590_pw_gxrf2cfha;
int _temp1591_pw_gxrf2cfh;
int _temp1592_pw_gxrf2cfhd;
float _temp1593_target;
int _temp1594_rtime;
int _temp1595_ftime;
float _temp1596_a_gyrf2cfh;
int _temp1597_pw_gyrf2cfha;
int _temp1598_pw_gyrf2cfh;
int _temp1599_pw_gyrf2cfhd;
float _temp1600_target;
int _temp1601_rtime;
int _temp1602_ftime;
float _temp1603_a_gzrf2lcfh;
int _temp1604_pw_gzrf2lcfha;
int _temp1605_pw_gzrf2lcfh;
int _temp1606_pw_gzrf2lcfhd;
float _temp1607_target;
int _temp1608_rtime;
int _temp1609_ftime;
float _temp1610_a_gzrf2rcfh;
int _temp1611_pw_gzrf2rcfha;
int _temp1612_pw_gzrf2rcfh;
int _temp1613_pw_gzrf2rcfhd;
float _temp1614_target;
int _temp1615_rtime;
int _temp1616_ftime;
float _temp1617_a_gyrf3cfh;
int _temp1618_pw_gyrf3cfha;
int _temp1619_pw_gyrf3cfh;
int _temp1620_pw_gyrf3cfhd;
float _temp1621_target;
int _temp1622_rtime;
int _temp1623_ftime;
float _temp1624_a_gzrf3lcfh;
int _temp1625_pw_gzrf3lcfha;
int _temp1626_pw_gzrf3lcfh;
int _temp1627_pw_gzrf3lcfhd;
float _temp1628_target;
int _temp1629_rtime;
int _temp1630_ftime;
float _temp1631_a_gzrf3rcfh;
int _temp1632_pw_gzrf3rcfha;
int _temp1633_pw_gzrf3rcfh;
int _temp1634_pw_gzrf3rcfhd;
float _temp1635_target;
int _temp1636_rtime;
int _temp1637_ftime;
float _temp1638_a_gy1cfh;
int _temp1639_pw_gy1cfha;
int _temp1640_pw_gy1cfh;
int _temp1641_pw_gy1cfhd;
float _temp1642_target;
int _temp1643_rtime;
int _temp1644_ftime;
float _temp1645_a_gx1cfh;
int _temp1646_pw_gx1cfha;
int _temp1647_pw_gx1cfh;
int _temp1648_pw_gx1cfhd;
float _temp1649_target;
int _temp1650_rtime;
int _temp1651_ftime;
float _temp1652_a_gykcfh;
int _temp1653_pw_gykcfha;
int _temp1654_pw_gykcfh;
int _temp1655_pw_gykcfhd;
float _temp1656_a_gzrf1ftg;
int _temp1657_pw_gzrf1ftga;
int _temp1658_pw_gzrf1ftgd;
float _temp1659_target;
int _temp1660_rtime;
int _temp1661_ftime;
float _temp1662_a_gz1ftg;
int _temp1663_pw_gz1ftga;
int _temp1664_pw_gz1ftg;
int _temp1665_pw_gz1ftgd;
float _temp1666_a_gzrf2ftg;
int _temp1667_pw_gzrf2ftga;
int _temp1668_pw_gzrf2ftgd;
float _temp1669_target;
int _temp1670_rtime;
int _temp1671_ftime;
float _temp1672_a_gz2ftg;
int _temp1673_pw_gz2ftga;
int _temp1674_pw_gz2ftg;
int _temp1675_pw_gz2ftgd;
float _temp1676_a_gzrf3ftg;
int _temp1677_pw_gzrf3ftga;
int _temp1678_pw_gzrf3ftgd;
float _temp1679_target;
int _temp1680_rtime;
int _temp1681_ftime;
float _temp1682_a_gz3ftg;
int _temp1683_pw_gz3ftga;
int _temp1684_pw_gz3ftg;
int _temp1685_pw_gz3ftgd;
float _temp1686_target;
int _temp1687_rtime;
int _temp1688_ftime;
float _temp1689_a_gx1ftg;
int _temp1690_pw_gx1ftga;
int _temp1691_pw_gx1ftg;
int _temp1692_pw_gx1ftgd;
float _temp1693_target;
int _temp1694_rtime;
int _temp1695_ftime;
float _temp1696_a_gx1bftg;
int _temp1697_pw_gx1bftga;
int _temp1698_pw_gx1bftg;
int _temp1699_pw_gx1bftgd;
float _temp1700_target;
int _temp1701_rtime;
int _temp1702_ftime;
float _temp1703_a_gxw1ftg;
int _temp1704_pw_gxw1ftga;
int _temp1705_pw_gxw1ftg;
int _temp1706_pw_gxw1ftgd;
float _temp1707_target;
int _temp1708_rtime;
int _temp1709_ftime;
float _temp1710_a_postgxw1ftg;
int _temp1711_pw_postgxw1ftga;
int _temp1712_pw_postgxw1ftg;
int _temp1713_pw_postgxw1ftgd;
float _temp1714_target;
int _temp1715_rtime;
int _temp1716_ftime;
float _temp1717_a_gz2bftg;
int _temp1718_pw_gz2bftga;
int _temp1719_pw_gz2bftg;
int _temp1720_pw_gz2bftgd;
float _temp1721_target;
int _temp1722_rtime;
int _temp1723_ftime;
float _temp1724_a_gx2ftg;
int _temp1725_pw_gx2ftga;
int _temp1726_pw_gx2ftg;
int _temp1727_pw_gx2ftgd;
float _temp1728_target;
int _temp1729_rtime;
int _temp1730_ftime;
float _temp1731_a_gxw2ftg;
int _temp1732_pw_gxw2ftga;
int _temp1733_pw_gxw2ftg;
int _temp1734_pw_gxw2ftgd;
float _temp1735_target;
int _temp1736_rtime;
int _temp1737_ftime;
float _temp1738_a_gx2test;
int _temp1739_pw_gx2testa;
int _temp1740_pw_gx2test;
int _temp1741_pw_gx2testd;
float _temp1742_a_gzrf1xtg;
int _temp1743_pw_gzrf1xtga;
int _temp1744_pw_gzrf1xtgd;
float _temp1745_target;
int _temp1746_rtime;
int _temp1747_ftime;
float _temp1748_a_gykxtgl;
int _temp1749_pw_gykxtgla;
int _temp1750_pw_gykxtgl;
int _temp1751_pw_gykxtgld;
float _temp1752_target;
int _temp1753_rtime;
int _temp1754_ftime;
float _temp1755_a_gz1xtg;
int _temp1756_pw_gz1xtga;
int _temp1757_pw_gz1xtg;
int _temp1758_pw_gz1xtgd;
float _temp1759_a_gzrf2xtg;
int _temp1760_pw_gzrf2xtga;
int _temp1761_pw_gzrf2xtgd;
float _temp1762_target;
int _temp1763_rtime;
int _temp1764_ftime;
float _temp1765_a_gz2xtg;
int _temp1766_pw_gz2xtga;
int _temp1767_pw_gz2xtg;
int _temp1768_pw_gz2xtgd;
float _temp1769_target;
int _temp1770_rtime;
int _temp1771_ftime;
float _temp1772_a_gykxtgr;
int _temp1773_pw_gykxtgra;
int _temp1774_pw_gykxtgr;
int _temp1775_pw_gykxtgrd;
float _temp1776_target;
int _temp1777_rtime;
int _temp1778_ftime;
float _temp1779_a_gx1bxtg;
int _temp1780_pw_gx1bxtga;
int _temp1781_pw_gx1bxtg;
int _temp1782_pw_gx1bxtgd;
float _temp1783_target;
int _temp1784_rtime;
int _temp1785_ftime;
float _temp1786_a_gxw1xtg;
int _temp1787_pw_gxw1xtga;
int _temp1788_pw_gxw1xtg;
int _temp1789_pw_gxw1xtgd;
float _temp1790_a_gzrf1as;
int _temp1791_pw_gzrf1asa;
int _temp1792_pw_gzrf1asd;
float _temp1793_target;
int _temp1794_rtime;
int _temp1795_ftime;
float _temp1796_a_gz1as;
int _temp1797_pw_gz1asa;
int _temp1798_pw_gz1as;
int _temp1799_pw_gz1asd;
float _temp1800_target;
int _temp1801_rtime;
int _temp1802_ftime;
float _temp1803_a_gxwas;
int _temp1804_pw_gxwasa;
int _temp1805_pw_gxwas;
int _temp1806_pw_gxwasd;
float _temp1807_target;
int _temp1808_rtime;
int _temp1809_ftime;
float _temp1810_a_gx1as;
int _temp1811_pw_gx1asa;
int _temp1812_pw_gx1as;
int _temp1813_pw_gx1asd;
float _temp1814_target;
float _temp1815_target;
float _temp1816_target;
int _temp1817_rtime;
int _temp1818_ftime;
float _temp1819_a_gxkas;
int _temp1820_pw_gxkasa;
int _temp1821_pw_gxkas;
int _temp1822_pw_gxkasd;
float _temp1823_target;
int _temp1824_rtime;
int _temp1825_ftime;
float _temp1826_a_gzkas;
int _temp1827_pw_gzkasa;
int _temp1828_pw_gzkas;
int _temp1829_pw_gzkasd;
float _temp1830_target;
float _temp1831_target;
float _temp1832_target;
float _temp1833_target;
float _temp1834_target;

#endif /* h_bbepi_hostdecl_h */

